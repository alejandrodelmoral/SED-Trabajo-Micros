
TrabajoMicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e30  08007e30  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e38  08007e38  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  20000180  08007fc0  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d44  08007fc0  00021d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001789a  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003394  00000000  00000000  00037a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  0003ade0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0003bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188f5  00000000  00000000  0003c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012387  00000000  00000000  0005515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a85  00000000  00000000  000674e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000380c  00000000  00000000  000f0fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007db0 	.word	0x08007db0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	08007db0 	.word	0x08007db0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <CDC_ReceiveCallBack>:

/* Private user code ---------------------------------------------------------*/
char readBuf[MAXC]; // Buffer de MAXC caracteres

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	//CDC_Transmit_FS(buf, len);
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	b29a      	uxth	r2, r3
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <CDC_ReceiveCallBack+0x24>)
 80004e6:	f002 ff9c 	bl	8003422 <HAL_UART_Transmit>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000420 	.word	0x20000420

080004f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 CDC_Transmit_FS((unsigned char*)readBuf, MAXC);
 8000500:	2101      	movs	r1, #1
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <HAL_UART_RxCpltCallback+0x24>)
 8000504:	f006 ffd6 	bl	80074b4 <CDC_Transmit_FS>
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, MAXC);
 8000508:	2201      	movs	r2, #1
 800050a:	4904      	ldr	r1, [pc, #16]	; (800051c <HAL_UART_RxCpltCallback+0x24>)
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <HAL_UART_RxCpltCallback+0x28>)
 800050e:	f003 f81a 	bl	8003546 <HAL_UART_Receive_IT>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000464 	.word	0x20000464
 8000520:	20000420 	.word	0x20000420

08000524 <main>:

int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa76 	bl	8000a18 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f824 	bl	8000578 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8d4 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f000 f8b2 	bl	800069c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000538:	f006 fef8 	bl	800732c <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 800053c:	f000 f884 	bl	8000648 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, MAXC);
 8000540:	2201      	movs	r2, #1
 8000542:	490b      	ldr	r1, [pc, #44]	; (8000570 <main+0x4c>)
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x50>)
 8000546:	f002 fffe 	bl	8003546 <HAL_UART_Receive_IT>
  /* Infinite loop */
  while (1)
  {
	  switch(*readBuf) // Switch del caracter del buffer
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x4c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b43      	cmp	r3, #67	; 0x43
 8000550:	d006      	beq.n	8000560 <main+0x3c>
 8000552:	2b43      	cmp	r3, #67	; 0x43
 8000554:	dc06      	bgt.n	8000564 <main+0x40>
 8000556:	2b41      	cmp	r3, #65	; 0x41
 8000558:	d006      	beq.n	8000568 <main+0x44>
 800055a:	2b42      	cmp	r3, #66	; 0x42
 800055c:	d006      	beq.n	800056c <main+0x48>
		  break;
	  }
	  default:
	  {
		  // Si se manda un caracter que no ha sido programado, mostrar error o ignorarlo
		  break;
 800055e:	e001      	b.n	8000564 <main+0x40>
		  break;
 8000560:	bf00      	nop
 8000562:	e7f2      	b.n	800054a <main+0x26>
		  break;
 8000564:	bf00      	nop
 8000566:	e7f0      	b.n	800054a <main+0x26>
		  break;
 8000568:	bf00      	nop
 800056a:	e7ee      	b.n	800054a <main+0x26>
		  break;
 800056c:	bf00      	nop
	  switch(*readBuf) // Switch del caracter del buffer
 800056e:	e7ec      	b.n	800054a <main+0x26>
 8000570:	20000464 	.word	0x20000464
 8000574:	20000420 	.word	0x20000420

08000578 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fc0a 	bl	8007da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <SystemClock_Config+0xc8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a20      	ldr	r2, [pc, #128]	; (8000644 <SystemClock_Config+0xcc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005ec:	2348      	movs	r3, #72	; 0x48
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005f4:	2303      	movs	r3, #3
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fa4f 	bl	8002aa0 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f8c8 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2102      	movs	r1, #2
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fcb1 	bl	8002f90 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000634:	f000 f8b2 	bl	800079c <Error_Handler>
  }
}
 8000638:	bf00      	nop
 800063a:	3750      	adds	r7, #80	; 0x50
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_USART6_UART_Init>:

static void MX_USART6_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  huart6.Instance = USART6;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART6_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 8000654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000658:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART6_UART_Init+0x4c>)
 8000680:	f002 fe82 	bl	8003388 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f887 	bl	800079c <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000420 	.word	0x20000420
 8000698:	40011400 	.word	0x40011400

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_DMA_Init+0x3c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2039      	movs	r0, #57	; 0x39
 80006c4:	f000 fb19 	bl	8000cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006c8:	2039      	movs	r0, #57	; 0x39
 80006ca:	f000 fb32 	bl	8000d32 <HAL_NVIC_EnableIRQ>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <MX_GPIO_Init+0xb8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a26      	ldr	r2, [pc, #152]	; (8000794 <MX_GPIO_Init+0xb8>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_GPIO_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_GPIO_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <MX_GPIO_Init+0xbc>)
 800076a:	f000 fffd 	bl	8001768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0xbc>)
 8000788:	f000 fe6a 	bl	8001460 <HAL_GPIO_Init>
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020c00 	.word	0x40020c00

0800079c <Error_Handler>:

void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <HAL_MspInit+0x4c>)
 80007b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007bc:	6453      	str	r3, [r2, #68]	; 0x44
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x4c>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x4c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6413      	str	r3, [r2, #64]	; 0x40
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f000 fa7c 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a35      	ldr	r2, [pc, #212]	; (80008ec <HAL_UART_MspInit+0xf4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d164      	bne.n	80008e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b34      	ldr	r3, [pc, #208]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a33      	ldr	r2, [pc, #204]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b2a      	ldr	r3, [pc, #168]	; (80008f0 <HAL_UART_MspInit+0xf8>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000852:	23c0      	movs	r3, #192	; 0xc0
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000862:	2308      	movs	r3, #8
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	4821      	ldr	r0, [pc, #132]	; (80008f4 <HAL_UART_MspInit+0xfc>)
 800086e:	f000 fdf7 	bl	8001460 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <HAL_UART_MspInit+0x100>)
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <HAL_UART_MspInit+0x104>)
 8000876:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_UART_MspInit+0x100>)
 800087a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800087e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <HAL_UART_MspInit+0x100>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_UART_MspInit+0x100>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <HAL_UART_MspInit+0x100>)
 800088e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000892:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_UART_MspInit+0x100>)
 8000896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800089a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_UART_MspInit+0x100>)
 800089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008aa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008ba:	f000 fa55 	bl	8000d68 <HAL_DMA_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80008c4:	f7ff ff6a 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_UART_MspInit+0x100>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2047      	movs	r0, #71	; 0x47
 80008da:	f000 fa0e 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80008de:	2047      	movs	r0, #71	; 0x47
 80008e0:	f000 fa27 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40011400 	.word	0x40011400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	200003c0 	.word	0x200003c0
 80008fc:	40026428 	.word	0x40026428

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8b2 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <DMA2_Stream1_IRQHandler+0x10>)
 8000962:	f000 fb41 	bl	8000fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200003c0 	.word	0x200003c0

08000970 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000974:	4802      	ldr	r0, [pc, #8]	; (8000980 <OTG_FS_IRQHandler+0x10>)
 8000976:	f001 f860 	bl	8001a3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000193c 	.word	0x2000193c

08000984 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <USART6_IRQHandler+0x10>)
 800098a:	f002 fe0d 	bl	80035a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000420 	.word	0x20000420

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <SystemInit+0x28>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <SystemInit+0x28>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SystemInit+0x28>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	609a      	str	r2, [r3, #8]
#endif
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009ca:	e003      	b.n	80009d4 <LoopCopyDataInit>

080009cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009d2:	3104      	adds	r1, #4

080009d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009dc:	d3f6      	bcc.n	80009cc <CopyDataInit>
  ldr  r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009e0:	e002      	b.n	80009e8 <LoopFillZerobss>

080009e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009e4:	f842 3b04 	str.w	r3, [r2], #4

080009e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009ec:	d3f9      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd3 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f007 f9b1 	bl	8007d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff fd95 	bl	8000524 <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a00:	08007e40 	.word	0x08007e40
  ldr  r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a08:	20000180 	.word	0x20000180
  ldr  r2, =_sbss
 8000a0c:	20000180 	.word	0x20000180
  ldr  r3, = _ebss
 8000a10:	20001d44 	.word	0x20001d44

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <HAL_Init+0x40>)
 8000a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a28:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_Init+0x40>)
 8000a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x40>)
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f94f 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff feac 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023c00 	.word	0x40023c00

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f967 	bl	8000d4e <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f92f 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000468 	.word	0x20000468

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000468 	.word	0x20000468

08000afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b04:	f7ff ffee 	bl	8000ae4 <HAL_GetTick>
 8000b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b14:	d005      	beq.n	8000b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_Delay+0x44>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b22:	bf00      	nop
 8000b24:	f7ff ffde 	bl	8000ae4 <HAL_GetTick>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d8f7      	bhi.n	8000b24 <HAL_Delay+0x28>
  {
  }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4907      	ldr	r1, [pc, #28]	; (8000be0 <__NVIC_EnableIRQ+0x38>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db0a      	blt.n	8000c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	490c      	ldr	r1, [pc, #48]	; (8000c30 <__NVIC_SetPriority+0x4c>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	0112      	lsls	r2, r2, #4
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	440b      	add	r3, r1
 8000c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c0c:	e00a      	b.n	8000c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4908      	ldr	r1, [pc, #32]	; (8000c34 <__NVIC_SetPriority+0x50>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	3b04      	subs	r3, #4
 8000c1c:	0112      	lsls	r2, r2, #4
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	440b      	add	r3, r1
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f1c3 0307 	rsb	r3, r3, #7
 8000c52:	2b04      	cmp	r3, #4
 8000c54:	bf28      	it	cs
 8000c56:	2304      	movcs	r3, #4
 8000c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	d902      	bls.n	8000c68 <NVIC_EncodePriority+0x30>
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3b03      	subs	r3, #3
 8000c66:	e000      	b.n	8000c6a <NVIC_EncodePriority+0x32>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43da      	mvns	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	4313      	orrs	r3, r2
         );
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f7ff ff8e 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff29 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff3e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff8e 	bl	8000c38 <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff31 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffa2 	bl	8000ca0 <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff feb6 	bl	8000ae4 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e099      	b.n	8000eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2202      	movs	r2, #2
 8000d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da4:	e00f      	b.n	8000dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000da6:	f7ff fe9d 	bl	8000ae4 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d908      	bls.n	8000dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e078      	b.n	8000eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1e8      	bne.n	8000da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_DMA_Init+0x158>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	2b04      	cmp	r3, #4
 8000e1e:	d107      	bne.n	8000e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d117      	bne.n	8000e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00e      	beq.n	8000e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 fa7b 	bl	8001368 <DMA_CheckFifoParam>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d008      	beq.n	8000e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e86:	2301      	movs	r3, #1
 8000e88:	e016      	b.n	8000eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fa32 	bl	80012fc <DMA_CalcBaseAndBitshift>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea0:	223f      	movs	r2, #63	; 0x3f
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	f010803f 	.word	0xf010803f

08000ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ed2:	f7ff fe07 	bl	8000ae4 <HAL_GetTick>
 8000ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d008      	beq.n	8000ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e052      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0216 	bic.w	r2, r2, #22
 8000f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_DMA_Abort+0x62>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f46:	e013      	b.n	8000f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f48:	f7ff fdcc 	bl	8000ae4 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d90c      	bls.n	8000f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2220      	movs	r2, #32
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e015      	b.n	8000f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1e4      	bne.n	8000f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f82:	223f      	movs	r2, #63	; 0x3f
 8000f84:	409a      	lsls	r2, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00c      	b.n	8000fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0201 	bic.w	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ff4:	4b92      	ldr	r3, [pc, #584]	; (8001240 <HAL_DMA_IRQHandler+0x258>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a92      	ldr	r2, [pc, #584]	; (8001244 <HAL_DMA_IRQHandler+0x25c>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	0a9b      	lsrs	r3, r3, #10
 8001000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2208      	movs	r2, #8
 8001014:	409a      	lsls	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01a      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d013      	beq.n	8001054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0204 	bic.w	r2, r2, #4
 800103a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	2208      	movs	r2, #8
 8001042:	409a      	lsls	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001058:	2201      	movs	r2, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d012      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	f043 0202 	orr.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800108e:	2204      	movs	r2, #4
 8001090:	409a      	lsls	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d012      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	2204      	movs	r2, #4
 80010ae:	409a      	lsls	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	f043 0204 	orr.w	r2, r3, #4
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	2210      	movs	r2, #16
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d043      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d03c      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e2:	2210      	movs	r2, #16
 80010e4:	409a      	lsls	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d018      	beq.n	800112a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	2b00      	cmp	r3, #0
 800110c:	d024      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	4798      	blx	r3
 8001116:	e01f      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01b      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	4798      	blx	r3
 8001128:	e016      	b.n	8001158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0208 	bic.w	r2, r2, #8
 8001146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115c:	2220      	movs	r2, #32
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 808e 	beq.w	8001286 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 8086 	beq.w	8001286 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117e:	2220      	movs	r2, #32
 8001180:	409a      	lsls	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b05      	cmp	r3, #5
 8001190:	d136      	bne.n	8001200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 0216 	bic.w	r2, r2, #22
 80011a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <HAL_DMA_IRQHandler+0x1da>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0208 	bic.w	r2, r2, #8
 80011d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	223f      	movs	r2, #63	; 0x3f
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d07d      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
        }
        return;
 80011fe:	e078      	b.n	80012f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01c      	beq.n	8001248 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001220:	2b00      	cmp	r3, #0
 8001222:	d030      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e02b      	b.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	2b00      	cmp	r3, #0
 8001234:	d027      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
 800123e:	e022      	b.n	8001286 <HAL_DMA_IRQHandler+0x29e>
 8001240:	20000000 	.word	0x20000000
 8001244:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0210 	bic.w	r2, r2, #16
 8001264:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	2b00      	cmp	r3, #0
 800128c:	d032      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d022      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2205      	movs	r2, #5
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0201 	bic.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d307      	bcc.n	80012ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f2      	bne.n	80012b2 <HAL_DMA_IRQHandler+0x2ca>
 80012cc:	e000      	b.n	80012d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
 80012f0:	e000      	b.n	80012f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012f2:	bf00      	nop
    }
  }
}
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop

080012fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	3b10      	subs	r3, #16
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <DMA_CalcBaseAndBitshift+0x64>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <DMA_CalcBaseAndBitshift+0x68>)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d909      	bls.n	800133e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001332:	f023 0303 	bic.w	r3, r3, #3
 8001336:	1d1a      	adds	r2, r3, #4
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	659a      	str	r2, [r3, #88]	; 0x58
 800133c:	e007      	b.n	800134e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001346:	f023 0303 	bic.w	r3, r3, #3
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	aaaaaaab 	.word	0xaaaaaaab
 8001364:	08007e28 	.word	0x08007e28

08001368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d11f      	bne.n	80013c2 <DMA_CheckFifoParam+0x5a>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d856      	bhi.n	8001436 <DMA_CheckFifoParam+0xce>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <DMA_CheckFifoParam+0x28>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013b3 	.word	0x080013b3
 8001398:	080013a1 	.word	0x080013a1
 800139c:	08001437 	.word	0x08001437
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d046      	beq.n	800143a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b0:	e043      	b.n	800143a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013ba:	d140      	bne.n	800143e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013c0:	e03d      	b.n	800143e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ca:	d121      	bne.n	8001410 <DMA_CheckFifoParam+0xa8>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d837      	bhi.n	8001442 <DMA_CheckFifoParam+0xda>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <DMA_CheckFifoParam+0x70>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013ef 	.word	0x080013ef
 80013e0:	080013e9 	.word	0x080013e9
 80013e4:	08001401 	.word	0x08001401
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
      break;
 80013ec:	e030      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d025      	beq.n	8001446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013fe:	e022      	b.n	8001446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001408:	d11f      	bne.n	800144a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800140e:	e01c      	b.n	800144a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d903      	bls.n	800141e <DMA_CheckFifoParam+0xb6>
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d003      	beq.n	8001424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800141c:	e018      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
      break;
 8001422:	e015      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00e      	beq.n	800144e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      break;
 8001434:	e00b      	b.n	800144e <DMA_CheckFifoParam+0xe6>
      break;
 8001436:	bf00      	nop
 8001438:	e00a      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;
 800143a:	bf00      	nop
 800143c:	e008      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;
 800143e:	bf00      	nop
 8001440:	e006      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;
 8001442:	bf00      	nop
 8001444:	e004      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;
 8001446:	bf00      	nop
 8001448:	e002      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;   
 800144a:	bf00      	nop
 800144c:	e000      	b.n	8001450 <DMA_CheckFifoParam+0xe8>
      break;
 800144e:	bf00      	nop
    }
  } 
  
  return status; 
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	e159      	b.n	8001730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8148 	bne.w	800172a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d005      	beq.n	80014b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d130      	bne.n	8001514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e8:	2201      	movs	r2, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	091b      	lsrs	r3, r3, #4
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	2b03      	cmp	r3, #3
 800151e:	d017      	beq.n	8001550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d123      	bne.n	80015a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	220f      	movs	r2, #15
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 0203 	and.w	r2, r3, #3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a2 	beq.w	800172a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a56      	ldr	r2, [pc, #344]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b54      	ldr	r3, [pc, #336]	; (8001748 <HAL_GPIO_Init+0x2e8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	220f      	movs	r2, #15
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	; (8001750 <HAL_GPIO_Init+0x2f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x202>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a48      	ldr	r2, [pc, #288]	; (8001754 <HAL_GPIO_Init+0x2f4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x1fe>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a47      	ldr	r2, [pc, #284]	; (8001758 <HAL_GPIO_Init+0x2f8>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x1fa>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a46      	ldr	r2, [pc, #280]	; (800175c <HAL_GPIO_Init+0x2fc>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x1f6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a45      	ldr	r2, [pc, #276]	; (8001760 <HAL_GPIO_Init+0x300>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x1f2>
 800164e:	2304      	movs	r3, #4
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001652:	2307      	movs	r3, #7
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x204>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x204>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <HAL_GPIO_Init+0x2ec>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a6:	4a2f      	ldr	r2, [pc, #188]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d0:	4a24      	ldr	r2, [pc, #144]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f aea2 	bls.w	800147c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40013c00 	.word	0x40013c00

08001768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]
 8001774:	4613      	mov	r3, r2
 8001776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001778:	787b      	ldrb	r3, [r7, #1]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001784:	e003      	b.n	800178e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	041a      	lsls	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	619a      	str	r2, [r3, #24]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800179a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179c:	b08f      	sub	sp, #60	; 0x3c
 800179e:	af0a      	add	r7, sp, #40	; 0x28
 80017a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e10f      	b.n	80019cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f005 ffbc 	bl	8007744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fea9 	bl	8004542 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	687e      	ldr	r6, [r7, #4]
 80017f8:	466d      	mov	r5, sp
 80017fa:	f106 0410 	add.w	r4, r6, #16
 80017fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800180a:	e885 0003 	stmia.w	r5, {r0, r1}
 800180e:	1d33      	adds	r3, r6, #4
 8001810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f002 fd80 	bl	8004318 <USB_CoreInit>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0d0      	b.n	80019cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fe97 	bl	8004564 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	e04a      	b.n	80018d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	333d      	adds	r3, #61	; 0x3d
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	333c      	adds	r3, #60	; 0x3c
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b298      	uxth	r0, r3
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3342      	adds	r3, #66	; 0x42
 8001878:	4602      	mov	r2, r0
 800187a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333f      	adds	r3, #63	; 0x3f
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3344      	adds	r3, #68	; 0x44
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3348      	adds	r3, #72	; 0x48
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3350      	adds	r3, #80	; 0x50
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d3af      	bcc.n	800183c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e044      	b.n	800196c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	440b      	add	r3, r1
 80018f0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	3301      	adds	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3b5      	bcc.n	80018e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	687e      	ldr	r6, [r7, #4]
 800197e:	466d      	mov	r5, sp
 8001980:	f106 0410 	add.w	r4, r6, #16
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001990:	e885 0003 	stmia.w	r5, {r0, r1}
 8001994:	1d33      	adds	r3, r6, #4
 8001996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f002 fe2f 	bl	80045fc <USB_DevInit>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e00d      	b.n	80019cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 feab 	bl	8005720 <USB_DevDisconnect>

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_Start+0x1c>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e020      	b.n	8001a32 <HAL_PCD_Start+0x5e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d109      	bne.n	8001a14 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fd81 	bl	8004520 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fe5b 	bl	80056de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a3a:	b590      	push	{r4, r7, lr}
 8001a3c:	b08d      	sub	sp, #52	; 0x34
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 ff19 	bl	8005888 <USB_GetMode>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 839d 	bne.w	8002198 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fe7d 	bl	8005762 <USB_ReadInterrupts>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8393 	beq.w	8002196 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fe74 	bl	8005762 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d107      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f002 0202 	and.w	r2, r2, #2
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fe62 	bl	8005762 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b10      	cmp	r3, #16
 8001aa6:	d161      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0210 	bic.w	r2, r2, #16
 8001ab6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f003 020f 	and.w	r2, r3, #15
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	0c5b      	lsrs	r3, r3, #17
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d124      	bne.n	8001b2e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d035      	beq.n	8001b5c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	6a38      	ldr	r0, [r7, #32]
 8001b04:	f003 fc99 	bl	800543a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b14:	441a      	add	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b26:	441a      	add	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	619a      	str	r2, [r3, #24]
 8001b2c:	e016      	b.n	8001b5c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	0c5b      	lsrs	r3, r3, #17
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d110      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b40:	2208      	movs	r2, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	6a38      	ldr	r0, [r7, #32]
 8001b46:	f003 fc78 	bl	800543a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b56:	441a      	add	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0210 	orr.w	r2, r2, #16
 8001b6a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 fdf6 	bl	8005762 <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b80:	d16e      	bne.n	8001c60 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fdfc 	bl	8005788 <USB_ReadDevAllOutEpInterrupt>
 8001b90:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b92:	e062      	b.n	8001c5a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d057      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fe21 	bl	80057f0 <USB_ReadDevOutEPInterrupt>
 8001bae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00c      	beq.n	8001bd4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2301      	movs	r3, #1
 8001bca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fdb0 	bl	8002734 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	015a      	lsls	r2, r3, #5
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bea:	461a      	mov	r2, r3
 8001bec:	2308      	movs	r3, #8
 8001bee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 feaa 	bl	800294c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2310      	movs	r3, #16
 8001c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f003 0320 	and.w	r3, r3, #32
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c46:	461a      	mov	r2, r3
 8001c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d199      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fd7c 	bl	8005762 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c74:	f040 80c0 	bne.w	8001df8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fd9d 	bl	80057bc <USB_ReadDevAllInEpInterrupt>
 8001c82:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c88:	e0b2      	b.n	8001df0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a7 	beq.w	8001de4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 fdc3 	bl	800582c <USB_ReadDevInEPInterrupt>
 8001ca6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d057      	beq.n	8001d62 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	2201      	movs	r2, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69f9      	ldr	r1, [r7, #28]
 8001cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d132      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3348      	adds	r3, #72	; 0x48
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4403      	add	r3, r0
 8001d10:	3344      	adds	r3, #68	; 0x44
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4419      	add	r1, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	3348      	adds	r3, #72	; 0x48
 8001d26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d113      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x31c>
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3350      	adds	r3, #80	; 0x50
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d108      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2101      	movs	r1, #1
 8001d52:	f003 fdcb 	bl	80058ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f005 fd72 	bl	8007846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2308      	movs	r3, #8
 8001d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d94:	461a      	mov	r2, r3
 8001d96:	2310      	movs	r3, #16
 8001d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db0:	461a      	mov	r2, r3
 8001db2:	2340      	movs	r3, #64	; 0x40
 8001db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2302      	movs	r3, #2
 8001dd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fc1b 	bl	800261a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	3301      	adds	r3, #1
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dec:	085b      	lsrs	r3, r3, #1
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f af49 	bne.w	8001c8a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fcb0 	bl	8005762 <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e0c:	d122      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e34:	2100      	movs	r1, #0
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fe26 	bl	8002a88 <HAL_PCDEx_LPM_Callback>
 8001e3c:	e002      	b.n	8001e44 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f005 fd6e 	bl	8007920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fc82 	bl	8005762 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e68:	d112      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f005 fd2a 	bl	80078d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e8e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fc64 	bl	8005762 <USB_ReadInterrupts>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea4:	f040 80c7 	bne.w	8002036 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fcfe 	bl	80048c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ecc:	e056      	b.n	8001f7c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eda:	461a      	mov	r2, r3
 8001edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ee0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef2:	0151      	lsls	r1, r2, #5
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	440a      	add	r2, r1
 8001ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001efc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f00:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f12:	0151      	lsls	r1, r2, #5
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	440a      	add	r2, r1
 8001f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f46:	0151      	lsls	r1, r2, #5
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	440a      	add	r2, r1
 8001f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	3301      	adds	r3, #1
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3a3      	bcc.n	8001ece <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb2:	f043 030b 	orr.w	r3, r3, #11
 8001fb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fc8:	f043 030b 	orr.w	r3, r3, #11
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	e015      	b.n	8001ffc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fe2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001fe6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	69fa      	ldr	r2, [r7, #28]
 8001ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff6:	f043 030b 	orr.w	r3, r3, #11
 8001ffa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800200e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002020:	461a      	mov	r2, r3
 8002022:	f003 fc63 	bl	80058ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fb91 	bl	8005762 <USB_ReadInterrupts>
 8002040:	4603      	mov	r3, r0
 8002042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204a:	d124      	bne.n	8002096 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f003 fc27 	bl	80058a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fc8f 	bl	800497e <USB_GetDevSpeed>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681c      	ldr	r4, [r3, #0]
 800206c:	f001 f958 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8002070:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	4620      	mov	r0, r4
 800207c:	f002 f9ae 	bl	80043dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f005 fc08 	bl	8007896 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002094:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fb61 	bl	8005762 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d10a      	bne.n	80020c0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f005 fbe5 	bl	800787a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f002 0208 	and.w	r2, r2, #8
 80020be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 fb4c 	bl	8005762 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d4:	d10f      	bne.n	80020f6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f005 fc3d 	bl	8007960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fb31 	bl	8005762 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800210a:	d10f      	bne.n	800212c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f005 fc10 	bl	800793c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800212a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fb16 	bl	8005762 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d10a      	bne.n	8002158 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f005 fc1e 	bl	8007984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f003 fb00 	bl	8005762 <USB_ReadInterrupts>
 8002162:	4603      	mov	r3, r0
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b04      	cmp	r3, #4
 800216a:	d115      	bne.n	8002198 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f005 fc0e 	bl	80079a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	e000      	b.n	8002198 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002196:	bf00      	nop
    }
  }
}
 8002198:	3734      	adds	r7, #52	; 0x34
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}

0800219e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_SetAddress+0x1a>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e013      	b.n	80021e0 <HAL_PCD_SetAddress+0x42>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fa5e 	bl	8005692 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	70fb      	strb	r3, [r7, #3]
 80021fa:	460b      	mov	r3, r1
 80021fc:	803b      	strh	r3, [r7, #0]
 80021fe:	4613      	mov	r3, r2
 8002200:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	da0f      	bge.n	800222e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3338      	adds	r3, #56	; 0x38
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	705a      	strb	r2, [r3, #1]
 800222c:	e00f      	b.n	800224e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800225a:	883a      	ldrh	r2, [r7, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	78ba      	ldrb	r2, [r7, #2]
 8002264:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002278:	78bb      	ldrb	r3, [r7, #2]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d102      	bne.n	8002284 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_PCD_EP_Open+0xaa>
 800228e:	2302      	movs	r3, #2
 8002290:	e00e      	b.n	80022b0 <HAL_PCD_EP_Open+0xc8>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68f9      	ldr	r1, [r7, #12]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fb91 	bl	80049c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022ae:	7afb      	ldrb	r3, [r7, #11]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da0f      	bge.n	80022ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 020f 	and.w	r2, r3, #15
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	3338      	adds	r3, #56	; 0x38
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	705a      	strb	r2, [r3, #1]
 80022ea:	e00f      	b.n	800230c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	b2da      	uxtb	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_PCD_EP_Close+0x6e>
 8002322:	2302      	movs	r3, #2
 8002324:	e00e      	b.n	8002344 <HAL_PCD_EP_Close+0x8c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68f9      	ldr	r1, [r7, #12]
 8002334:	4618      	mov	r0, r3
 8002336:	f002 fbcf 	bl	8004ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	460b      	mov	r3, r1
 800235a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2200      	movs	r2, #0
 800238c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	b2da      	uxtb	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6979      	ldr	r1, [r7, #20]
 80023c0:	f002 feaa 	bl	8005118 <USB_EP0StartXfer>
 80023c4:	e008      	b.n	80023d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	f002 fc5c 	bl	8004c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	460b      	mov	r3, r1
 80023ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 020f 	and.w	r2, r3, #15
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002404:	681b      	ldr	r3, [r3, #0]
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	460b      	mov	r3, r1
 8002420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	3338      	adds	r3, #56	; 0x38
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	3304      	adds	r3, #4
 8002438:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2201      	movs	r2, #1
 8002450:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	b2da      	uxtb	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	6979      	ldr	r1, [r7, #20]
 8002484:	f002 fe48 	bl	8005118 <USB_EP0StartXfer>
 8002488:	e008      	b.n	800249c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6818      	ldr	r0, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	f002 fbfa 	bl	8004c90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d901      	bls.n	80024c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e050      	b.n	8002566 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da0f      	bge.n	80024ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	f003 020f 	and.w	r2, r3, #15
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3338      	adds	r3, #56	; 0x38
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	705a      	strb	r2, [r3, #1]
 80024ea:	e00d      	b.n	8002508 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	3304      	adds	r3, #4
 8002500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	b2da      	uxtb	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_PCD_EP_SetStall+0x82>
 8002524:	2302      	movs	r3, #2
 8002526:	e01e      	b.n	8002566 <HAL_PCD_EP_SetStall+0xc0>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	4618      	mov	r0, r3
 8002538:	f002 ffd7 	bl	80054ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	b2d9      	uxtb	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002556:	461a      	mov	r2, r3
 8002558:	f003 f9c8 	bl	80058ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	460b      	mov	r3, r1
 8002578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	f003 020f 	and.w	r2, r3, #15
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d901      	bls.n	800258c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e042      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800258c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da0f      	bge.n	80025b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	3338      	adds	r3, #56	; 0x38
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	3304      	adds	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	705a      	strb	r2, [r3, #1]
 80025b2:	e00f      	b.n	80025d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_EP_ClrStall+0x86>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e00e      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f002 ffdf 	bl	80055c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b08a      	sub	sp, #40	; 0x28
 800261e:	af02      	add	r7, sp, #8
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	3338      	adds	r3, #56	; 0x38
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	3304      	adds	r3, #4
 8002640:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	429a      	cmp	r2, r3
 800264c:	d901      	bls.n	8002652 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06c      	b.n	800272c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	429a      	cmp	r2, r3
 8002666:	d902      	bls.n	800266e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3303      	adds	r3, #3
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002676:	e02b      	b.n	80026d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	429a      	cmp	r2, r3
 800268c:	d902      	bls.n	8002694 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3303      	adds	r3, #3
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f002 fe83 	bl	80053be <USB_WritePacket>

    ep->xfer_buff  += len;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	441a      	add	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d809      	bhi.n	80026fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d203      	bcs.n	80026fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1be      	bne.n	8002678 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	429a      	cmp	r2, r3
 8002704:	d811      	bhi.n	800272a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	2201      	movs	r2, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	43db      	mvns	r3, r3
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002726:	4013      	ands	r3, r2
 8002728:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	333c      	adds	r3, #60	; 0x3c
 800274c:	3304      	adds	r3, #4
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 80a0 	bne.w	80028ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d015      	beq.n	80027a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a72      	ldr	r2, [pc, #456]	; (8002944 <PCD_EP_OutXfrComplete_int+0x210>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f240 80dd 	bls.w	800293a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80d7 	beq.w	800293a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279e:	6093      	str	r3, [r2, #8]
 80027a0:	e0cb      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	461a      	mov	r2, r3
 80027ba:	2320      	movs	r3, #32
 80027bc:	6093      	str	r3, [r2, #8]
 80027be:	e0bc      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80b7 	bne.w	800293a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <PCD_EP_OutXfrComplete_int+0x210>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d90f      	bls.n	80027f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ea:	461a      	mov	r2, r3
 80027ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f0:	6093      	str	r3, [r2, #8]
 80027f2:	e0a2      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002806:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	0159      	lsls	r1, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	440b      	add	r3, r1
 8002810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800281a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4403      	add	r3, r0
 800282a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800282e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4403      	add	r3, r0
 8002852:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4419      	add	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800286c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d114      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x16a>
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002896:	461a      	mov	r2, r3
 8002898:	2101      	movs	r1, #1
 800289a:	f003 f827 	bl	80058ec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f004 ffb3 	bl	8007810 <HAL_PCD_DataOutStageCallback>
 80028aa:	e046      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4a26      	ldr	r2, [pc, #152]	; (8002948 <PCD_EP_OutXfrComplete_int+0x214>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d124      	bne.n	80028fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ca:	461a      	mov	r2, r3
 80028cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d0:	6093      	str	r3, [r2, #8]
 80028d2:	e032      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ea:	461a      	mov	r2, r3
 80028ec:	2320      	movs	r3, #32
 80028ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	4619      	mov	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f004 ff8a 	bl	8007810 <HAL_PCD_DataOutStageCallback>
 80028fc:	e01d      	b.n	800293a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d114      	bne.n	800292e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002926:	461a      	mov	r2, r3
 8002928:	2100      	movs	r1, #0
 800292a:	f002 ffdf 	bl	80058ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f004 ff6b 	bl	8007810 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	4f54300a 	.word	0x4f54300a
 8002948:	4f54310a 	.word	0x4f54310a

0800294c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	333c      	adds	r3, #60	; 0x3c
 8002964:	3304      	adds	r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d90e      	bls.n	80029a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002998:	461a      	mov	r2, r3
 800299a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f004 ff23 	bl	80077ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d90c      	bls.n	80029c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	f002 ff92 	bl	80058ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	4f54300a 	.word	0x4f54300a

080029d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
 80029e4:	4613      	mov	r3, r2
 80029e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80029f6:	883b      	ldrh	r3, [r7, #0]
 80029f8:	0419      	lsls	r1, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
 8002a04:	e028      	b.n	8002a58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4413      	add	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e00d      	b.n	8002a36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	3340      	adds	r3, #64	; 0x40
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3ec      	bcc.n	8002a1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a40:	883b      	ldrh	r3, [r7, #0]
 8002a42:	0418      	lsls	r0, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4302      	orrs	r2, r0
 8002a50:	3340      	adds	r3, #64	; 0x40
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e264      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d075      	beq.n	8002baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002abe:	4ba3      	ldr	r3, [pc, #652]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aca:	4ba0      	ldr	r3, [pc, #640]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d112      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4b9d      	ldr	r3, [pc, #628]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae2:	d10b      	bne.n	8002afc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	4b99      	ldr	r3, [pc, #612]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d05b      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x108>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d157      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e23f      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x74>
 8002b06:	4b91      	ldr	r3, [pc, #580]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a90      	ldr	r2, [pc, #576]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e01d      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x98>
 8002b1e:	4b8b      	ldr	r3, [pc, #556]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a8a      	ldr	r2, [pc, #552]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b88      	ldr	r3, [pc, #544]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a87      	ldr	r2, [pc, #540]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0xb0>
 8002b38:	4b84      	ldr	r3, [pc, #528]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b81      	ldr	r3, [pc, #516]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a80      	ldr	r2, [pc, #512]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d013      	beq.n	8002b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fd ffc4 	bl	8000ae4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fd ffc0 	bl	8000ae4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e204      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fd ffb0 	bl	8000ae4 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fd ffac 	bl	8000ae4 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1f0      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0xe8>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d063      	beq.n	8002c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b62      	ldr	r3, [pc, #392]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1c4      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b56      	ldr	r3, [pc, #344]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4952      	ldr	r1, [pc, #328]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_RCC_OscConfig+0x2b0>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fd ff65 	bl	8000ae4 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fd ff61 	bl	8000ae4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1a5      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4940      	ldr	r1, [pc, #256]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <HAL_RCC_OscConfig+0x2b0>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fd ff44 	bl	8000ae4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fd ff40 	bl	8000ae4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e184      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d030      	beq.n	8002cec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCC_OscConfig+0x2b4>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fd ff24 	bl	8000ae4 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fd ff20 	bl	8000ae4 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e164      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x200>
 8002cbe:	e015      	b.n	8002cec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x2b4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fd ff0d 	bl	8000ae4 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fd ff09 	bl	8000ae4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e14d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80a0 	beq.w	8002e3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_OscConfig+0x2b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d121      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x2b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a07      	ldr	r2, [pc, #28]	; (8002d58 <HAL_RCC_OscConfig+0x2b8>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d42:	f7fd fecf 	bl	8000ae4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	e011      	b.n	8002d6e <HAL_RCC_OscConfig+0x2ce>
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470000 	.word	0x42470000
 8002d54:	42470e80 	.word	0x42470e80
 8002d58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d5c:	f7fd fec2 	bl	8000ae4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e106      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <HAL_RCC_OscConfig+0x4e4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d106      	bne.n	8002d90 <HAL_RCC_OscConfig+0x2f0>
 8002d82:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	e01c      	b.n	8002dca <HAL_RCC_OscConfig+0x32a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x312>
 8002d98:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a7a      	ldr	r2, [pc, #488]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b78      	ldr	r3, [pc, #480]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a77      	ldr	r2, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	e00b      	b.n	8002dca <HAL_RCC_OscConfig+0x32a>
 8002db2:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db6:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbe:	4b72      	ldr	r3, [pc, #456]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a71      	ldr	r2, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd2:	f7fd fe87 	bl	8000ae4 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	e00a      	b.n	8002df0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dda:	f7fd fe83 	bl	8000ae4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0c5      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <HAL_RCC_OscConfig+0x33a>
 8002dfc:	e014      	b.n	8002e28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfe:	f7fd fe71 	bl	8000ae4 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fd fe6d 	bl	8000ae4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e0af      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ee      	bne.n	8002e06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d105      	bne.n	8002e3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 809b 	beq.w	8002f7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d05c      	beq.n	8002f0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d141      	bne.n	8002edc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCC_OscConfig+0x4ec>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fd fe41 	bl	8000ae4 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fd fe3d 	bl	8000ae4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e081      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e78:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1f0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	019b      	lsls	r3, r3, #6
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
 8002ea8:	4937      	ldr	r1, [pc, #220]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_OscConfig+0x4ec>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fe16 	bl	8000ae4 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fd fe12 	bl	8000ae4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e056      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x41c>
 8002eda:	e04e      	b.n	8002f7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_OscConfig+0x4ec>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fd fdff 	bl	8000ae4 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fd fdfb 	bl	8000ae4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e03f      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x44a>
 8002f08:	e037      	b.n	8002f7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e032      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_RCC_OscConfig+0x4e8>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d028      	beq.n	8002f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d121      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d11a      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f46:	4013      	ands	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d111      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40007000 	.word	0x40007000
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	42470060 	.word	0x42470060

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0cc      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d119      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e067      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4934      	ldr	r1, [pc, #208]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fd fd30 	bl	8000ae4 <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fd fd2c 	bl	8000ae4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d20c      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fc90 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	08007e10 	.word	0x08007e10
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	2300      	movs	r3, #0
 800316e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d00d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x40>
 8003180:	2b08      	cmp	r3, #8
 8003182:	f200 80bd 	bhi.w	8003300 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 800318a:	2b04      	cmp	r3, #4
 800318c:	d003      	beq.n	8003196 <HAL_RCC_GetSysClockFreq+0x3a>
 800318e:	e0b7      	b.n	8003300 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003192:	60bb      	str	r3, [r7, #8]
       break;
 8003194:	e0b7      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003196:	4b61      	ldr	r3, [pc, #388]	; (800331c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003198:	60bb      	str	r3, [r7, #8]
      break;
 800319a:	e0b4      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a6:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04d      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b2:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	461a      	mov	r2, r3
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	ea02 0800 	and.w	r8, r2, r0
 80031ca:	ea03 0901 	and.w	r9, r3, r1
 80031ce:	4640      	mov	r0, r8
 80031d0:	4649      	mov	r1, r9
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	014b      	lsls	r3, r1, #5
 80031dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031e0:	0142      	lsls	r2, r0, #5
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	ebb0 0008 	subs.w	r0, r0, r8
 80031ea:	eb61 0109 	sbc.w	r1, r1, r9
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	018b      	lsls	r3, r1, #6
 80031f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031fc:	0182      	lsls	r2, r0, #6
 80031fe:	1a12      	subs	r2, r2, r0
 8003200:	eb63 0301 	sbc.w	r3, r3, r1
 8003204:	f04f 0000 	mov.w	r0, #0
 8003208:	f04f 0100 	mov.w	r1, #0
 800320c:	00d9      	lsls	r1, r3, #3
 800320e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003212:	00d0      	lsls	r0, r2, #3
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	eb12 0208 	adds.w	r2, r2, r8
 800321c:	eb43 0309 	adc.w	r3, r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0259      	lsls	r1, r3, #9
 800322a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800322e:	0250      	lsls	r0, r2, #9
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	f7fc ffca 	bl	80001d8 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e04a      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	ea02 0400 	and.w	r4, r2, r0
 8003266:	ea03 0501 	and.w	r5, r3, r1
 800326a:	4620      	mov	r0, r4
 800326c:	4629      	mov	r1, r5
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	014b      	lsls	r3, r1, #5
 8003278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800327c:	0142      	lsls	r2, r0, #5
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	1b00      	subs	r0, r0, r4
 8003284:	eb61 0105 	sbc.w	r1, r1, r5
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	018b      	lsls	r3, r1, #6
 8003292:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003296:	0182      	lsls	r2, r0, #6
 8003298:	1a12      	subs	r2, r2, r0
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	f04f 0000 	mov.w	r0, #0
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	00d9      	lsls	r1, r3, #3
 80032a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ac:	00d0      	lsls	r0, r2, #3
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	1912      	adds	r2, r2, r4
 80032b4:	eb45 0303 	adc.w	r3, r5, r3
 80032b8:	f04f 0000 	mov.w	r0, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	0299      	lsls	r1, r3, #10
 80032c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032c6:	0290      	lsls	r0, r2, #10
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f7fc ff7e 	bl	80001d8 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	3301      	adds	r3, #1
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	60bb      	str	r3, [r7, #8]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003302:	60bb      	str	r3, [r7, #8]
      break;
 8003304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003306:	68bb      	ldr	r3, [r7, #8]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	00f42400 	.word	0x00f42400
 800331c:	007a1200 	.word	0x007a1200

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_GetHCLKFreq+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000000 	.word	0x20000000

08003338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800333c:	f7ff fff0 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003340:	4602      	mov	r2, r0
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	4903      	ldr	r1, [pc, #12]	; (800335c <HAL_RCC_GetPCLK1Freq+0x24>)
 800334e:	5ccb      	ldrb	r3, [r1, r3]
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40023800 	.word	0x40023800
 800335c:	08007e20 	.word	0x08007e20

08003360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003364:	f7ff ffdc 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0b5b      	lsrs	r3, r3, #13
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	; (8003384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	08007e20 	.word	0x08007e20

08003388 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e03f      	b.n	800341a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7fd fa22 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2224      	movs	r2, #36	; 0x24
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fddb 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003400:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b08a      	sub	sp, #40	; 0x28
 8003426:	af02      	add	r7, sp, #8
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	d17c      	bne.n	800353c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Transmit+0x2c>
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e075      	b.n	800353e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_UART_Transmit+0x3e>
 800345c:	2302      	movs	r3, #2
 800345e:	e06e      	b.n	800353e <HAL_UART_Transmit+0x11c>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003476:	f7fd fb35 	bl	8000ae4 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003490:	d108      	bne.n	80034a4 <HAL_UART_Transmit+0x82>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e003      	b.n	80034ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b4:	e02a      	b.n	800350c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2180      	movs	r1, #128	; 0x80
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fb1f 	bl	8003b04 <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e036      	b.n	800353e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10b      	bne.n	80034ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	3302      	adds	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
 80034ec:	e007      	b.n	80034fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3301      	adds	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1cf      	bne.n	80034b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 faef 	bl	8003b04 <UART_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b084      	sub	sp, #16
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	4613      	mov	r3, r2
 8003552:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b20      	cmp	r3, #32
 800355e:	d11d      	bne.n	800359c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_UART_Receive_IT+0x26>
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e016      	b.n	800359e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_UART_Receive_IT+0x38>
 800357a:	2302      	movs	r3, #2
 800357c:	e00f      	b.n	800359e <HAL_UART_Receive_IT+0x58>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	461a      	mov	r2, r3
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fb24 	bl	8003be0 <UART_Start_Receive_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	e000      	b.n	800359e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b0ba      	sub	sp, #232	; 0xe8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_UART_IRQHandler+0x66>
 80035fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fc03 	bl	8003e12 <UART_Receive_IT>
      return;
 800360c:	e256      	b.n	8003abc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800360e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80de 	beq.w	80037d4 <HAL_UART_IRQHandler+0x22c>
 8003618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80d1 	beq.w	80037d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_UART_IRQHandler+0xae>
 800363e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0xd2>
 8003662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00b      	beq.n	800369e <HAL_UART_IRQHandler+0xf6>
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d011      	beq.n	80036ce <HAL_UART_IRQHandler+0x126>
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f043 0208 	orr.w	r2, r3, #8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 81ed 	beq.w	8003ab2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_UART_IRQHandler+0x14e>
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fb8e 	bl	8003e12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <HAL_UART_IRQHandler+0x17a>
 800371a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04f      	beq.n	80037c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fa96 	bl	8003c54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d141      	bne.n	80037ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800374c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800376e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800377a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1d9      	bne.n	8003736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	2b00      	cmp	r3, #0
 8003788:	d013      	beq.n	80037b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	4a7d      	ldr	r2, [pc, #500]	; (8003984 <HAL_UART_IRQHandler+0x3dc>)
 8003790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fc04 	bl	8000fa4 <HAL_DMA_Abort_IT>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ac:	4610      	mov	r0, r2
 80037ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	e00e      	b.n	80037d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f990 	bl	8003ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	e00a      	b.n	80037d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f98c 	bl	8003ad8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c0:	e006      	b.n	80037d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f988 	bl	8003ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037ce:	e170      	b.n	8003ab2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	bf00      	nop
    return;
 80037d2:	e16e      	b.n	8003ab2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	2b01      	cmp	r3, #1
 80037da:	f040 814a 	bne.w	8003a72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8143 	beq.w	8003a72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 813c 	beq.w	8003a72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	f040 80b4 	bne.w	8003988 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800382c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8140 	beq.w	8003ab6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800383a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383e:	429a      	cmp	r2, r3
 8003840:	f080 8139 	bcs.w	8003ab6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800384a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003856:	f000 8088 	beq.w	800396a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800388a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800389e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d9      	bne.n	800385a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3314      	adds	r3, #20
 80038c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e1      	bne.n	80038a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3314      	adds	r3, #20
 8003902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800390c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393a:	f023 0310 	bic.w	r3, r3, #16
 800393e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800394c:	65ba      	str	r2, [r7, #88]	; 0x58
 800394e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e3      	bne.n	8003928 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4618      	mov	r0, r3
 8003966:	f7fd faad 	bl	8000ec4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003972:	b29b      	uxth	r3, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8b6 	bl	8003aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003980:	e099      	b.n	8003ab6 <HAL_UART_IRQHandler+0x50e>
 8003982:	bf00      	nop
 8003984:	08003d1b 	.word	0x08003d1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003990:	b29b      	uxth	r3, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 808b 	beq.w	8003aba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8086 	beq.w	8003aba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	330c      	adds	r3, #12
 80039ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039d2:	647a      	str	r2, [r7, #68]	; 0x44
 80039d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1e3      	bne.n	80039ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	623b      	str	r3, [r7, #32]
   return(result);
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3314      	adds	r3, #20
 8003a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e3      	bne.n	80039e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a50:	61fa      	str	r2, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e3      	bne.n	8003a2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f83e 	bl	8003aec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a70:	e023      	b.n	8003aba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_UART_IRQHandler+0x4ea>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f959 	bl	8003d42 <UART_Transmit_IT>
    return;
 8003a90:	e014      	b.n	8003abc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <HAL_UART_IRQHandler+0x514>
 8003a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f999 	bl	8003de2 <UART_EndTransmit_IT>
    return;
 8003ab0:	e004      	b.n	8003abc <HAL_UART_IRQHandler+0x514>
    return;
 8003ab2:	bf00      	nop
 8003ab4:	e002      	b.n	8003abc <HAL_UART_IRQHandler+0x514>
      return;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_UART_IRQHandler+0x514>
      return;
 8003aba:	bf00      	nop
  }
}
 8003abc:	37e8      	adds	r7, #232	; 0xe8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop

08003ac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b090      	sub	sp, #64	; 0x40
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b14:	e050      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d04c      	beq.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b24:	f7fc ffde 	bl	8000ae4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d241      	bcs.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	330c      	adds	r3, #12
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	330c      	adds	r3, #12
 8003b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b54:	637a      	str	r2, [r7, #52]	; 0x34
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3314      	adds	r3, #20
 8003b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	613b      	str	r3, [r7, #16]
   return(result);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3314      	adds	r3, #20
 8003b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b88:	623a      	str	r2, [r7, #32]
 8003b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	69f9      	ldr	r1, [r7, #28]
 8003b8e:	6a3a      	ldr	r2, [r7, #32]
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e00f      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d09f      	beq.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3740      	adds	r7, #64	; 0x40
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2222      	movs	r2, #34	; 0x22
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c24:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b095      	sub	sp, #84	; 0x54
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c7c:	643a      	str	r2, [r7, #64]	; 0x40
 8003c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3314      	adds	r3, #20
 8003cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e5      	bne.n	8003c90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d119      	bne.n	8003d00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	330c      	adds	r3, #12
 8003cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cec:	61ba      	str	r2, [r7, #24]
 8003cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e5      	bne.n	8003ccc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d0e:	bf00      	nop
 8003d10:	3754      	adds	r7, #84	; 0x54
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff fecf 	bl	8003ad8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b21      	cmp	r3, #33	; 0x21
 8003d54:	d13e      	bne.n	8003dd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d114      	bne.n	8003d8a <UART_Transmit_IT+0x48>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d110      	bne.n	8003d8a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	1c9a      	adds	r2, r3, #2
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]
 8003d88:	e008      	b.n	8003d9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6211      	str	r1, [r2, #32]
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4619      	mov	r1, r3
 8003daa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b082      	sub	sp, #8
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff fe5e 	bl	8003ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08c      	sub	sp, #48	; 0x30
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b22      	cmp	r3, #34	; 0x22
 8003e24:	f040 80ab 	bne.w	8003f7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e30:	d117      	bne.n	8003e62 <UART_Receive_IT+0x50>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	1c9a      	adds	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	e026      	b.n	8003eb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d007      	beq.n	8003e86 <UART_Receive_IT+0x74>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <UART_Receive_IT+0x82>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e008      	b.n	8003ea6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d15a      	bne.n	8003f7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0220 	bic.w	r2, r2, #32
 8003ed2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d135      	bne.n	8003f70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	330c      	adds	r3, #12
 8003f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	613b      	str	r3, [r7, #16]
   return(result);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2a:	623a      	str	r2, [r7, #32]
 8003f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	69f9      	ldr	r1, [r7, #28]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d10a      	bne.n	8003f62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff fdbf 	bl	8003aec <HAL_UARTEx_RxEventCallback>
 8003f6e:	e002      	b.n	8003f76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fc fac1 	bl	80004f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e002      	b.n	8003f80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b09f      	sub	sp, #124	; 0x7c
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	68d9      	ldr	r1, [r3, #12]
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	ea40 0301 	orr.w	r3, r0, r1
 8003fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fcc:	f021 010c 	bic.w	r1, r1, #12
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	6999      	ldr	r1, [r3, #24]
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	ea40 0301 	orr.w	r3, r0, r1
 8003ff0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4bc5      	ldr	r3, [pc, #788]	; (800430c <UART_SetConfig+0x384>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d004      	beq.n	8004006 <UART_SetConfig+0x7e>
 8003ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4bc3      	ldr	r3, [pc, #780]	; (8004310 <UART_SetConfig+0x388>)
 8004002:	429a      	cmp	r2, r3
 8004004:	d103      	bne.n	800400e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004006:	f7ff f9ab 	bl	8003360 <HAL_RCC_GetPCLK2Freq>
 800400a:	6778      	str	r0, [r7, #116]	; 0x74
 800400c:	e002      	b.n	8004014 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400e:	f7ff f993 	bl	8003338 <HAL_RCC_GetPCLK1Freq>
 8004012:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	f040 80b6 	bne.w	800418c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004022:	461c      	mov	r4, r3
 8004024:	f04f 0500 	mov.w	r5, #0
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	1891      	adds	r1, r2, r2
 800402e:	6439      	str	r1, [r7, #64]	; 0x40
 8004030:	415b      	adcs	r3, r3
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004038:	1912      	adds	r2, r2, r4
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800404c:	00d0      	lsls	r0, r2, #3
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	1911      	adds	r1, r2, r4
 8004054:	6639      	str	r1, [r7, #96]	; 0x60
 8004056:	416b      	adcs	r3, r5
 8004058:	667b      	str	r3, [r7, #100]	; 0x64
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	1891      	adds	r1, r2, r2
 8004066:	63b9      	str	r1, [r7, #56]	; 0x38
 8004068:	415b      	adcs	r3, r3
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004070:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004074:	f7fc f8b0 	bl	80001d8 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4ba5      	ldr	r3, [pc, #660]	; (8004314 <UART_SetConfig+0x38c>)
 800407e:	fba3 2302 	umull	r2, r3, r3, r2
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	011e      	lsls	r6, r3, #4
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	461c      	mov	r4, r3
 800408a:	f04f 0500 	mov.w	r5, #0
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	1891      	adds	r1, r2, r2
 8004094:	6339      	str	r1, [r7, #48]	; 0x30
 8004096:	415b      	adcs	r3, r3
 8004098:	637b      	str	r3, [r7, #52]	; 0x34
 800409a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800409e:	1912      	adds	r2, r2, r4
 80040a0:	eb45 0303 	adc.w	r3, r5, r3
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	00d9      	lsls	r1, r3, #3
 80040ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b2:	00d0      	lsls	r0, r2, #3
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	1911      	adds	r1, r2, r4
 80040ba:	65b9      	str	r1, [r7, #88]	; 0x58
 80040bc:	416b      	adcs	r3, r5
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	461a      	mov	r2, r3
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	1891      	adds	r1, r2, r2
 80040cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80040ce:	415b      	adcs	r3, r3
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040d6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040da:	f7fc f87d 	bl	80001d8 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4b8c      	ldr	r3, [pc, #560]	; (8004314 <UART_SetConfig+0x38c>)
 80040e4:	fba3 1302 	umull	r1, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	2164      	movs	r1, #100	; 0x64
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	3332      	adds	r3, #50	; 0x32
 80040f6:	4a87      	ldr	r2, [pc, #540]	; (8004314 <UART_SetConfig+0x38c>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004104:	441e      	add	r6, r3
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	4618      	mov	r0, r3
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	1894      	adds	r4, r2, r2
 8004114:	623c      	str	r4, [r7, #32]
 8004116:	415b      	adcs	r3, r3
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800411e:	1812      	adds	r2, r2, r0
 8004120:	eb41 0303 	adc.w	r3, r1, r3
 8004124:	f04f 0400 	mov.w	r4, #0
 8004128:	f04f 0500 	mov.w	r5, #0
 800412c:	00dd      	lsls	r5, r3, #3
 800412e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004132:	00d4      	lsls	r4, r2, #3
 8004134:	4622      	mov	r2, r4
 8004136:	462b      	mov	r3, r5
 8004138:	1814      	adds	r4, r2, r0
 800413a:	653c      	str	r4, [r7, #80]	; 0x50
 800413c:	414b      	adcs	r3, r1
 800413e:	657b      	str	r3, [r7, #84]	; 0x54
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	461a      	mov	r2, r3
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	1891      	adds	r1, r2, r2
 800414c:	61b9      	str	r1, [r7, #24]
 800414e:	415b      	adcs	r3, r3
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004156:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800415a:	f7fc f83d 	bl	80001d8 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b6c      	ldr	r3, [pc, #432]	; (8004314 <UART_SetConfig+0x38c>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a67      	ldr	r2, [pc, #412]	; (8004314 <UART_SetConfig+0x38c>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 0207 	and.w	r2, r3, #7
 8004182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4432      	add	r2, r6
 8004188:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800418a:	e0b9      	b.n	8004300 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418e:	461c      	mov	r4, r3
 8004190:	f04f 0500 	mov.w	r5, #0
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	1891      	adds	r1, r2, r2
 800419a:	6139      	str	r1, [r7, #16]
 800419c:	415b      	adcs	r3, r3
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041a4:	1912      	adds	r2, r2, r4
 80041a6:	eb45 0303 	adc.w	r3, r5, r3
 80041aa:	f04f 0000 	mov.w	r0, #0
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	00d9      	lsls	r1, r3, #3
 80041b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041b8:	00d0      	lsls	r0, r2, #3
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	eb12 0804 	adds.w	r8, r2, r4
 80041c2:	eb43 0905 	adc.w	r9, r3, r5
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	008b      	lsls	r3, r1, #2
 80041da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041de:	0082      	lsls	r2, r0, #2
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	f7fb fff8 	bl	80001d8 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4b49      	ldr	r3, [pc, #292]	; (8004314 <UART_SetConfig+0x38c>)
 80041ee:	fba3 2302 	umull	r2, r3, r3, r2
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	011e      	lsls	r6, r3, #4
 80041f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f8:	4618      	mov	r0, r3
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	1894      	adds	r4, r2, r2
 8004204:	60bc      	str	r4, [r7, #8]
 8004206:	415b      	adcs	r3, r3
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420e:	1812      	adds	r2, r2, r0
 8004210:	eb41 0303 	adc.w	r3, r1, r3
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	f04f 0500 	mov.w	r5, #0
 800421c:	00dd      	lsls	r5, r3, #3
 800421e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004222:	00d4      	lsls	r4, r2, #3
 8004224:	4622      	mov	r2, r4
 8004226:	462b      	mov	r3, r5
 8004228:	1814      	adds	r4, r2, r0
 800422a:	64bc      	str	r4, [r7, #72]	; 0x48
 800422c:	414b      	adcs	r3, r1
 800422e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4618      	mov	r0, r3
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	008b      	lsls	r3, r1, #2
 8004244:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004248:	0082      	lsls	r2, r0, #2
 800424a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800424e:	f7fb ffc3 	bl	80001d8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4b2f      	ldr	r3, [pc, #188]	; (8004314 <UART_SetConfig+0x38c>)
 8004258:	fba3 1302 	umull	r1, r3, r3, r2
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	2164      	movs	r1, #100	; 0x64
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	3332      	adds	r3, #50	; 0x32
 800426a:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <UART_SetConfig+0x38c>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004276:	441e      	add	r6, r3
 8004278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800427a:	4618      	mov	r0, r3
 800427c:	f04f 0100 	mov.w	r1, #0
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	1894      	adds	r4, r2, r2
 8004286:	603c      	str	r4, [r7, #0]
 8004288:	415b      	adcs	r3, r3
 800428a:	607b      	str	r3, [r7, #4]
 800428c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004290:	1812      	adds	r2, r2, r0
 8004292:	eb41 0303 	adc.w	r3, r1, r3
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	f04f 0500 	mov.w	r5, #0
 800429e:	00dd      	lsls	r5, r3, #3
 80042a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042a4:	00d4      	lsls	r4, r2, #3
 80042a6:	4622      	mov	r2, r4
 80042a8:	462b      	mov	r3, r5
 80042aa:	eb12 0a00 	adds.w	sl, r2, r0
 80042ae:	eb43 0b01 	adc.w	fp, r3, r1
 80042b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	008b      	lsls	r3, r1, #2
 80042c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042ca:	0082      	lsls	r2, r0, #2
 80042cc:	4650      	mov	r0, sl
 80042ce:	4659      	mov	r1, fp
 80042d0:	f7fb ff82 	bl	80001d8 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <UART_SetConfig+0x38c>)
 80042da:	fba3 1302 	umull	r1, r3, r3, r2
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	2164      	movs	r1, #100	; 0x64
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	3332      	adds	r3, #50	; 0x32
 80042ec:	4a09      	ldr	r2, [pc, #36]	; (8004314 <UART_SetConfig+0x38c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	f003 020f 	and.w	r2, r3, #15
 80042f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4432      	add	r2, r6
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	377c      	adds	r7, #124	; 0x7c
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800430a:	bf00      	nop
 800430c:	40011000 	.word	0x40011000
 8004310:	40011400 	.word	0x40011400
 8004314:	51eb851f 	.word	0x51eb851f

08004318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004318:	b084      	sub	sp, #16
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	f107 001c 	add.w	r0, r7, #28
 8004326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2b01      	cmp	r3, #1
 800432e:	d122      	bne.n	8004376 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 fb1c 	bl	80059a8 <USB_CoreReset>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e01a      	b.n	80043ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f001 fb10 	bl	80059a8 <USB_CoreReset>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004396:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
 800439e:	e005      	b.n	80043ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d10b      	bne.n	80043ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f043 0206 	orr.w	r2, r3, #6
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043d6:	b004      	add	sp, #16
 80043d8:	4770      	bx	lr
	...

080043dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	4613      	mov	r3, r2
 80043e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d165      	bne.n	80044bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a41      	ldr	r2, [pc, #260]	; (80044f8 <USB_SetTurnaroundTime+0x11c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d906      	bls.n	8004406 <USB_SetTurnaroundTime+0x2a>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a40      	ldr	r2, [pc, #256]	; (80044fc <USB_SetTurnaroundTime+0x120>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d202      	bcs.n	8004406 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004400:	230f      	movs	r3, #15
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	e062      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4a3c      	ldr	r2, [pc, #240]	; (80044fc <USB_SetTurnaroundTime+0x120>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d306      	bcc.n	800441c <USB_SetTurnaroundTime+0x40>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4a3b      	ldr	r2, [pc, #236]	; (8004500 <USB_SetTurnaroundTime+0x124>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d202      	bcs.n	800441c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004416:	230e      	movs	r3, #14
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e057      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4a38      	ldr	r2, [pc, #224]	; (8004500 <USB_SetTurnaroundTime+0x124>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d306      	bcc.n	8004432 <USB_SetTurnaroundTime+0x56>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4a37      	ldr	r2, [pc, #220]	; (8004504 <USB_SetTurnaroundTime+0x128>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d202      	bcs.n	8004432 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800442c:	230d      	movs	r3, #13
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e04c      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <USB_SetTurnaroundTime+0x128>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d306      	bcc.n	8004448 <USB_SetTurnaroundTime+0x6c>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4a32      	ldr	r2, [pc, #200]	; (8004508 <USB_SetTurnaroundTime+0x12c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d802      	bhi.n	8004448 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004442:	230c      	movs	r3, #12
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	e041      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <USB_SetTurnaroundTime+0x12c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d906      	bls.n	800445e <USB_SetTurnaroundTime+0x82>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a2e      	ldr	r2, [pc, #184]	; (800450c <USB_SetTurnaroundTime+0x130>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d802      	bhi.n	800445e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004458:	230b      	movs	r3, #11
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e036      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <USB_SetTurnaroundTime+0x130>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d906      	bls.n	8004474 <USB_SetTurnaroundTime+0x98>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4a29      	ldr	r2, [pc, #164]	; (8004510 <USB_SetTurnaroundTime+0x134>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d802      	bhi.n	8004474 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800446e:	230a      	movs	r3, #10
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	e02b      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4a26      	ldr	r2, [pc, #152]	; (8004510 <USB_SetTurnaroundTime+0x134>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d906      	bls.n	800448a <USB_SetTurnaroundTime+0xae>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4a25      	ldr	r2, [pc, #148]	; (8004514 <USB_SetTurnaroundTime+0x138>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d202      	bcs.n	800448a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004484:	2309      	movs	r3, #9
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e020      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <USB_SetTurnaroundTime+0x138>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d306      	bcc.n	80044a0 <USB_SetTurnaroundTime+0xc4>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4a20      	ldr	r2, [pc, #128]	; (8004518 <USB_SetTurnaroundTime+0x13c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d802      	bhi.n	80044a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800449a:	2308      	movs	r3, #8
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e015      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <USB_SetTurnaroundTime+0x13c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d906      	bls.n	80044b6 <USB_SetTurnaroundTime+0xda>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <USB_SetTurnaroundTime+0x140>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d202      	bcs.n	80044b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044b0:	2307      	movs	r3, #7
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e00a      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044b6:	2306      	movs	r3, #6
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e007      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044c2:	2309      	movs	r3, #9
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e001      	b.n	80044cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044c8:	2309      	movs	r3, #9
 80044ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	00d8acbf 	.word	0x00d8acbf
 80044fc:	00e4e1c0 	.word	0x00e4e1c0
 8004500:	00f42400 	.word	0x00f42400
 8004504:	01067380 	.word	0x01067380
 8004508:	011a499f 	.word	0x011a499f
 800450c:	01312cff 	.word	0x01312cff
 8004510:	014ca43f 	.word	0x014ca43f
 8004514:	016e3600 	.word	0x016e3600
 8004518:	01a6ab1f 	.word	0x01a6ab1f
 800451c:	01e84800 	.word	0x01e84800

08004520 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d115      	bne.n	80045b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004592:	2001      	movs	r0, #1
 8004594:	f7fc fab2 	bl	8000afc <HAL_Delay>
      ms++;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 f972 	bl	8005888 <USB_GetMode>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d01e      	beq.n	80045e8 <USB_SetCurrentMode+0x84>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b31      	cmp	r3, #49	; 0x31
 80045ae:	d9f0      	bls.n	8004592 <USB_SetCurrentMode+0x2e>
 80045b0:	e01a      	b.n	80045e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d115      	bne.n	80045e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045c4:	2001      	movs	r0, #1
 80045c6:	f7fc fa99 	bl	8000afc <HAL_Delay>
      ms++;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f001 f959 	bl	8005888 <USB_GetMode>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <USB_SetCurrentMode+0x84>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b31      	cmp	r3, #49	; 0x31
 80045e0:	d9f0      	bls.n	80045c4 <USB_SetCurrentMode+0x60>
 80045e2:	e001      	b.n	80045e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e005      	b.n	80045f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b32      	cmp	r3, #50	; 0x32
 80045ec:	d101      	bne.n	80045f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045fc:	b084      	sub	sp, #16
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800460a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e009      	b.n	8004630 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	3340      	adds	r3, #64	; 0x40
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3301      	adds	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b0e      	cmp	r3, #14
 8004634:	d9f2      	bls.n	800461c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11c      	bne.n	8004676 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
 8004674:	e00b      	b.n	800468e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a0:	4619      	mov	r1, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a8:	461a      	mov	r2, r3
 80046aa:	680b      	ldr	r3, [r1, #0]
 80046ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d10c      	bne.n	80046ce <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d104      	bne.n	80046c4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ba:	2100      	movs	r1, #0
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f945 	bl	800494c <USB_SetDevSpeed>
 80046c2:	e008      	b.n	80046d6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046c4:	2101      	movs	r1, #1
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f940 	bl	800494c <USB_SetDevSpeed>
 80046cc:	e003      	b.n	80046d6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ce:	2103      	movs	r1, #3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f93b 	bl	800494c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046d6:	2110      	movs	r1, #16
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8f3 	bl	80048c4 <USB_FlushTxFifo>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f90f 	bl	800490c <USB_FlushRxFifo>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	e043      	b.n	80047aa <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004738:	d118      	bne.n	800476c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	461a      	mov	r2, r3
 800474e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e013      	b.n	800477e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	461a      	mov	r2, r3
 8004764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e008      	b.n	800477e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	2300      	movs	r3, #0
 800477c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	461a      	mov	r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	461a      	mov	r2, r3
 800479e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	3301      	adds	r3, #1
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d3b7      	bcc.n	8004722 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e043      	b.n	8004840 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ce:	d118      	bne.n	8004802 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e013      	b.n	8004814 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	e008      	b.n	8004814 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004838:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3301      	adds	r3, #1
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d3b7      	bcc.n	80047b8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004868:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f043 0210 	orr.w	r2, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <USB_DevInit+0x2c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f043 0208 	orr.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048bc:	b004      	add	sp, #16
 80048be:	4770      	bx	lr
 80048c0:	803c3800 	.word	0x803c3800

080048c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <USB_FlushTxFifo+0x44>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d901      	bls.n	80048ee <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e006      	b.n	80048fc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d0f1      	beq.n	80048de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2210      	movs	r2, #16
 800491c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <USB_FlushRxFifo+0x3c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e006      	b.n	800493c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b10      	cmp	r3, #16
 8004938:	d0f1      	beq.n	800491e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	00030d40 	.word	0x00030d40

0800494c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800497e:	b480      	push	{r7}
 8004980:	b087      	sub	sp, #28
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800499e:	2300      	movs	r3, #0
 80049a0:	75fb      	strb	r3, [r7, #23]
 80049a2:	e00a      	b.n	80049ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d002      	beq.n	80049b0 <USB_GetDevSpeed+0x32>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d102      	bne.n	80049b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049b0:	2302      	movs	r3, #2
 80049b2:	75fb      	strb	r3, [r7, #23]
 80049b4:	e001      	b.n	80049ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049b6:	230f      	movs	r3, #15
 80049b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d13a      	bne.n	8004a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f303 	lsl.w	r3, r1, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	68f9      	ldr	r1, [r7, #12]
 80049fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d155      	bne.n	8004ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	78db      	ldrb	r3, [r3, #3]
 8004a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	059b      	lsls	r3, r3, #22
 8004a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a40:	4313      	orrs	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e036      	b.n	8004ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11a      	bne.n	8004ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d161      	bne.n	8004bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b0a:	d11f      	bne.n	8004b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	2101      	movs	r1, #1
 8004b82:	fa01 f303 	lsl.w	r3, r1, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b90:	4013      	ands	r3, r2
 8004b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	0159      	lsls	r1, r3, #5
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	440b      	add	r3, r1
 8004baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4b35      	ldr	r3, [pc, #212]	; (8004c88 <USB_DeactivateEndpoint+0x1b0>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
 8004bb6:	e060      	b.n	8004c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bce:	d11f      	bne.n	8004c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c30:	4013      	ands	r3, r2
 8004c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	69da      	ldr	r2, [r3, #28]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	2101      	movs	r1, #1
 8004c46:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	68f9      	ldr	r1, [r7, #12]
 8004c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c54:	4013      	ands	r3, r2
 8004c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	0159      	lsls	r1, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	440b      	add	r3, r1
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	4619      	mov	r1, r3
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <USB_DeactivateEndpoint+0x1b4>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	ec337800 	.word	0xec337800
 8004c8c:	eff37800 	.word	0xeff37800

08004c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	785b      	ldrb	r3, [r3, #1]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	f040 815c 	bne.w	8004f6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d132      	bne.n	8004d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	0cdb      	lsrs	r3, r3, #19
 8004d1a:	04db      	lsls	r3, r3, #19
 8004d1c:	6113      	str	r3, [r2, #16]
 8004d1e:	e074      	b.n	8004e0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3a:	0cdb      	lsrs	r3, r3, #19
 8004d3c:	04db      	lsls	r3, r3, #19
 8004d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6959      	ldr	r1, [r3, #20]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	440b      	add	r3, r1
 8004d7c:	1e59      	subs	r1, r3, #1
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d86:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d88:	4b9d      	ldr	r3, [pc, #628]	; (8005000 <USB_EPStartXfer+0x370>)
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	0148      	lsls	r0, r1, #5
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	4401      	add	r1, r0
 8004d94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db2:	69b9      	ldr	r1, [r7, #24]
 8004db4:	0148      	lsls	r0, r1, #5
 8004db6:	69f9      	ldr	r1, [r7, #28]
 8004db8:	4401      	add	r1, r0
 8004dba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	78db      	ldrb	r3, [r3, #3]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d11f      	bne.n	8004e0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004de8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	0151      	lsls	r1, r2, #5
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	440a      	add	r2, r1
 8004e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d14b      	bne.n	8004ea8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	78db      	ldrb	r3, [r3, #3]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d128      	bne.n	8004e86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d110      	bne.n	8004e66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	e00f      	b.n	8004e86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e12f      	b.n	8005108 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ec6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	78db      	ldrb	r3, [r3, #3]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d015      	beq.n	8004efc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8117 	beq.w	8005108 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	2101      	movs	r1, #1
 8004eec:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	634b      	str	r3, [r1, #52]	; 0x34
 8004efa:	e105      	b.n	8005108 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d110      	bne.n	8004f2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	e00f      	b.n	8004f4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	0151      	lsls	r1, r2, #5
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	440a      	add	r2, r1
 8004f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	68d9      	ldr	r1, [r3, #12]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	b298      	uxth	r0, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	4603      	mov	r3, r0
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fa2b 	bl	80053be <USB_WritePacket>
 8004f68:	e0ce      	b.n	8005108 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f84:	0cdb      	lsrs	r3, r3, #19
 8004f86:	04db      	lsls	r3, r3, #19
 8004f88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d126      	bne.n	8005004 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ffa:	6113      	str	r3, [r2, #16]
 8004ffc:	e036      	b.n	800506c <USB_EPStartXfer+0x3dc>
 8004ffe:	bf00      	nop
 8005000:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4413      	add	r3, r2
 800500e:	1e5a      	subs	r2, r3, #1
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	8afb      	ldrh	r3, [r7, #22]
 800502a:	04d9      	lsls	r1, r3, #19
 800502c:	4b39      	ldr	r3, [pc, #228]	; (8005114 <USB_EPStartXfer+0x484>)
 800502e:	400b      	ands	r3, r1
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	0148      	lsls	r0, r1, #5
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	4401      	add	r1, r0
 8005038:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	8af9      	ldrh	r1, [r7, #22]
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	0148      	lsls	r0, r1, #5
 8005060:	69f9      	ldr	r1, [r7, #28]
 8005062:	4401      	add	r1, r0
 8005064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005068:	4313      	orrs	r3, r2
 800506a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d10d      	bne.n	800508e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	68d9      	ldr	r1, [r3, #12]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	460a      	mov	r2, r1
 800508c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	78db      	ldrb	r3, [r3, #3]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d128      	bne.n	80050e8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d110      	bne.n	80050c8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	e00f      	b.n	80050e8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005102:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	1ff80000 	.word	0x1ff80000

08005118 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	4613      	mov	r3, r2
 8005124:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b01      	cmp	r3, #1
 8005136:	f040 80cd 	bne.w	80052d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d132      	bne.n	80051a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800515c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005164:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	440a      	add	r2, r1
 800519c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a0:	0cdb      	lsrs	r3, r3, #19
 80051a2:	04db      	lsls	r3, r3, #19
 80051a4:	6113      	str	r3, [r2, #16]
 80051a6:	e04e      	b.n	8005246 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c2:	0cdb      	lsrs	r3, r3, #19
 80051c4:	04db      	lsls	r3, r3, #19
 80051c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d903      	bls.n	8005200 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800521e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005236:	6939      	ldr	r1, [r7, #16]
 8005238:	0148      	lsls	r0, r1, #5
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	4401      	add	r1, r0
 800523e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005242:	4313      	orrs	r3, r2
 8005244:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11e      	bne.n	800528a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	461a      	mov	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e092      	b.n	80053b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d07e      	beq.n	80053b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	2101      	movs	r1, #1
 80052c4:	fa01 f303 	lsl.w	r3, r1, r3
 80052c8:	6979      	ldr	r1, [r7, #20]
 80052ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ce:	4313      	orrs	r3, r2
 80052d0:	634b      	str	r3, [r1, #52]	; 0x34
 80052d2:	e06d      	b.n	80053b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ee:	0cdb      	lsrs	r3, r3, #19
 80052f0:	04db      	lsls	r3, r3, #19
 80052f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005316:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005346:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	0148      	lsls	r0, r1, #5
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	4401      	add	r1, r0
 8005366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d10d      	bne.n	8005390 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	68d9      	ldr	r1, [r3, #12]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	460a      	mov	r2, r1
 800538e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	371c      	adds	r7, #28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053be:	b480      	push	{r7}
 80053c0:	b089      	sub	sp, #36	; 0x24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	4611      	mov	r1, r2
 80053ca:	461a      	mov	r2, r3
 80053cc:	460b      	mov	r3, r1
 80053ce:	71fb      	strb	r3, [r7, #7]
 80053d0:	4613      	mov	r3, r2
 80053d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d123      	bne.n	800542c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053e4:	88bb      	ldrh	r3, [r7, #4]
 80053e6:	3303      	adds	r3, #3
 80053e8:	089b      	lsrs	r3, r3, #2
 80053ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	e018      	b.n	8005424 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	031a      	lsls	r2, r3, #12
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fe:	461a      	mov	r2, r3
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3301      	adds	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	3301      	adds	r3, #1
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	429a      	cmp	r2, r3
 800542a:	d3e2      	bcc.n	80053f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3724      	adds	r7, #36	; 0x24
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800543a:	b480      	push	{r7}
 800543c:	b08b      	sub	sp, #44	; 0x2c
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	b29b      	uxth	r3, r3
 8005456:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	623b      	str	r3, [r7, #32]
 8005464:	e014      	b.n	8005490 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	601a      	str	r2, [r3, #0]
    pDest++;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	3301      	adds	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	3301      	adds	r3, #1
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	3301      	adds	r3, #1
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	3301      	adds	r3, #1
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	6a3a      	ldr	r2, [r7, #32]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	429a      	cmp	r2, r3
 8005496:	d3e6      	bcc.n	8005466 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005498:	8bfb      	ldrh	r3, [r7, #30]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01e      	beq.n	80054dc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a8:	461a      	mov	r2, r3
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	701a      	strb	r2, [r3, #0]
      i++;
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	3301      	adds	r3, #1
 80054c8:	623b      	str	r3, [r7, #32]
      pDest++;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	3301      	adds	r3, #1
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054d0:	8bfb      	ldrh	r3, [r7, #30]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054d6:	8bfb      	ldrh	r3, [r7, #30]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1ea      	bne.n	80054b2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054de:	4618      	mov	r0, r3
 80054e0:	372c      	adds	r7, #44	; 0x2c
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d12c      	bne.n	8005560 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	db12      	blt.n	800553e <USB_EPSetStall+0x54>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00f      	beq.n	800553e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005538:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800553c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	e02b      	b.n	80055b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	db12      	blt.n	8005598 <USB_EPSetStall+0xae>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005592:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005596:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d128      	bne.n	8005634 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005600:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	78db      	ldrb	r3, [r3, #3]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d003      	beq.n	8005612 <USB_EPClearStall+0x4c>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d138      	bne.n	8005684 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e027      	b.n	8005684 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005652:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	78db      	ldrb	r3, [r3, #3]
 8005658:	2b03      	cmp	r3, #3
 800565a:	d003      	beq.n	8005664 <USB_EPClearStall+0x9e>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	78db      	ldrb	r3, [r3, #3]
 8005660:	2b02      	cmp	r3, #2
 8005662:	d10f      	bne.n	8005684 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	0151      	lsls	r1, r2, #5
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	440a      	add	r2, r1
 800567a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005682:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	460b      	mov	r3, r1
 800569c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570c:	f023 0302 	bic.w	r3, r3, #2
 8005710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4013      	ands	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	0c1b      	lsrs	r3, r3, #16
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4013      	ands	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	b29b      	uxth	r3, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800581e:	68bb      	ldr	r3, [r7, #8]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	01db      	lsls	r3, r3, #7
 800585e:	b2db      	uxtb	r3, r3
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800587a:	68bb      	ldr	r3, [r7, #8]
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0301 	and.w	r3, r3, #1
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	460b      	mov	r3, r1
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	333c      	adds	r3, #60	; 0x3c
 8005902:	3304      	adds	r3, #4
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <USB_EP0_OutStart+0xb8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d90a      	bls.n	8005926 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800591c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005920:	d101      	bne.n	8005926 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e037      	b.n	8005996 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	461a      	mov	r2, r3
 800592e:	2300      	movs	r3, #0
 8005930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f043 0318 	orr.w	r3, r3, #24
 8005958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800596c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800596e:	7afb      	ldrb	r3, [r7, #11]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10f      	bne.n	8005994 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	4f54300a 	.word	0x4f54300a

080059a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <USB_CoreReset+0x60>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e01a      	b.n	80059fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	daf3      	bge.n	80059b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f043 0201 	orr.w	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <USB_CoreReset+0x60>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d901      	bls.n	80059ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e006      	b.n	80059fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d0f1      	beq.n	80059dc <USB_CoreReset+0x34>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	00030d40 	.word	0x00030d40

08005a0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a1c:	f002 f958 	bl	8007cd0 <USBD_static_malloc>
 8005a20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d105      	bne.n	8005a34 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e066      	b.n	8005b02 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	7c1b      	ldrb	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d119      	bne.n	8005a78 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a48:	2202      	movs	r2, #2
 8005a4a:	2181      	movs	r1, #129	; 0x81
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f002 f81c 	bl	8007a8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	2101      	movs	r1, #1
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f002 f812 	bl	8007a8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2210      	movs	r2, #16
 8005a72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a76:	e016      	b.n	8005aa6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a78:	2340      	movs	r3, #64	; 0x40
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 f803 	bl	8007a8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	2101      	movs	r1, #1
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 fffa 	bl	8007a8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	2182      	movs	r1, #130	; 0x82
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 ffec 	bl	8007a8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	7c1b      	ldrb	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ae2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 f8bd 	bl	8007c68 <USBD_LL_PrepareReceive>
 8005aee:	e007      	b.n	8005b00 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	2101      	movs	r1, #1
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f002 f8b4 	bl	8007c68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b16:	2181      	movs	r1, #129	; 0x81
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 ffdc 	bl	8007ad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b24:	2101      	movs	r1, #1
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 ffd5 	bl	8007ad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b34:	2182      	movs	r1, #130	; 0x82
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 ffcd 	bl	8007ad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b66:	4618      	mov	r0, r3
 8005b68:	f002 f8c0 	bl	8007cec <USBD_static_free>
    pdev->pClassData = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e0af      	b.n	8005d08 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03f      	beq.n	8005c34 <USBD_CDC_Setup+0xb4>
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	f040 809f 	bne.w	8005cf8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	88db      	ldrh	r3, [r3, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02e      	beq.n	8005c20 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	b25b      	sxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da16      	bge.n	8005bfa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005bd8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	88d2      	ldrh	r2, [r2, #6]
 8005bde:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	88db      	ldrh	r3, [r3, #6]
 8005be4:	2b07      	cmp	r3, #7
 8005be6:	bf28      	it	cs
 8005be8:	2307      	movcs	r3, #7
 8005bea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	89fa      	ldrh	r2, [r7, #14]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fb19 	bl	800722a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005bf8:	e085      	b.n	8005d06 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	785a      	ldrb	r2, [r3, #1]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	88db      	ldrh	r3, [r3, #6]
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c10:	6939      	ldr	r1, [r7, #16]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	88db      	ldrh	r3, [r3, #6]
 8005c16:	461a      	mov	r2, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fb32 	bl	8007282 <USBD_CtlPrepareRx>
      break;
 8005c1e:	e072      	b.n	8005d06 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	7850      	ldrb	r0, [r2, #1]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	4798      	blx	r3
      break;
 8005c32:	e068      	b.n	8005d06 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b0b      	cmp	r3, #11
 8005c3a:	d852      	bhi.n	8005ce2 <USBD_CDC_Setup+0x162>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <USBD_CDC_Setup+0xc4>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005ce3 	.word	0x08005ce3
 8005c50:	08005ce3 	.word	0x08005ce3
 8005c54:	08005ce3 	.word	0x08005ce3
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005ce3 	.word	0x08005ce3
 8005c60:	08005ce3 	.word	0x08005ce3
 8005c64:	08005ce3 	.word	0x08005ce3
 8005c68:	08005ce3 	.word	0x08005ce3
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005cc9 	.word	0x08005cc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d107      	bne.n	8005c90 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c80:	f107 030a 	add.w	r3, r7, #10
 8005c84:	2202      	movs	r2, #2
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f001 face 	bl	800722a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c8e:	e032      	b.n	8005cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fa58 	bl	8007148 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c9c:	e02b      	b.n	8005cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d107      	bne.n	8005cba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005caa:	f107 030d 	add.w	r3, r7, #13
 8005cae:	2201      	movs	r2, #1
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fab9 	bl	800722a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb8:	e01d      	b.n	8005cf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 fa43 	bl	8007148 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc6:	e016      	b.n	8005cf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d00f      	beq.n	8005cf4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fa36 	bl	8007148 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ce0:	e008      	b.n	8005cf4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fa2f 	bl	8007148 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	75fb      	strb	r3, [r7, #23]
          break;
 8005cee:	e002      	b.n	8005cf6 <USBD_CDC_Setup+0x176>
          break;
 8005cf0:	bf00      	nop
 8005cf2:	e008      	b.n	8005d06 <USBD_CDC_Setup+0x186>
          break;
 8005cf4:	bf00      	nop
      }
      break;
 8005cf6:	e006      	b.n	8005d06 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fa24 	bl	8007148 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d00:	2303      	movs	r3, #3
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e04f      	b.n	8005dd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	3318      	adds	r3, #24
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d029      	beq.n	8005da4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d50:	78fa      	ldrb	r2, [r7, #3]
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	3318      	adds	r3, #24
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	78f9      	ldrb	r1, [r7, #3]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	460b      	mov	r3, r1
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	1a5b      	subs	r3, r3, r1
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4403      	add	r3, r0
 8005d70:	3344      	adds	r3, #68	; 0x44
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d78:	fb03 f301 	mul.w	r3, r3, r1
 8005d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d110      	bne.n	8005da4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	3318      	adds	r3, #24
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d96:	78f9      	ldrb	r1, [r7, #3]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 ff42 	bl	8007c26 <USBD_LL_Transmit>
 8005da2:	e015      	b.n	8005dd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e015      	b.n	8005e28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 ff52 	bl	8007caa <USBD_LL_GetRxDataSize>
 8005e06:	4602      	mov	r2, r0
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e22:	4611      	mov	r1, r2
 8005e24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e01b      	b.n	8005e82 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <USBD_CDC_EP0_RxReady+0x50>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e5a:	2bff      	cmp	r3, #255	; 0xff
 8005e5c:	d010      	beq.n	8005e80 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e74:	b292      	uxth	r2, r2
 8005e76:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2243      	movs	r2, #67	; 0x43
 8005e98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	20000094 	.word	0x20000094

08005eac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2243      	movs	r2, #67	; 0x43
 8005eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000050 	.word	0x20000050

08005ecc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2243      	movs	r2, #67	; 0x43
 8005ed8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005eda:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	200000d8 	.word	0x200000d8

08005eec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	220a      	movs	r2, #10
 8005ef8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005efa:	4b03      	ldr	r3, [pc, #12]	; (8005f08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	2000000c 	.word	0x2000000c

08005f0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e004      	b.n	8005f2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b087      	sub	sp, #28
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f48:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e008      	b.n	8005f66 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b085      	sub	sp, #20
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e004      	b.n	8005f98 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fb2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e01a      	b.n	8005ffc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fee:	2181      	movs	r1, #129	; 0x81
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fe18 	bl	8007c26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006012:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800601e:	2303      	movs	r3, #3
 8006020:	e016      	b.n	8006050 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7c1b      	ldrb	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006034:	2101      	movs	r1, #1
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fe16 	bl	8007c68 <USBD_LL_PrepareReceive>
 800603c:	e007      	b.n	800604e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006044:	2340      	movs	r3, #64	; 0x40
 8006046:	2101      	movs	r1, #1
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fe0d 	bl	8007c68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e01f      	b.n	80060b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	79fa      	ldrb	r2, [r7, #7]
 80060a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f001 fc89 	bl	80079bc <USBD_LL_Init>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e016      	b.n	80060fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f107 020e 	add.w	r2, r7, #14
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
 80060f4:	4602      	mov	r2, r0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 fca0 	bl	8007a54 <USBD_LL_Start>
 8006114:	4603      	mov	r3, r0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800611e:	b480      	push	{r7}
 8006120:	b083      	sub	sp, #12
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006140:	2303      	movs	r3, #3
 8006142:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	4611      	mov	r1, r2
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
  }

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ff90 	bl	80070d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d01a      	beq.n	800620e <USBD_LL_SetupStage+0x72>
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d822      	bhi.n	8006222 <USBD_LL_SetupStage+0x86>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <USBD_LL_SetupStage+0x4a>
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d00a      	beq.n	80061fa <USBD_LL_SetupStage+0x5e>
 80061e4:	e01d      	b.n	8006222 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa62 	bl	80066b8 <USBD_StdDevReq>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e020      	b.n	800623c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fac6 	bl	8006794 <USBD_StdItfReq>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e016      	b.n	800623c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb05 	bl	8006826 <USBD_StdEPReq>
 800621c:	4603      	mov	r3, r0
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e00c      	b.n	800623c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006228:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fc6f 	bl	8007b14 <USBD_LL_StallEP>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
      break;
 800623a:	bf00      	nop
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	460b      	mov	r3, r1
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d138      	bne.n	80062cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006268:	2b03      	cmp	r3, #3
 800626a:	d14a      	bne.n	8006302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	429a      	cmp	r2, r3
 8006276:	d913      	bls.n	80062a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	4293      	cmp	r3, r2
 8006290:	bf28      	it	cs
 8006292:	4613      	movcs	r3, r2
 8006294:	461a      	mov	r2, r3
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f001 f80f 	bl	80072bc <USBD_CtlContinueRx>
 800629e:	e030      	b.n	8006302 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d10b      	bne.n	80062c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 f80a 	bl	80072de <USBD_CtlSendStatus>
 80062ca:	e01a      	b.n	8006302 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d114      	bne.n	8006302 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00e      	beq.n	8006302 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	7afa      	ldrb	r2, [r7, #11]
 80062ee:	4611      	mov	r1, r2
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	4798      	blx	r3
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	e000      	b.n	8006304 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	460b      	mov	r3, r1
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800631a:	7afb      	ldrb	r3, [r7, #11]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d16b      	bne.n	80063f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3314      	adds	r3, #20
 8006324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800632c:	2b02      	cmp	r3, #2
 800632e:	d156      	bne.n	80063de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d914      	bls.n	8006366 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	461a      	mov	r2, r3
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 ff84 	bl	8007260 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f001 fc82 	bl	8007c68 <USBD_LL_PrepareReceive>
 8006364:	e03b      	b.n	80063de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d11c      	bne.n	80063ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800637a:	429a      	cmp	r2, r3
 800637c:	d316      	bcc.n	80063ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006388:	429a      	cmp	r2, r3
 800638a:	d20f      	bcs.n	80063ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800638c:	2200      	movs	r2, #0
 800638e:	2100      	movs	r1, #0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 ff65 	bl	8007260 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800639e:	2300      	movs	r3, #0
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f001 fc5f 	bl	8007c68 <USBD_LL_PrepareReceive>
 80063aa:	e018      	b.n	80063de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d10b      	bne.n	80063d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d0:	2180      	movs	r1, #128	; 0x80
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 fb9e 	bl	8007b14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 ff93 	bl	8007304 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d122      	bne.n	800642e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fe98 	bl	800611e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063f6:	e01a      	b.n	800642e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b03      	cmp	r3, #3
 8006402:	d114      	bne.n	800642e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	7afa      	ldrb	r2, [r7, #11]
 800641a:	4611      	mov	r1, r2
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	4798      	blx	r3
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	e000      	b.n	8006430 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006468:	2303      	movs	r3, #3
 800646a:	e02f      	b.n	80064cc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00f      	beq.n	8006496 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6852      	ldr	r2, [r2, #4]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	4611      	mov	r1, r2
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006496:	2340      	movs	r3, #64	; 0x40
 8006498:	2200      	movs	r2, #0
 800649a:	2100      	movs	r1, #0
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 faf4 	bl	8007a8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2240      	movs	r2, #64	; 0x40
 80064ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	2200      	movs	r2, #0
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fae6 	bl	8007a8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2240      	movs	r2, #64	; 0x40
 80064c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	460b      	mov	r3, r1
 80064de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006502:	b2da      	uxtb	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2204      	movs	r2, #4
 800650e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b04      	cmp	r3, #4
 8006532:	d106      	bne.n	8006542 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800653a:	b2da      	uxtb	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006562:	2303      	movs	r3, #3
 8006564:	e012      	b.n	800658c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d10b      	bne.n	800658a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e014      	b.n	80065d8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d10d      	bne.n	80065d6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	4611      	mov	r1, r2
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e014      	b.n	8006624 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b03      	cmp	r3, #3
 8006604:	d10d      	bne.n	8006622 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	4611      	mov	r1, r2
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b082      	sub	sp, #8
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6852      	ldr	r2, [r2, #4]
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	4611      	mov	r1, r2
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
  }

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006698:	8a3b      	ldrh	r3, [r7, #16]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	b21a      	sxth	r2, r3
 800669e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	b21b      	sxth	r3, r3
 80066a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066a8:	89fb      	ldrh	r3, [r7, #14]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d005      	beq.n	80066de <USBD_StdDevReq+0x26>
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d853      	bhi.n	800677e <USBD_StdDevReq+0xc6>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00b      	beq.n	80066f2 <USBD_StdDevReq+0x3a>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d14f      	bne.n	800677e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	4798      	blx	r3
 80066ec:	4603      	mov	r3, r0
 80066ee:	73fb      	strb	r3, [r7, #15]
      break;
 80066f0:	e04a      	b.n	8006788 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d83b      	bhi.n	8006772 <USBD_StdDevReq+0xba>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USBD_StdDevReq+0x48>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006755 	.word	0x08006755
 8006704:	08006769 	.word	0x08006769
 8006708:	08006773 	.word	0x08006773
 800670c:	0800675f 	.word	0x0800675f
 8006710:	08006773 	.word	0x08006773
 8006714:	08006733 	.word	0x08006733
 8006718:	08006729 	.word	0x08006729
 800671c:	08006773 	.word	0x08006773
 8006720:	0800674b 	.word	0x0800674b
 8006724:	0800673d 	.word	0x0800673d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9de 	bl	8006aec <USBD_GetDescriptor>
          break;
 8006730:	e024      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fb43 	bl	8006dc0 <USBD_SetAddress>
          break;
 800673a:	e01f      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fb82 	bl	8006e48 <USBD_SetConfig>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
          break;
 8006748:	e018      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fc21 	bl	8006f94 <USBD_GetConfig>
          break;
 8006752:	e013      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc52 	bl	8007000 <USBD_GetStatus>
          break;
 800675c:	e00e      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fc81 	bl	8007068 <USBD_SetFeature>
          break;
 8006766:	e009      	b.n	800677c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fc90 	bl	8007090 <USBD_ClrFeature>
          break;
 8006770:	e004      	b.n	800677c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fce7 	bl	8007148 <USBD_CtlError>
          break;
 800677a:	bf00      	nop
      }
      break;
 800677c:	e004      	b.n	8006788 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fce1 	bl	8007148 <USBD_CtlError>
      break;
 8006786:	bf00      	nop
  }

  return ret;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop

08006794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d005      	beq.n	80067ba <USBD_StdItfReq+0x26>
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d82f      	bhi.n	8006812 <USBD_StdItfReq+0x7e>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <USBD_StdItfReq+0x26>
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d12b      	bne.n	8006812 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d81d      	bhi.n	8006804 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	889b      	ldrh	r3, [r3, #4]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d813      	bhi.n	80067fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	6839      	ldr	r1, [r7, #0]
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	4798      	blx	r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	88db      	ldrh	r3, [r3, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d110      	bne.n	800680e <USBD_StdItfReq+0x7a>
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fd73 	bl	80072de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067f8:	e009      	b.n	800680e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fca3 	bl	8007148 <USBD_CtlError>
          break;
 8006802:	e004      	b.n	800680e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc9e 	bl	8007148 <USBD_CtlError>
          break;
 800680c:	e000      	b.n	8006810 <USBD_StdItfReq+0x7c>
          break;
 800680e:	bf00      	nop
      }
      break;
 8006810:	e004      	b.n	800681c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fc97 	bl	8007148 <USBD_CtlError>
      break;
 800681a:	bf00      	nop
  }

  return ret;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	889b      	ldrh	r3, [r3, #4]
 8006838:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d007      	beq.n	8006856 <USBD_StdEPReq+0x30>
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	f200 8145 	bhi.w	8006ad6 <USBD_StdEPReq+0x2b0>
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <USBD_StdEPReq+0x44>
 8006850:	2b20      	cmp	r3, #32
 8006852:	f040 8140 	bne.w	8006ad6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
      break;
 8006868:	e13a      	b.n	8006ae0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	785b      	ldrb	r3, [r3, #1]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d007      	beq.n	8006882 <USBD_StdEPReq+0x5c>
 8006872:	2b03      	cmp	r3, #3
 8006874:	f300 8129 	bgt.w	8006aca <USBD_StdEPReq+0x2a4>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d07f      	beq.n	800697c <USBD_StdEPReq+0x156>
 800687c:	2b01      	cmp	r3, #1
 800687e:	d03c      	beq.n	80068fa <USBD_StdEPReq+0xd4>
 8006880:	e123      	b.n	8006aca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d002      	beq.n	8006894 <USBD_StdEPReq+0x6e>
 800688e:	2b03      	cmp	r3, #3
 8006890:	d016      	beq.n	80068c0 <USBD_StdEPReq+0x9a>
 8006892:	e02c      	b.n	80068ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006894:	7bbb      	ldrb	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <USBD_StdEPReq+0x90>
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	2b80      	cmp	r3, #128	; 0x80
 800689e:	d00a      	beq.n	80068b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f935 	bl	8007b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 f931 	bl	8007b14 <USBD_LL_StallEP>
 80068b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068b4:	e020      	b.n	80068f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 fc45 	bl	8007148 <USBD_CtlError>
              break;
 80068be:	e01b      	b.n	80068f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	885b      	ldrh	r3, [r3, #2]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10e      	bne.n	80068e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <USBD_StdEPReq+0xc0>
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b80      	cmp	r3, #128	; 0x80
 80068d2:	d008      	beq.n	80068e6 <USBD_StdEPReq+0xc0>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	88db      	ldrh	r3, [r3, #6]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f917 	bl	8007b14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fcf9 	bl	80072de <USBD_CtlSendStatus>

              break;
 80068ec:	e004      	b.n	80068f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc29 	bl	8007148 <USBD_CtlError>
              break;
 80068f6:	bf00      	nop
          }
          break;
 80068f8:	e0ec      	b.n	8006ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d002      	beq.n	800690c <USBD_StdEPReq+0xe6>
 8006906:	2b03      	cmp	r3, #3
 8006908:	d016      	beq.n	8006938 <USBD_StdEPReq+0x112>
 800690a:	e030      	b.n	800696e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <USBD_StdEPReq+0x108>
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d00a      	beq.n	800692e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f8f9 	bl	8007b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f8f5 	bl	8007b14 <USBD_LL_StallEP>
 800692a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800692c:	e025      	b.n	800697a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fc09 	bl	8007148 <USBD_CtlError>
              break;
 8006936:	e020      	b.n	800697a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	885b      	ldrh	r3, [r3, #2]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11b      	bne.n	8006978 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f001 f8ff 	bl	8007b52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fcc2 	bl	80072de <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800696c:	e004      	b.n	8006978 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fbe9 	bl	8007148 <USBD_CtlError>
              break;
 8006976:	e000      	b.n	800697a <USBD_StdEPReq+0x154>
              break;
 8006978:	bf00      	nop
          }
          break;
 800697a:	e0ab      	b.n	8006ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b02      	cmp	r3, #2
 8006986:	d002      	beq.n	800698e <USBD_StdEPReq+0x168>
 8006988:	2b03      	cmp	r3, #3
 800698a:	d032      	beq.n	80069f2 <USBD_StdEPReq+0x1cc>
 800698c:	e097      	b.n	8006abe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800698e:	7bbb      	ldrb	r3, [r7, #14]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <USBD_StdEPReq+0x17e>
 8006994:	7bbb      	ldrb	r3, [r7, #14]
 8006996:	2b80      	cmp	r3, #128	; 0x80
 8006998:	d004      	beq.n	80069a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fbd3 	bl	8007148 <USBD_CtlError>
                break;
 80069a2:	e091      	b.n	8006ac8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	da0b      	bge.n	80069c4 <USBD_StdEPReq+0x19e>
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	3310      	adds	r3, #16
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	e00b      	b.n	80069dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2202      	movs	r2, #2
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fc1d 	bl	800722a <USBD_CtlSendData>
              break;
 80069f0:	e06a      	b.n	8006ac8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da11      	bge.n	8006a1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3324      	adds	r3, #36	; 0x24
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d117      	bne.n	8006a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb96 	bl	8007148 <USBD_CtlError>
                  break;
 8006a1c:	e054      	b.n	8006ac8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb83 	bl	8007148 <USBD_CtlError>
                  break;
 8006a42:	e041      	b.n	8006ac8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	da0b      	bge.n	8006a64 <USBD_StdEPReq+0x23e>
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3310      	adds	r3, #16
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	4413      	add	r3, r2
 8006a60:	3304      	adds	r3, #4
 8006a62:	e00b      	b.n	8006a7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <USBD_StdEPReq+0x264>
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b80      	cmp	r3, #128	; 0x80
 8006a88:	d103      	bne.n	8006a92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e00e      	b.n	8006ab0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f001 f87a 	bl	8007b90 <USBD_LL_IsStallEP>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e002      	b.n	8006ab0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbb7 	bl	800722a <USBD_CtlSendData>
              break;
 8006abc:	e004      	b.n	8006ac8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb41 	bl	8007148 <USBD_CtlError>
              break;
 8006ac6:	bf00      	nop
          }
          break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb3b 	bl	8007148 <USBD_CtlError>
          break;
 8006ad2:	bf00      	nop
      }
      break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fb35 	bl	8007148 <USBD_CtlError>
      break;
 8006ade:	bf00      	nop
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	f200 8128 	bhi.w	8006d62 <USBD_GetDescriptor+0x276>
 8006b12:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <USBD_GetDescriptor+0x2c>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b35 	.word	0x08006b35
 8006b1c:	08006b4d 	.word	0x08006b4d
 8006b20:	08006b8d 	.word	0x08006b8d
 8006b24:	08006d63 	.word	0x08006d63
 8006b28:	08006d63 	.word	0x08006d63
 8006b2c:	08006d03 	.word	0x08006d03
 8006b30:	08006d2f 	.word	0x08006d2f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	7c12      	ldrb	r2, [r2, #16]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
      break;
 8006b4a:	e112      	b.n	8006d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	7c1b      	ldrb	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10d      	bne.n	8006b70 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b6e:	e100      	b.n	8006d72 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	f107 0208 	add.w	r2, r7, #8
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
 8006b80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3301      	adds	r3, #1
 8006b86:	2202      	movs	r2, #2
 8006b88:	701a      	strb	r2, [r3, #0]
      break;
 8006b8a:	e0f2      	b.n	8006d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	885b      	ldrh	r3, [r3, #2]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b05      	cmp	r3, #5
 8006b94:	f200 80ac 	bhi.w	8006cf0 <USBD_GetDescriptor+0x204>
 8006b98:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <USBD_GetDescriptor+0xb4>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bb9 	.word	0x08006bb9
 8006ba4:	08006bed 	.word	0x08006bed
 8006ba8:	08006c21 	.word	0x08006c21
 8006bac:	08006c55 	.word	0x08006c55
 8006bb0:	08006c89 	.word	0x08006c89
 8006bb4:	08006cbd 	.word	0x08006cbd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00b      	beq.n	8006bdc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	7c12      	ldrb	r2, [r2, #16]
 8006bd0:	f107 0108 	add.w	r1, r7, #8
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bda:	e091      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fab2 	bl	8007148 <USBD_CtlError>
            err++;
 8006be4:	7afb      	ldrb	r3, [r7, #11]
 8006be6:	3301      	adds	r3, #1
 8006be8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bea:	e089      	b.n	8006d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	7c12      	ldrb	r2, [r2, #16]
 8006c04:	f107 0108 	add.w	r1, r7, #8
 8006c08:	4610      	mov	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0e:	e077      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa98 	bl	8007148 <USBD_CtlError>
            err++;
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1e:	e06f      	b.n	8006d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00b      	beq.n	8006c44 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	7c12      	ldrb	r2, [r2, #16]
 8006c38:	f107 0108 	add.w	r1, r7, #8
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
 8006c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c42:	e05d      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa7e 	bl	8007148 <USBD_CtlError>
            err++;
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	72fb      	strb	r3, [r7, #11]
          break;
 8006c52:	e055      	b.n	8006d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	7c12      	ldrb	r2, [r2, #16]
 8006c6c:	f107 0108 	add.w	r1, r7, #8
 8006c70:	4610      	mov	r0, r2
 8006c72:	4798      	blx	r3
 8006c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c76:	e043      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fa64 	bl	8007148 <USBD_CtlError>
            err++;
 8006c80:	7afb      	ldrb	r3, [r7, #11]
 8006c82:	3301      	adds	r3, #1
 8006c84:	72fb      	strb	r3, [r7, #11]
          break;
 8006c86:	e03b      	b.n	8006d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	7c12      	ldrb	r2, [r2, #16]
 8006ca0:	f107 0108 	add.w	r1, r7, #8
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4798      	blx	r3
 8006ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006caa:	e029      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa4a 	bl	8007148 <USBD_CtlError>
            err++;
 8006cb4:	7afb      	ldrb	r3, [r7, #11]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cba:	e021      	b.n	8006d00 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	7c12      	ldrb	r2, [r2, #16]
 8006cd4:	f107 0108 	add.w	r1, r7, #8
 8006cd8:	4610      	mov	r0, r2
 8006cda:	4798      	blx	r3
 8006cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cde:	e00f      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa30 	bl	8007148 <USBD_CtlError>
            err++;
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	3301      	adds	r3, #1
 8006cec:	72fb      	strb	r3, [r7, #11]
          break;
 8006cee:	e007      	b.n	8006d00 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa28 	bl	8007148 <USBD_CtlError>
          err++;
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cfe:	bf00      	nop
      }
      break;
 8006d00:	e037      	b.n	8006d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7c1b      	ldrb	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f107 0208 	add.w	r2, r7, #8
 8006d16:	4610      	mov	r0, r2
 8006d18:	4798      	blx	r3
 8006d1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d1c:	e029      	b.n	8006d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa11 	bl	8007148 <USBD_CtlError>
        err++;
 8006d26:	7afb      	ldrb	r3, [r7, #11]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d2c:	e021      	b.n	8006d72 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7c1b      	ldrb	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	f107 0208 	add.w	r2, r7, #8
 8006d42:	4610      	mov	r0, r2
 8006d44:	4798      	blx	r3
 8006d46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d50:	e00f      	b.n	8006d72 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f9f7 	bl	8007148 <USBD_CtlError>
        err++;
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d60:	e007      	b.n	8006d72 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9ef 	bl	8007148 <USBD_CtlError>
      err++;
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d70:	bf00      	nop
  }

  if (err != 0U)
 8006d72:	7afb      	ldrb	r3, [r7, #11]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d11e      	bne.n	8006db6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	88db      	ldrh	r3, [r3, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d80:	893b      	ldrh	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00e      	beq.n	8006da4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	88da      	ldrh	r2, [r3, #6]
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	bf28      	it	cs
 8006d90:	4613      	movcs	r3, r2
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d96:	893b      	ldrh	r3, [r7, #8]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa44 	bl	800722a <USBD_CtlSendData>
 8006da2:	e009      	b.n	8006db8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9ce 	bl	8007148 <USBD_CtlError>
 8006dac:	e004      	b.n	8006db8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa95 	bl	80072de <USBD_CtlSendStatus>
 8006db4:	e000      	b.n	8006db8 <USBD_GetDescriptor+0x2cc>
    return;
 8006db6:	bf00      	nop
  }
}
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	889b      	ldrh	r3, [r3, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d131      	bne.n	8006e36 <USBD_SetAddress+0x76>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	88db      	ldrh	r3, [r3, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d12d      	bne.n	8006e36 <USBD_SetAddress+0x76>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	885b      	ldrh	r3, [r3, #2]
 8006dde:	2b7f      	cmp	r3, #127	; 0x7f
 8006de0:	d829      	bhi.n	8006e36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	885b      	ldrh	r3, [r3, #2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d104      	bne.n	8006e04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f9a3 	bl	8007148 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e02:	e01d      	b.n	8006e40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7bfa      	ldrb	r2, [r7, #15]
 8006e08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fee9 	bl	8007be8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa61 	bl	80072de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2a:	e009      	b.n	8006e40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e34:	e004      	b.n	8006e40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f985 	bl	8007148 <USBD_CtlError>
  }
}
 8006e3e:	bf00      	nop
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	4b4c      	ldr	r3, [pc, #304]	; (8006f90 <USBD_SetConfig+0x148>)
 8006e5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e60:	4b4b      	ldr	r3, [pc, #300]	; (8006f90 <USBD_SetConfig+0x148>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d905      	bls.n	8006e74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f96c 	bl	8007148 <USBD_CtlError>
    return USBD_FAIL;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e088      	b.n	8006f86 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d002      	beq.n	8006e86 <USBD_SetConfig+0x3e>
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d025      	beq.n	8006ed0 <USBD_SetConfig+0x88>
 8006e84:	e071      	b.n	8006f6a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e86:	4b42      	ldr	r3, [pc, #264]	; (8006f90 <USBD_SetConfig+0x148>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d01c      	beq.n	8006ec8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e8e:	4b40      	ldr	r3, [pc, #256]	; (8006f90 <USBD_SetConfig+0x148>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e98:	4b3d      	ldr	r3, [pc, #244]	; (8006f90 <USBD_SetConfig+0x148>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff f948 	bl	8006134 <USBD_SetClassConfig>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f949 	bl	8007148 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eb6:	e065      	b.n	8006f84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa10 	bl	80072de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2203      	movs	r2, #3
 8006ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ec6:	e05d      	b.n	8006f84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa08 	bl	80072de <USBD_CtlSendStatus>
      break;
 8006ece:	e059      	b.n	8006f84 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ed0:	4b2f      	ldr	r3, [pc, #188]	; (8006f90 <USBD_SetConfig+0x148>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d112      	bne.n	8006efe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ee0:	4b2b      	ldr	r3, [pc, #172]	; (8006f90 <USBD_SetConfig+0x148>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eea:	4b29      	ldr	r3, [pc, #164]	; (8006f90 <USBD_SetConfig+0x148>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff f93b 	bl	800616c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9f1 	bl	80072de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006efc:	e042      	b.n	8006f84 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006efe:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <USBD_SetConfig+0x148>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d02a      	beq.n	8006f62 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f929 	bl	800616c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f1a:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <USBD_SetConfig+0x148>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f24:	4b1a      	ldr	r3, [pc, #104]	; (8006f90 <USBD_SetConfig+0x148>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff f902 	bl	8006134 <USBD_SetClassConfig>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f903 	bl	8007148 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7ff f90e 	bl	800616c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f58:	e014      	b.n	8006f84 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f9bf 	bl	80072de <USBD_CtlSendStatus>
      break;
 8006f60:	e010      	b.n	8006f84 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9bb 	bl	80072de <USBD_CtlSendStatus>
      break;
 8006f68:	e00c      	b.n	8006f84 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f8eb 	bl	8007148 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <USBD_SetConfig+0x148>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff f8f7 	bl	800616c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	73fb      	strb	r3, [r7, #15]
      break;
 8006f82:	bf00      	nop
  }

  return ret;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000019c 	.word	0x2000019c

08006f94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88db      	ldrh	r3, [r3, #6]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d004      	beq.n	8006fb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8cd 	bl	8007148 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fae:	e023      	b.n	8006ff8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	dc02      	bgt.n	8006fc2 <USBD_GetConfig+0x2e>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dc03      	bgt.n	8006fc8 <USBD_GetConfig+0x34>
 8006fc0:	e015      	b.n	8006fee <USBD_GetConfig+0x5a>
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d00b      	beq.n	8006fde <USBD_GetConfig+0x4a>
 8006fc6:	e012      	b.n	8006fee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f927 	bl	800722a <USBD_CtlSendData>
        break;
 8006fdc:	e00c      	b.n	8006ff8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f91f 	bl	800722a <USBD_CtlSendData>
        break;
 8006fec:	e004      	b.n	8006ff8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8a9 	bl	8007148 <USBD_CtlError>
        break;
 8006ff6:	bf00      	nop
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007010:	b2db      	uxtb	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	2b02      	cmp	r3, #2
 8007016:	d81e      	bhi.n	8007056 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	88db      	ldrh	r3, [r3, #6]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d004      	beq.n	800702a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f890 	bl	8007148 <USBD_CtlError>
        break;
 8007028:	e01a      	b.n	8007060 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f043 0202 	orr.w	r2, r3, #2
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	330c      	adds	r3, #12
 800704a:	2202      	movs	r2, #2
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f8eb 	bl	800722a <USBD_CtlSendData>
      break;
 8007054:	e004      	b.n	8007060 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f875 	bl	8007148 <USBD_CtlError>
      break;
 800705e:	bf00      	nop
  }
}
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d106      	bne.n	8007088 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f92b 	bl	80072de <USBD_CtlSendStatus>
  }
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d80b      	bhi.n	80070c0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	885b      	ldrh	r3, [r3, #2]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10c      	bne.n	80070ca <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f910 	bl	80072de <USBD_CtlSendStatus>
      }
      break;
 80070be:	e004      	b.n	80070ca <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f840 	bl	8007148 <USBD_CtlError>
      break;
 80070c8:	e000      	b.n	80070cc <USBD_ClrFeature+0x3c>
      break;
 80070ca:	bf00      	nop
  }
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fabb 	bl	800667a <SWAPBYTE>
 8007104:	4603      	mov	r3, r0
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff faae 	bl	800667a <SWAPBYTE>
 800711e:	4603      	mov	r3, r0
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff faa1 	bl	800667a <SWAPBYTE>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	80da      	strh	r2, [r3, #6]
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007152:	2180      	movs	r1, #128	; 0x80
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fcdd 	bl	8007b14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fcd9 	bl	8007b14 <USBD_LL_StallEP>
}
 8007162:	bf00      	nop
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d036      	beq.n	80071ee <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007184:	6938      	ldr	r0, [r7, #16]
 8007186:	f000 f836 	bl	80071f6 <USBD_GetLen>
 800718a:	4603      	mov	r3, r0
 800718c:	3301      	adds	r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	4413      	add	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	3301      	adds	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	4413      	add	r3, r2
 80071b0:	2203      	movs	r2, #3
 80071b2:	701a      	strb	r2, [r3, #0]
  idx++;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	3301      	adds	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071ba:	e013      	b.n	80071e4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	3301      	adds	r3, #1
 80071cc:	613b      	str	r3, [r7, #16]
    idx++;
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	3301      	adds	r3, #1
 80071d2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]
    idx++;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	3301      	adds	r3, #1
 80071e2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e7      	bne.n	80071bc <USBD_GetString+0x52>
 80071ec:	e000      	b.n	80071f0 <USBD_GetString+0x86>
    return;
 80071ee:	bf00      	nop
  }
}
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007206:	e005      	b.n	8007214 <USBD_GetLen+0x1e>
  {
    len++;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	3301      	adds	r3, #1
 800720c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3301      	adds	r3, #1
 8007212:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f5      	bne.n	8007208 <USBD_GetLen+0x12>
  }

  return len;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2202      	movs	r2, #2
 800723a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	2100      	movs	r1, #0
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fce8 	bl	8007c26 <USBD_LL_Transmit>

  return USBD_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	2100      	movs	r1, #0
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fcd7 	bl	8007c26 <USBD_LL_Transmit>

  return USBD_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2203      	movs	r2, #3
 8007292:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	2100      	movs	r1, #0
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fcdb 	bl	8007c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	2100      	movs	r1, #0
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fcca 	bl	8007c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2204      	movs	r2, #4
 80072ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ee:	2300      	movs	r3, #0
 80072f0:	2200      	movs	r2, #0
 80072f2:	2100      	movs	r1, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fc96 	bl	8007c26 <USBD_LL_Transmit>

  return USBD_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2205      	movs	r2, #5
 8007310:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007314:	2300      	movs	r3, #0
 8007316:	2200      	movs	r2, #0
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fca4 	bl	8007c68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007330:	2200      	movs	r2, #0
 8007332:	4912      	ldr	r1, [pc, #72]	; (800737c <MX_USB_DEVICE_Init+0x50>)
 8007334:	4812      	ldr	r0, [pc, #72]	; (8007380 <MX_USB_DEVICE_Init+0x54>)
 8007336:	f7fe fe8f 	bl	8006058 <USBD_Init>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007340:	f7f9 fa2c 	bl	800079c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007344:	490f      	ldr	r1, [pc, #60]	; (8007384 <MX_USB_DEVICE_Init+0x58>)
 8007346:	480e      	ldr	r0, [pc, #56]	; (8007380 <MX_USB_DEVICE_Init+0x54>)
 8007348:	f7fe feb6 	bl	80060b8 <USBD_RegisterClass>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007352:	f7f9 fa23 	bl	800079c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007356:	490c      	ldr	r1, [pc, #48]	; (8007388 <MX_USB_DEVICE_Init+0x5c>)
 8007358:	4809      	ldr	r0, [pc, #36]	; (8007380 <MX_USB_DEVICE_Init+0x54>)
 800735a:	f7fe fdd7 	bl	8005f0c <USBD_CDC_RegisterInterface>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007364:	f7f9 fa1a 	bl	800079c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007368:	4805      	ldr	r0, [pc, #20]	; (8007380 <MX_USB_DEVICE_Init+0x54>)
 800736a:	f7fe fecc 	bl	8006106 <USBD_Start>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007374:	f7f9 fa12 	bl	800079c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000130 	.word	0x20000130
 8007380:	2000046c 	.word	0x2000046c
 8007384:	20000018 	.word	0x20000018
 8007388:	2000011c 	.word	0x2000011c

0800738c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007390:	2200      	movs	r2, #0
 8007392:	4905      	ldr	r1, [pc, #20]	; (80073a8 <CDC_Init_FS+0x1c>)
 8007394:	4805      	ldr	r0, [pc, #20]	; (80073ac <CDC_Init_FS+0x20>)
 8007396:	f7fe fdce 	bl	8005f36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800739a:	4905      	ldr	r1, [pc, #20]	; (80073b0 <CDC_Init_FS+0x24>)
 800739c:	4803      	ldr	r0, [pc, #12]	; (80073ac <CDC_Init_FS+0x20>)
 800739e:	f7fe fde8 	bl	8005f72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000f3c 	.word	0x20000f3c
 80073ac:	2000046c 	.word	0x2000046c
 80073b0:	2000073c 	.word	0x2000073c

080073b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
 80073d0:	4613      	mov	r3, r2
 80073d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073d4:	79fb      	ldrb	r3, [r7, #7]
 80073d6:	2b23      	cmp	r3, #35	; 0x23
 80073d8:	d84a      	bhi.n	8007470 <CDC_Control_FS+0xac>
 80073da:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <CDC_Control_FS+0x1c>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	08007471 	.word	0x08007471
 80073e4:	08007471 	.word	0x08007471
 80073e8:	08007471 	.word	0x08007471
 80073ec:	08007471 	.word	0x08007471
 80073f0:	08007471 	.word	0x08007471
 80073f4:	08007471 	.word	0x08007471
 80073f8:	08007471 	.word	0x08007471
 80073fc:	08007471 	.word	0x08007471
 8007400:	08007471 	.word	0x08007471
 8007404:	08007471 	.word	0x08007471
 8007408:	08007471 	.word	0x08007471
 800740c:	08007471 	.word	0x08007471
 8007410:	08007471 	.word	0x08007471
 8007414:	08007471 	.word	0x08007471
 8007418:	08007471 	.word	0x08007471
 800741c:	08007471 	.word	0x08007471
 8007420:	08007471 	.word	0x08007471
 8007424:	08007471 	.word	0x08007471
 8007428:	08007471 	.word	0x08007471
 800742c:	08007471 	.word	0x08007471
 8007430:	08007471 	.word	0x08007471
 8007434:	08007471 	.word	0x08007471
 8007438:	08007471 	.word	0x08007471
 800743c:	08007471 	.word	0x08007471
 8007440:	08007471 	.word	0x08007471
 8007444:	08007471 	.word	0x08007471
 8007448:	08007471 	.word	0x08007471
 800744c:	08007471 	.word	0x08007471
 8007450:	08007471 	.word	0x08007471
 8007454:	08007471 	.word	0x08007471
 8007458:	08007471 	.word	0x08007471
 800745c:	08007471 	.word	0x08007471
 8007460:	08007471 	.word	0x08007471
 8007464:	08007471 	.word	0x08007471
 8007468:	08007471 	.word	0x08007471
 800746c:	08007471 	.word	0x08007471
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007470:	bf00      	nop
  }

  return (USBD_OK);
 8007472:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4808      	ldr	r0, [pc, #32]	; (80074b0 <CDC_Receive_FS+0x30>)
 800748e:	f7fe fd70 	bl	8005f72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007492:	4807      	ldr	r0, [pc, #28]	; (80074b0 <CDC_Receive_FS+0x30>)
 8007494:	f7fe fdb6 	bl	8006004 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,*Len);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7f9 f816 	bl	80004d0 <CDC_ReceiveCallBack>
  return (USBD_OK);
 80074a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	2000046c 	.word	0x2000046c

080074b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074c4:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <CDC_Transmit_FS+0x48>)
 80074c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e00b      	b.n	80074f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	461a      	mov	r2, r3
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4806      	ldr	r0, [pc, #24]	; (80074fc <CDC_Transmit_FS+0x48>)
 80074e2:	f7fe fd28 	bl	8005f36 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <CDC_Transmit_FS+0x48>)
 80074e8:	f7fe fd5c 	bl	8005fa4 <USBD_CDC_TransmitPacket>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	2000046c 	.word	0x2000046c

08007500 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2212      	movs	r2, #18
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	2000014c 	.word	0x2000014c

08007548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	6039      	str	r1, [r7, #0]
 8007552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2204      	movs	r2, #4
 8007558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	20000160 	.word	0x20000160

0800756c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	4907      	ldr	r1, [pc, #28]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007582:	4808      	ldr	r0, [pc, #32]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007584:	f7ff fdf1 	bl	800716a <USBD_GetString>
 8007588:	e004      	b.n	8007594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4904      	ldr	r1, [pc, #16]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800758e:	4805      	ldr	r0, [pc, #20]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007590:	f7ff fdeb 	bl	800716a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	2000173c 	.word	0x2000173c
 80075a4:	08007dc8 	.word	0x08007dc8

080075a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	4904      	ldr	r1, [pc, #16]	; (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b8:	4804      	ldr	r0, [pc, #16]	; (80075cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075ba:	f7ff fdd6 	bl	800716a <USBD_GetString>
  return USBD_StrDesc;
 80075be:	4b02      	ldr	r3, [pc, #8]	; (80075c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2000173c 	.word	0x2000173c
 80075cc:	08007de0 	.word	0x08007de0

080075d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	221a      	movs	r2, #26
 80075e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075e2:	f000 f843 	bl	800766c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075e6:	4b02      	ldr	r3, [pc, #8]	; (80075f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000164 	.word	0x20000164

080075f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	6039      	str	r1, [r7, #0]
 80075fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4907      	ldr	r1, [pc, #28]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760a:	4808      	ldr	r0, [pc, #32]	; (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 800760c:	f7ff fdad 	bl	800716a <USBD_GetString>
 8007610:	e004      	b.n	800761c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007618:	f7ff fda7 	bl	800716a <USBD_GetString>
  }
  return USBD_StrDesc;
 800761c:	4b02      	ldr	r3, [pc, #8]	; (8007628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	2000173c 	.word	0x2000173c
 800762c:	08007df4 	.word	0x08007df4

08007630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	6039      	str	r1, [r7, #0]
 800763a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	4907      	ldr	r1, [pc, #28]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007646:	4808      	ldr	r0, [pc, #32]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007648:	f7ff fd8f 	bl	800716a <USBD_GetString>
 800764c:	e004      	b.n	8007658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4904      	ldr	r1, [pc, #16]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007652:	4805      	ldr	r0, [pc, #20]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007654:	f7ff fd89 	bl	800716a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	; (8007664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	2000173c 	.word	0x2000173c
 8007668:	08007e00 	.word	0x08007e00

0800766c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <Get_SerialNum+0x44>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007678:	4b0e      	ldr	r3, [pc, #56]	; (80076b4 <Get_SerialNum+0x48>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <Get_SerialNum+0x4c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d009      	beq.n	80076a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007692:	2208      	movs	r2, #8
 8007694:	4909      	ldr	r1, [pc, #36]	; (80076bc <Get_SerialNum+0x50>)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f814 	bl	80076c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800769c:	2204      	movs	r2, #4
 800769e:	4908      	ldr	r1, [pc, #32]	; (80076c0 <Get_SerialNum+0x54>)
 80076a0:	68b8      	ldr	r0, [r7, #8]
 80076a2:	f000 f80f 	bl	80076c4 <IntToUnicode>
  }
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	1fff7a10 	.word	0x1fff7a10
 80076b4:	1fff7a14 	.word	0x1fff7a14
 80076b8:	1fff7a18 	.word	0x1fff7a18
 80076bc:	20000166 	.word	0x20000166
 80076c0:	20000176 	.word	0x20000176

080076c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]
 80076da:	e027      	b.n	800772c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	d80b      	bhi.n	80076fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4619      	mov	r1, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	440b      	add	r3, r1
 80076f4:	3230      	adds	r2, #48	; 0x30
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e00a      	b.n	8007712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0f1b      	lsrs	r3, r3, #28
 8007700:	b2da      	uxtb	r2, r3
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	4619      	mov	r1, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	440b      	add	r3, r1
 800770c:	3237      	adds	r2, #55	; 0x37
 800770e:	b2d2      	uxtb	r2, r2
 8007710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	3301      	adds	r3, #1
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	4413      	add	r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	3301      	adds	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
 800772c:	7dfa      	ldrb	r2, [r7, #23]
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	429a      	cmp	r2, r3
 8007732:	d3d3      	bcc.n	80076dc <IntToUnicode+0x18>
  }
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007764:	d13a      	bne.n	80077dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6313      	str	r3, [r2, #48]	; 0x30
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007782:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007788:	2302      	movs	r3, #2
 800778a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778c:	2300      	movs	r3, #0
 800778e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007790:	2303      	movs	r3, #3
 8007792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007794:	230a      	movs	r3, #10
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007798:	f107 0314 	add.w	r3, r7, #20
 800779c:	4619      	mov	r1, r3
 800779e:	4812      	ldr	r0, [pc, #72]	; (80077e8 <HAL_PCD_MspInit+0xa4>)
 80077a0:	f7f9 fe5e 	bl	8001460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	4a0e      	ldr	r2, [pc, #56]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 80077aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ae:	6353      	str	r3, [r2, #52]	; 0x34
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	4b0b      	ldr	r3, [pc, #44]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 80077b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b8:	4a0a      	ldr	r2, [pc, #40]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077be:	6453      	str	r3, [r2, #68]	; 0x44
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <HAL_PCD_MspInit+0xa0>)
 80077c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7f9 fa92 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d6:	2043      	movs	r0, #67	; 0x43
 80077d8:	f7f9 faab 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077dc:	bf00      	nop
 80077de:	3728      	adds	r7, #40	; 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40023800 	.word	0x40023800
 80077e8:	40020000 	.word	0x40020000

080077ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fe fcca 	bl	800619c <USBD_LL_SetupStage>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007822:	78fa      	ldrb	r2, [r7, #3]
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	4619      	mov	r1, r3
 800783a:	f7fe fd04 	bl	8006246 <USBD_LL_DataOutStage>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b082      	sub	sp, #8
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	460b      	mov	r3, r1
 8007850:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	4613      	mov	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	440b      	add	r3, r1
 8007866:	3348      	adds	r3, #72	; 0x48
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	78fb      	ldrb	r3, [r7, #3]
 800786c:	4619      	mov	r1, r3
 800786e:	f7fe fd4d 	bl	800630c <USBD_LL_DataInStage>
}
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fe61 	bl	8006550 <USBD_LL_SOF>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d001      	beq.n	80078ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078aa:	f7f8 ff77 	bl	800079c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078b4:	7bfa      	ldrb	r2, [r7, #15]
 80078b6:	4611      	mov	r1, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fe0b 	bl	80064d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fdb7 	bl	8006438 <USBD_LL_Reset>
}
 80078ca:	bf00      	nop
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fe06 	bl	80064f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <HAL_PCD_SuspendCallback+0x48>)
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	4a03      	ldr	r2, [pc, #12]	; (800791c <HAL_PCD_SuspendCallback+0x48>)
 800790e:	f043 0306 	orr.w	r3, r3, #6
 8007912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800792e:	4618      	mov	r0, r3
 8007930:	f7fe fdf6 	bl	8006520 <USBD_LL_Resume>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800794e:	78fa      	ldrb	r2, [r7, #3]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fe44 	bl	80065e0 <USBD_LL_IsoOUTIncomplete>
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe fe0c 	bl	8006594 <USBD_LL_IsoINIncomplete>
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007992:	4618      	mov	r0, r3
 8007994:	f7fe fe4a 	bl	800662c <USBD_LL_DevConnected>
}
 8007998:	bf00      	nop
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fe47 	bl	8006642 <USBD_LL_DevDisconnected>
}
 80079b4:	bf00      	nop
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d13c      	bne.n	8007a46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079cc:	4a20      	ldr	r2, [pc, #128]	; (8007a50 <USBD_LL_Init+0x94>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a1e      	ldr	r2, [pc, #120]	; (8007a50 <USBD_LL_Init+0x94>)
 80079d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079dc:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <USBD_LL_Init+0x94>)
 80079de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <USBD_LL_Init+0x94>)
 80079e6:	2204      	movs	r2, #4
 80079e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079ea:	4b19      	ldr	r3, [pc, #100]	; (8007a50 <USBD_LL_Init+0x94>)
 80079ec:	2202      	movs	r2, #2
 80079ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <USBD_LL_Init+0x94>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079f6:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <USBD_LL_Init+0x94>)
 80079f8:	2202      	movs	r2, #2
 80079fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079fc:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <USBD_LL_Init+0x94>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a02:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a08:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a0e:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a14:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a1a:	480d      	ldr	r0, [pc, #52]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a1c:	f7f9 febd 	bl	800179a <HAL_PCD_Init>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a26:	f7f8 feb9 	bl	800079c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	4808      	ldr	r0, [pc, #32]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a2e:	f7fb f81a 	bl	8002a66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a32:	2240      	movs	r2, #64	; 0x40
 8007a34:	2100      	movs	r1, #0
 8007a36:	4806      	ldr	r0, [pc, #24]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a38:	f7fa ffce 	bl	80029d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a3c:	2280      	movs	r2, #128	; 0x80
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4803      	ldr	r0, [pc, #12]	; (8007a50 <USBD_LL_Init+0x94>)
 8007a42:	f7fa ffc9 	bl	80029d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	2000193c 	.word	0x2000193c

08007a54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7f9 ffb2 	bl	80019d4 <HAL_PCD_Start>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f942 	bl	8007d00 <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	4608      	mov	r0, r1
 8007a94:	4611      	mov	r1, r2
 8007a96:	461a      	mov	r2, r3
 8007a98:	4603      	mov	r3, r0
 8007a9a:	70fb      	strb	r3, [r7, #3]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70bb      	strb	r3, [r7, #2]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ab2:	78bb      	ldrb	r3, [r7, #2]
 8007ab4:	883a      	ldrh	r2, [r7, #0]
 8007ab6:	78f9      	ldrb	r1, [r7, #3]
 8007ab8:	f7fa fb96 	bl	80021e8 <HAL_PCD_EP_Open>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f91c 	bl	8007d00 <USBD_Get_USB_Status>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007af0:	78fa      	ldrb	r2, [r7, #3]
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fa fbdf 	bl	80022b8 <HAL_PCD_EP_Close>
 8007afa:	4603      	mov	r3, r0
 8007afc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f8fd 	bl	8007d00 <USBD_Get_USB_Status>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b2e:	78fa      	ldrb	r2, [r7, #3]
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fa fcb7 	bl	80024a6 <HAL_PCD_EP_SetStall>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f8de 	bl	8007d00 <USBD_Get_USB_Status>
 8007b44:	4603      	mov	r3, r0
 8007b46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fa fcfc 	bl	800256e <HAL_PCD_EP_ClrStall>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 f8bf 	bl	8007d00 <USBD_Get_USB_Status>
 8007b82:	4603      	mov	r3, r0
 8007b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	da0b      	bge.n	8007bc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	333e      	adds	r3, #62	; 0x3e
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	e00b      	b.n	8007bdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bc4:	78fb      	ldrb	r3, [r7, #3]
 8007bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	1a9b      	subs	r3, r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	4611      	mov	r1, r2
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fa fac9 	bl	800219e <HAL_PCD_SetAddress>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f874 	bl	8007d00 <USBD_Get_USB_Status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
 8007c32:	460b      	mov	r3, r1
 8007c34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c44:	7af9      	ldrb	r1, [r7, #11]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	f7fa fbe2 	bl	8002412 <HAL_PCD_EP_Transmit>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c52:	7dfb      	ldrb	r3, [r7, #23]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f853 	bl	8007d00 <USBD_Get_USB_Status>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c86:	7af9      	ldrb	r1, [r7, #11]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	f7fa fb5e 	bl	800234c <HAL_PCD_EP_Receive>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f832 	bl	8007d00 <USBD_Get_USB_Status>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ca0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fa fb8e 	bl	80023e2 <HAL_PCD_EP_GetRxCount>
 8007cc6:	4603      	mov	r3, r0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	; (8007ce8 <USBD_static_malloc+0x18>)
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	200001a0 	.word	0x200001a0

08007cec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d817      	bhi.n	8007d44 <USBD_Get_USB_Status+0x44>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_Get_USB_Status+0x1c>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d33 	.word	0x08007d33
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d3f 	.word	0x08007d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	e00b      	b.n	8007d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	73fb      	strb	r3, [r7, #15]
    break;
 8007d36:	e008      	b.n	8007d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d3c:	e005      	b.n	8007d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	73fb      	strb	r3, [r7, #15]
    break;
 8007d42:	e002      	b.n	8007d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	73fb      	strb	r3, [r7, #15]
    break;
 8007d48:	bf00      	nop
  }
  return usb_status;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <__libc_init_array>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	4d0d      	ldr	r5, [pc, #52]	; (8007d90 <__libc_init_array+0x38>)
 8007d5c:	4c0d      	ldr	r4, [pc, #52]	; (8007d94 <__libc_init_array+0x3c>)
 8007d5e:	1b64      	subs	r4, r4, r5
 8007d60:	10a4      	asrs	r4, r4, #2
 8007d62:	2600      	movs	r6, #0
 8007d64:	42a6      	cmp	r6, r4
 8007d66:	d109      	bne.n	8007d7c <__libc_init_array+0x24>
 8007d68:	4d0b      	ldr	r5, [pc, #44]	; (8007d98 <__libc_init_array+0x40>)
 8007d6a:	4c0c      	ldr	r4, [pc, #48]	; (8007d9c <__libc_init_array+0x44>)
 8007d6c:	f000 f820 	bl	8007db0 <_init>
 8007d70:	1b64      	subs	r4, r4, r5
 8007d72:	10a4      	asrs	r4, r4, #2
 8007d74:	2600      	movs	r6, #0
 8007d76:	42a6      	cmp	r6, r4
 8007d78:	d105      	bne.n	8007d86 <__libc_init_array+0x2e>
 8007d7a:	bd70      	pop	{r4, r5, r6, pc}
 8007d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d80:	4798      	blx	r3
 8007d82:	3601      	adds	r6, #1
 8007d84:	e7ee      	b.n	8007d64 <__libc_init_array+0xc>
 8007d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8a:	4798      	blx	r3
 8007d8c:	3601      	adds	r6, #1
 8007d8e:	e7f2      	b.n	8007d76 <__libc_init_array+0x1e>
 8007d90:	08007e38 	.word	0x08007e38
 8007d94:	08007e38 	.word	0x08007e38
 8007d98:	08007e38 	.word	0x08007e38
 8007d9c:	08007e3c 	.word	0x08007e3c

08007da0 <memset>:
 8007da0:	4402      	add	r2, r0
 8007da2:	4603      	mov	r3, r0
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d100      	bne.n	8007daa <memset+0xa>
 8007da8:	4770      	bx	lr
 8007daa:	f803 1b01 	strb.w	r1, [r3], #1
 8007dae:	e7f9      	b.n	8007da4 <memset+0x4>

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr
