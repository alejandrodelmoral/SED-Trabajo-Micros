
Trabajo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e50  08007e50  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e58  08007e58  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001bc4  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d44  20001d44  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a7c  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003392  00000000  00000000  00037c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  0003afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb0  00000000  00000000  0003bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002330b  00000000  00000000  0003ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123d0  00000000  00000000  0005fd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c688d  00000000  00000000  00072123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001389b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003804  00000000  00000000  00138a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007dd0 	.word	0x08007dd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007dd0 	.word	0x08007dd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <CDC_ReceiveCallBack>:

/* Private user code ---------------------------------------------------------*/
char readBuf[MAXC]; // Buffer de MAXC caracteres

void CDC_ReceiveCallBack(uint8_t *buf, uint32_t len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	//CDC_Transmit_FS(buf, len);
	HAL_UART_Transmit(&huart6, buf, len, HAL_MAX_DELAY);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	f04f 33ff 	mov.w	r3, #4294967295
 80004d2:	6879      	ldr	r1, [r7, #4]
 80004d4:	4803      	ldr	r0, [pc, #12]	; (80004e4 <CDC_ReceiveCallBack+0x24>)
 80004d6:	f002 ffaa 	bl	800342e <HAL_UART_Transmit>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000420 	.word	0x20000420

080004e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 /* Se recibe el caracter y se pide el siguiente*/
 CDC_Transmit_FS((unsigned char*)readBuf, MAXC);
 80004f0:	2101      	movs	r1, #1
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <HAL_UART_RxCpltCallback+0x24>)
 80004f4:	f006 ffe4 	bl	80074c0 <CDC_Transmit_FS>
 HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, MAXC);
 80004f8:	2201      	movs	r2, #1
 80004fa:	4904      	ldr	r1, [pc, #16]	; (800050c <HAL_UART_RxCpltCallback+0x24>)
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <HAL_UART_RxCpltCallback+0x28>)
 80004fe:	f003 f828 	bl	8003552 <HAL_UART_Receive_IT>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000464 	.word	0x20000464
 8000510:	20000420 	.word	0x20000420

08000514 <main>:

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa6c 	bl	80009f4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f824 	bl	8000568 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8d4 	bl	80006cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8b2 	bl	800068c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000528:	f006 ff06 	bl	8007338 <MX_USB_DEVICE_Init>
  MX_USART6_UART_Init();
 800052c:	f000 f884 	bl	8000638 <MX_USART6_UART_Init>

  HAL_UART_Receive_IT(&huart6, (uint8_t*)readBuf, MAXC);
 8000530:	2201      	movs	r2, #1
 8000532:	490b      	ldr	r1, [pc, #44]	; (8000560 <main+0x4c>)
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <main+0x50>)
 8000536:	f003 f80c 	bl	8003552 <HAL_UART_Receive_IT>
  /* Infinite loop */
  while (1)
  {
	  switch(*readBuf) // Switch del caracter del buffer
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <main+0x4c>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b43      	cmp	r3, #67	; 0x43
 8000540:	d006      	beq.n	8000550 <main+0x3c>
 8000542:	2b43      	cmp	r3, #67	; 0x43
 8000544:	dc06      	bgt.n	8000554 <main+0x40>
 8000546:	2b41      	cmp	r3, #65	; 0x41
 8000548:	d006      	beq.n	8000558 <main+0x44>
 800054a:	2b42      	cmp	r3, #66	; 0x42
 800054c:	d006      	beq.n	800055c <main+0x48>
		  break;
	  }
	  default:
	  {
		  // Si se manda un caracter que no ha sido programado, mostrar error o ignorarlo
		  break;
 800054e:	e001      	b.n	8000554 <main+0x40>
		  break;
 8000550:	bf00      	nop
 8000552:	e7f2      	b.n	800053a <main+0x26>
		  break;
 8000554:	bf00      	nop
 8000556:	e7f0      	b.n	800053a <main+0x26>
		  break;
 8000558:	bf00      	nop
 800055a:	e7ee      	b.n	800053a <main+0x26>
		  break;
 800055c:	bf00      	nop
	  switch(*readBuf) // Switch del caracter del buffer
 800055e:	e7ec      	b.n	800053a <main+0x26>
 8000560:	20000464 	.word	0x20000464
 8000564:	20000420 	.word	0x20000420

08000568 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f007 fc22 	bl	8007dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a26      	ldr	r2, [pc, #152]	; (8000630 <SystemClock_Config+0xc8>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <SystemClock_Config+0xc8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xcc>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005dc:	2348      	movs	r3, #72	; 0x48
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e4:	2303      	movs	r3, #3
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0320 	add.w	r3, r7, #32
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fa5d 	bl	8002aac <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f8:	f000 f8c8 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2102      	movs	r1, #2
 8000618:	4618      	mov	r0, r3
 800061a:	f002 fcbf 	bl	8002f9c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000624:	f000 f8b2 	bl	800078c <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_USART6_UART_Init>:

static void MX_USART6_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  huart6.Instance = USART6;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART6_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 8000644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000648:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART6_UART_Init+0x4c>)
 8000670:	f002 fe90 	bl	8003394 <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f887 	bl	800078c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000420 	.word	0x20000420
 8000688:	40011400 	.word	0x40011400

0800068c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_DMA_Init+0x3c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <MX_DMA_Init+0x3c>)
 800069c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_DMA_Init+0x3c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	2039      	movs	r0, #57	; 0x39
 80006b4:	f000 fb0f 	bl	8000cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80006b8:	2039      	movs	r0, #57	; 0x39
 80006ba:	f000 fb28 	bl	8000d0e <HAL_NVIC_EnableIRQ>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xb8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xb8>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xb8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_GPIO_Init+0xb8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_GPIO_Init+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0xbc>)
 800075a:	f001 f80b 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800075e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0xbc>)
 8000778:	f000 fe60 	bl	800143c <HAL_GPIO_Init>
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00

0800078c <Error_Handler>:

void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d6:	2007      	movs	r0, #7
 80007d8:	f000 fa72 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <HAL_UART_MspInit+0xf0>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d162      	bne.n	80008d0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <HAL_UART_MspInit+0xf4>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a32      	ldr	r2, [pc, #200]	; (80008dc <HAL_UART_MspInit+0xf4>)
 8000814:	f043 0320 	orr.w	r3, r3, #32
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <HAL_UART_MspInit+0xf4>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <HAL_UART_MspInit+0xf4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <HAL_UART_MspInit+0xf4>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <HAL_UART_MspInit+0xf4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000852:	2308      	movs	r3, #8
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4820      	ldr	r0, [pc, #128]	; (80008e0 <HAL_UART_MspInit+0xf8>)
 800085e:	f000 fded 	bl	800143c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 8000864:	4a20      	ldr	r2, [pc, #128]	; (80008e8 <HAL_UART_MspInit+0x100>)
 8000866:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 800086a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800086e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 800087e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000882:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088a:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 8000892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000896:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 80008a6:	f000 fa4d 	bl	8000d44 <HAL_DMA_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80008b0:	f7ff ff6c 	bl	800078c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 80008b8:	639a      	str	r2, [r3, #56]	; 0x38
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_UART_MspInit+0xfc>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2047      	movs	r0, #71	; 0x47
 80008c6:	f000 fa06 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80008ca:	2047      	movs	r0, #71	; 0x47
 80008cc:	f000 fa1f 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40011400 	.word	0x40011400
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020800 	.word	0x40020800
 80008e4:	200003c0 	.word	0x200003c0
 80008e8:	40026428 	.word	0x40026428

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f8ae 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <DMA2_Stream1_IRQHandler+0x10>)
 8000946:	f000 fb3d 	bl	8000fc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200003c0 	.word	0x200003c0

08000954 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <OTG_FS_IRQHandler+0x10>)
 800095a:	f001 f874 	bl	8001a46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000193c 	.word	0x2000193c

08000968 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <USART6_IRQHandler+0x10>)
 800096e:	f002 fe21 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000420 	.word	0x20000420

0800097c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009a6:	490e      	ldr	r1, [pc, #56]	; (80009e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009bc:	4c0b      	ldr	r4, [pc, #44]	; (80009ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ca:	f7ff ffd7 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f007 f9d3 	bl	8007d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fd9f 	bl	8000514 <main>
  bx  lr    
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80009e4:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 80009e8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80009ec:	20001d44 	.word	0x20001d44

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009f8:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_Init+0x40>)
 80009fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_Init+0x40>)
 8000a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x40>)
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f94f 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff feb6 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023c00 	.word	0x40023c00

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f967 	bl	8000d2a <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f92f 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000468 	.word	0x20000468

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000468 	.word	0x20000468

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffde 	bl	8000ac0 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4907      	ldr	r1, [pc, #28]	; (8000bbc <__NVIC_EnableIRQ+0x38>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff29 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff3e 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff31 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa2 	bl	8000c7c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff feb6 	bl	8000ac0 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e099      	b.n	8000e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2202      	movs	r2, #2
 8000d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d80:	e00f      	b.n	8000da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d82:	f7ff fe9d 	bl	8000ac0 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d908      	bls.n	8000da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e078      	b.n	8000e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e8      	bne.n	8000d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_DMA_Init+0x158>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d107      	bne.n	8000e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4313      	orrs	r3, r2
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	f023 0307 	bic.w	r3, r3, #7
 8000e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d117      	bne.n	8000e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00e      	beq.n	8000e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f000 fa7b 	bl	8001344 <DMA_CheckFifoParam>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2240      	movs	r2, #64	; 0x40
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e62:	2301      	movs	r3, #1
 8000e64:	e016      	b.n	8000e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fa32 	bl	80012d8 <DMA_CalcBaseAndBitshift>
 8000e74:	4603      	mov	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e7c:	223f      	movs	r2, #63	; 0x3f
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	f010803f 	.word	0xf010803f

08000ea0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eae:	f7ff fe07 	bl	8000ac0 <HAL_GetTick>
 8000eb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d008      	beq.n	8000ed2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e052      	b.n	8000f78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0216 	bic.w	r2, r2, #22
 8000ee0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695a      	ldr	r2, [r3, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d103      	bne.n	8000f02 <HAL_DMA_Abort+0x62>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f022 0208 	bic.w	r2, r2, #8
 8000f10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0201 	bic.w	r2, r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f22:	e013      	b.n	8000f4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f24:	f7ff fdcc 	bl	8000ac0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d90c      	bls.n	8000f4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2220      	movs	r2, #32
 8000f36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e015      	b.n	8000f78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1e4      	bne.n	8000f24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f5e:	223f      	movs	r2, #63	; 0x3f
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d004      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00c      	b.n	8000fb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fd0:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_DMA_IRQHandler+0x258>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a92      	ldr	r2, [pc, #584]	; (8001220 <HAL_DMA_IRQHandler+0x25c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	0a9b      	lsrs	r3, r3, #10
 8000fdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fee:	2208      	movs	r2, #8
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d01a      	beq.n	8001030 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0204 	bic.w	r2, r2, #4
 8001016:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101c:	2208      	movs	r2, #8
 800101e:	409a      	lsls	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	2201      	movs	r2, #1
 8001036:	409a      	lsls	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4013      	ands	r3, r2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00b      	beq.n	8001066 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001052:	2201      	movs	r2, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105e:	f043 0202 	orr.w	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	2204      	movs	r2, #4
 800106c:	409a      	lsls	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d012      	beq.n	800109c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00b      	beq.n	800109c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	2204      	movs	r2, #4
 800108a:	409a      	lsls	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001094:	f043 0204 	orr.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2210      	movs	r2, #16
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d043      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d03c      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010be:	2210      	movs	r2, #16
 80010c0:	409a      	lsls	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d018      	beq.n	8001106 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d108      	bne.n	80010f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d024      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	4798      	blx	r3
 80010f2:	e01f      	b.n	8001134 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01b      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
 8001104:	e016      	b.n	8001134 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0208 	bic.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2220      	movs	r2, #32
 800113a:	409a      	lsls	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 808e 	beq.w	8001262 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 8086 	beq.w	8001262 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115a:	2220      	movs	r2, #32
 800115c:	409a      	lsls	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b05      	cmp	r3, #5
 800116c:	d136      	bne.n	80011dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0216 	bic.w	r2, r2, #22
 800117c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800118c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d103      	bne.n	800119e <HAL_DMA_IRQHandler+0x1da>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0208 	bic.w	r2, r2, #8
 80011ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	223f      	movs	r2, #63	; 0x3f
 80011b4:	409a      	lsls	r2, r3
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d07d      	beq.n	80012ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
        }
        return;
 80011da:	e078      	b.n	80012ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d01c      	beq.n	8001224 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d108      	bne.n	800120a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d030      	beq.n	8001262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
 8001208:	e02b      	b.n	8001262 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	2b00      	cmp	r3, #0
 8001210:	d027      	beq.n	8001262 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
 800121a:	e022      	b.n	8001262 <HAL_DMA_IRQHandler+0x29e>
 800121c:	20000000 	.word	0x20000000
 8001220:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10f      	bne.n	8001252 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0210 	bic.w	r2, r2, #16
 8001240:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	2b00      	cmp	r3, #0
 8001268:	d032      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d022      	beq.n	80012bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2205      	movs	r2, #5
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3301      	adds	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	429a      	cmp	r2, r3
 8001298:	d307      	bcc.n	80012aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f2      	bne.n	800128e <HAL_DMA_IRQHandler+0x2ca>
 80012a8:	e000      	b.n	80012ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80012aa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
 80012cc:	e000      	b.n	80012d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80012ce:	bf00      	nop
    }
  }
}
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop

080012d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	3b10      	subs	r3, #16
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <DMA_CalcBaseAndBitshift+0x64>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <DMA_CalcBaseAndBitshift+0x68>)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d909      	bls.n	800131a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800130e:	f023 0303 	bic.w	r3, r3, #3
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	; 0x58
 8001318:	e007      	b.n	800132a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	aaaaaaab 	.word	0xaaaaaaab
 8001340:	08007e48 	.word	0x08007e48

08001344 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d11f      	bne.n	800139e <DMA_CheckFifoParam+0x5a>
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2b03      	cmp	r3, #3
 8001362:	d856      	bhi.n	8001412 <DMA_CheckFifoParam+0xce>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <DMA_CheckFifoParam+0x28>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	0800137d 	.word	0x0800137d
 8001370:	0800138f 	.word	0x0800138f
 8001374:	0800137d 	.word	0x0800137d
 8001378:	08001413 	.word	0x08001413
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d046      	beq.n	8001416 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800138c:	e043      	b.n	8001416 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001396:	d140      	bne.n	800141a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800139c:	e03d      	b.n	800141a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013a6:	d121      	bne.n	80013ec <DMA_CheckFifoParam+0xa8>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d837      	bhi.n	800141e <DMA_CheckFifoParam+0xda>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <DMA_CheckFifoParam+0x70>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013cb 	.word	0x080013cb
 80013bc:	080013c5 	.word	0x080013c5
 80013c0:	080013dd 	.word	0x080013dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
      break;
 80013c8:	e030      	b.n	800142c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d025      	beq.n	8001422 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013da:	e022      	b.n	8001422 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013e4:	d11f      	bne.n	8001426 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013ea:	e01c      	b.n	8001426 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d903      	bls.n	80013fa <DMA_CheckFifoParam+0xb6>
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d003      	beq.n	8001400 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013f8:	e018      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
      break;
 80013fe:	e015      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00e      	beq.n	800142a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
      break;
 8001410:	e00b      	b.n	800142a <DMA_CheckFifoParam+0xe6>
      break;
 8001412:	bf00      	nop
 8001414:	e00a      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;
 8001416:	bf00      	nop
 8001418:	e008      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;
 800141a:	bf00      	nop
 800141c:	e006      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;
 800141e:	bf00      	nop
 8001420:	e004      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;
 8001422:	bf00      	nop
 8001424:	e002      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;   
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <DMA_CheckFifoParam+0xe8>
      break;
 800142a:	bf00      	nop
    }
  } 
  
  return status; 
 800142c:	7bfb      	ldrb	r3, [r7, #15]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	e16b      	b.n	8001730 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001458:	2201      	movs	r2, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	f040 815a 	bne.w	800172a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d005      	beq.n	800148e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148a:	2b02      	cmp	r3, #2
 800148c:	d130      	bne.n	80014f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 0201 	and.w	r2, r3, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d017      	beq.n	800152c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d123      	bne.n	8001580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	220f      	movs	r2, #15
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	691a      	ldr	r2, [r3, #16]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	08da      	lsrs	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3208      	adds	r2, #8
 800157a:	69b9      	ldr	r1, [r7, #24]
 800157c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	2203      	movs	r2, #3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0203 	and.w	r2, r3, #3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80b4 	beq.w	800172a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a5f      	ldr	r2, [pc, #380]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b5d      	ldr	r3, [pc, #372]	; (8001748 <HAL_GPIO_Init+0x30c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015de:	4a5b      	ldr	r2, [pc, #364]	; (800174c <HAL_GPIO_Init+0x310>)
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_GPIO_Init+0x314>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d02b      	beq.n	8001662 <HAL_GPIO_Init+0x226>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a51      	ldr	r2, [pc, #324]	; (8001754 <HAL_GPIO_Init+0x318>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x222>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a50      	ldr	r2, [pc, #320]	; (8001758 <HAL_GPIO_Init+0x31c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x21e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4f      	ldr	r2, [pc, #316]	; (800175c <HAL_GPIO_Init+0x320>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x21a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <HAL_GPIO_Init+0x324>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x216>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <HAL_GPIO_Init+0x328>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x212>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_GPIO_Init+0x32c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4b      	ldr	r2, [pc, #300]	; (800176c <HAL_GPIO_Init+0x330>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x20a>
 8001642:	2307      	movs	r3, #7
 8001644:	e00e      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001646:	2308      	movs	r3, #8
 8001648:	e00c      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800164a:	2306      	movs	r3, #6
 800164c:	e00a      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800164e:	2305      	movs	r3, #5
 8001650:	e008      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001652:	2304      	movs	r3, #4
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001656:	2303      	movs	r3, #3
 8001658:	e004      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800165a:	2302      	movs	r3, #2
 800165c:	e002      	b.n	8001664 <HAL_GPIO_Init+0x228>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x228>
 8001662:	2300      	movs	r3, #0
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	f002 0203 	and.w	r2, r2, #3
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	4093      	lsls	r3, r2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001674:	4935      	ldr	r1, [pc, #212]	; (800174c <HAL_GPIO_Init+0x310>)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_GPIO_Init+0x334>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3301      	adds	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2b0f      	cmp	r3, #15
 8001734:	f67f ae90 	bls.w	8001458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3724      	adds	r7, #36	; 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40013800 	.word	0x40013800
 8001750:	40020000 	.word	0x40020000
 8001754:	40020400 	.word	0x40020400
 8001758:	40020800 	.word	0x40020800
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40021400 	.word	0x40021400
 8001768:	40021800 	.word	0x40021800
 800176c:	40021c00 	.word	0x40021c00
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001790:	e003      	b.n	800179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a8:	b08f      	sub	sp, #60	; 0x3c
 80017aa:	af0a      	add	r7, sp, #40	; 0x28
 80017ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e10f      	b.n	80019d8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d106      	bne.n	80017d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f005 ffbc 	bl	8007750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fea9 	bl	800454e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	687e      	ldr	r6, [r7, #4]
 8001804:	466d      	mov	r5, sp
 8001806:	f106 0410 	add.w	r4, r6, #16
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}
 800181a:	1d33      	adds	r3, r6, #4
 800181c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181e:	6838      	ldr	r0, [r7, #0]
 8001820:	f002 fd80 	bl	8004324 <USB_CoreInit>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0d0      	b.n	80019d8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fe97 	bl	8004570 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e04a      	b.n	80018de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333d      	adds	r3, #61	; 0x3d
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	333c      	adds	r3, #60	; 0x3c
 800186c:	7bfa      	ldrb	r2, [r7, #15]
 800186e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	b298      	uxth	r0, r3
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	3342      	adds	r3, #66	; 0x42
 8001884:	4602      	mov	r2, r0
 8001886:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	333f      	adds	r3, #63	; 0x3f
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3344      	adds	r3, #68	; 0x44
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3348      	adds	r3, #72	; 0x48
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3350      	adds	r3, #80	; 0x50
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	3301      	adds	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3af      	bcc.n	8001848 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e044      	b.n	8001978 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	1a9b      	subs	r3, r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001904:	7bfa      	ldrb	r2, [r7, #15]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	1a9b      	subs	r3, r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	3301      	adds	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3b5      	bcc.n	80018ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	687e      	ldr	r6, [r7, #4]
 800198a:	466d      	mov	r5, sp
 800198c:	f106 0410 	add.w	r4, r6, #16
 8001990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001998:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199c:	e885 0003 	stmia.w	r5, {r0, r1}
 80019a0:	1d33      	adds	r3, r6, #4
 80019a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f002 fe2f 	bl	8004608 <USB_DevInit>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e00d      	b.n	80019d8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 feab 	bl	800572c <USB_DevDisconnect>

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_PCD_Start+0x1c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e020      	b.n	8001a3e <HAL_PCD_Start+0x5e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d109      	bne.n	8001a20 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d005      	beq.n	8001a20 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fd81 	bl	800452c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fe5b 	bl	80056ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b08d      	sub	sp, #52	; 0x34
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 ff19 	bl	8005894 <USB_GetMode>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 839d 	bne.w	80021a4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fe7d 	bl	800576e <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8393 	beq.w	80021a2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 fe74 	bl	800576e <USB_ReadInterrupts>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d107      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f002 0202 	and.w	r2, r2, #2
 8001a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fe62 	bl	800576e <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b10      	cmp	r3, #16
 8001ab2:	d161      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0210 	bic.w	r2, r2, #16
 8001ac2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	f003 020f 	and.w	r2, r3, #15
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	0c5b      	lsrs	r3, r3, #17
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d124      	bne.n	8001b3a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d035      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	6a38      	ldr	r0, [r7, #32]
 8001b10:	f003 fc99 	bl	8005446 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b20:	441a      	add	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b32:	441a      	add	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	619a      	str	r2, [r3, #24]
 8001b38:	e016      	b.n	8001b68 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	0c5b      	lsrs	r3, r3, #17
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d110      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6a38      	ldr	r0, [r7, #32]
 8001b52:	f003 fc78 	bl	8005446 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b62:	441a      	add	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0210 	orr.w	r2, r2, #16
 8001b76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fdf6 	bl	800576e <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b8c:	d16e      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fdfc 	bl	8005794 <USB_ReadDevAllOutEpInterrupt>
 8001b9c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b9e:	e062      	b.n	8001c66 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d057      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fe21 	bl	80057fc <USB_ReadDevOutEPInterrupt>
 8001bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fdb0 	bl	8002740 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 feaa 	bl	8002958 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d008      	beq.n	8001c3c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c36:	461a      	mov	r2, r3
 8001c38:	2320      	movs	r3, #32
 8001c3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c52:	461a      	mov	r2, r3
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d199      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fd7c 	bl	800576e <USB_ReadInterrupts>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c80:	f040 80c0 	bne.w	8001e04 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fd9d 	bl	80057c8 <USB_ReadDevAllInEpInterrupt>
 8001c8e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001c94:	e0b2      	b.n	8001dfc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80a7 	beq.w	8001df0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fdc3 	bl	8005838 <USB_ReadDevInEPInterrupt>
 8001cb2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d057      	beq.n	8001d6e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69f9      	ldr	r1, [r7, #28]
 8001cda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cde:	4013      	ands	r3, r2
 8001ce0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d132      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3348      	adds	r3, #72	; 0x48
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4403      	add	r3, r0
 8001d1c:	3344      	adds	r3, #68	; 0x44
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4419      	add	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4403      	add	r3, r0
 8001d30:	3348      	adds	r3, #72	; 0x48
 8001d32:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d113      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x31c>
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3350      	adds	r3, #80	; 0x50
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d108      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6818      	ldr	r0, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	f003 fdcb 	bl	80058f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f005 fd72 	bl	8007852 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	015a      	lsls	r2, r3, #5
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d84:	461a      	mov	r2, r3
 8001d86:	2308      	movs	r3, #8
 8001d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da0:	461a      	mov	r2, r3
 8001da2:	2310      	movs	r3, #16
 8001da4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2340      	movs	r3, #64	; 0x40
 8001dc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2302      	movs	r3, #2
 8001ddc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fc1b 	bl	8002626 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	3301      	adds	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f47f af49 	bne.w	8001c96 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fcb0 	bl	800576e <USB_ReadInterrupts>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e18:	d122      	bne.n	8001e60 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e40:	2100      	movs	r1, #0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fe26 	bl	8002a94 <HAL_PCDEx_LPM_Callback>
 8001e48:	e002      	b.n	8001e50 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f005 fd78 	bl	8007940 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fc82 	bl	800576e <USB_ReadInterrupts>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e74:	d112      	bne.n	8001e9c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f005 fd34 	bl	80078f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001e9a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fc64 	bl	800576e <USB_ReadInterrupts>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	f040 80c7 	bne.w	8002042 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fcfe 	bl	80048d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed8:	e056      	b.n	8001f88 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001eec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	0151      	lsls	r1, r2, #5
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	440a      	add	r2, r1
 8001f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f0c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	0151      	lsls	r1, r2, #5
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	440a      	add	r2, r1
 8001f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f52:	0151      	lsls	r1, r2, #5
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	440a      	add	r2, r1
 8001f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	0151      	lsls	r1, r2, #5
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	440a      	add	r2, r1
 8001f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	3301      	adds	r3, #1
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3a3      	bcc.n	8001eda <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	69fa      	ldr	r2, [r7, #28]
 8001fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fbe:	f043 030b 	orr.w	r3, r3, #11
 8001fc2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fd4:	f043 030b 	orr.w	r3, r3, #11
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	e015      	b.n	8002008 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ff2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002002:	f043 030b 	orr.w	r3, r3, #11
 8002006:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69fa      	ldr	r2, [r7, #28]
 8002012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002016:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800201a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800202c:	461a      	mov	r2, r3
 800202e:	f003 fc63 	bl	80058f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fb91 	bl	800576e <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002056:	d124      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fc27 	bl	80058b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fc8f 	bl	800498a <USB_GetDevSpeed>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681c      	ldr	r4, [r3, #0]
 8002078:	f001 f958 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800207c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4620      	mov	r0, r4
 8002088:	f002 f9ae 	bl	80043e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f005 fc08 	bl	80078a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fb61 	bl	800576e <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d10a      	bne.n	80020cc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f005 fbe5 	bl	8007886 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f002 0208 	and.w	r2, r2, #8
 80020ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fb4c 	bl	800576e <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e0:	d10f      	bne.n	8002102 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f005 fc47 	bl	8007980 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fb31 	bl	800576e <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002116:	d10f      	bne.n	8002138 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f005 fc1a 	bl	800795c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002136:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fb16 	bl	800576e <USB_ReadInterrupts>
 8002142:	4603      	mov	r3, r0
 8002144:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d10a      	bne.n	8002164 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f005 fc28 	bl	80079a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fb00 	bl	800576e <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d115      	bne.n	80021a4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f005 fc18 	bl	80079c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	e000      	b.n	80021a4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80021a2:	bf00      	nop
    }
  }
}
 80021a4:	3734      	adds	r7, #52	; 0x34
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd90      	pop	{r4, r7, pc}

080021aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_PCD_SetAddress+0x1a>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e013      	b.n	80021ec <HAL_PCD_SetAddress+0x42>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fa5e 	bl	800569e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	70fb      	strb	r3, [r7, #3]
 8002206:	460b      	mov	r3, r1
 8002208:	803b      	strh	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002216:	2b00      	cmp	r3, #0
 8002218:	da0f      	bge.n	800223a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	f003 020f 	and.w	r2, r3, #15
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	3338      	adds	r3, #56	; 0x38
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	3304      	adds	r3, #4
 8002230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	705a      	strb	r2, [r3, #1]
 8002238:	e00f      	b.n	800225a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	b2da      	uxtb	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002266:	883a      	ldrh	r2, [r7, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	78ba      	ldrb	r2, [r7, #2]
 8002270:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d004      	beq.n	8002284 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002284:	78bb      	ldrb	r3, [r7, #2]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d102      	bne.n	8002290 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_Open+0xaa>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_Open+0xc8>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fb91 	bl	80049d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80022ba:	7afb      	ldrb	r3, [r7, #11]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0f      	bge.n	80022f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3338      	adds	r3, #56	; 0x38
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	705a      	strb	r2, [r3, #1]
 80022f6:	e00f      	b.n	8002318 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_PCD_EP_Close+0x6e>
 800232e:	2302      	movs	r3, #2
 8002330:	e00e      	b.n	8002350 <HAL_PCD_EP_Close+0x8c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fbcf 	bl	8004ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	460b      	mov	r3, r1
 8002366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239a:	7afb      	ldrb	r3, [r7, #11]
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	6979      	ldr	r1, [r7, #20]
 80023cc:	f002 feaa 	bl	8005124 <USB_EP0StartXfer>
 80023d0:	e008      	b.n	80023e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6979      	ldr	r1, [r7, #20]
 80023e0:	f002 fc5c 	bl	8004c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002410:	681b      	ldr	r3, [r3, #0]
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	460b      	mov	r3, r1
 800242c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	f003 020f 	and.w	r2, r3, #15
 8002434:	4613      	mov	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2201      	movs	r2, #1
 800245c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	f002 fe48 	bl	8005124 <USB_EP0StartXfer>
 8002494:	e008      	b.n	80024a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	f002 fbfa 	bl	8004c9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d901      	bls.n	80024d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e050      	b.n	8002572 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da0f      	bge.n	80024f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	4613      	mov	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3338      	adds	r3, #56	; 0x38
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	705a      	strb	r2, [r3, #1]
 80024f6:	e00d      	b.n	8002514 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	3304      	adds	r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251a:	78fb      	ldrb	r3, [r7, #3]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_PCD_EP_SetStall+0x82>
 8002530:	2302      	movs	r3, #2
 8002532:	e01e      	b.n	8002572 <HAL_PCD_EP_SetStall+0xc0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	4618      	mov	r0, r3
 8002544:	f002 ffd7 	bl	80054f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	b2d9      	uxtb	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002562:	461a      	mov	r2, r3
 8002564:	f003 f9c8 	bl	80058f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	460b      	mov	r3, r1
 8002584:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	f003 020f 	and.w	r2, r3, #15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d901      	bls.n	8002598 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e042      	b.n	800261e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800259c:	2b00      	cmp	r3, #0
 800259e:	da0f      	bge.n	80025c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	f003 020f 	and.w	r2, r3, #15
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	3338      	adds	r3, #56	; 0x38
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	705a      	strb	r2, [r3, #1]
 80025be:	e00f      	b.n	80025e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	f003 020f 	and.w	r2, r3, #15
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	3304      	adds	r3, #4
 80025d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_PCD_EP_ClrStall+0x86>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e00e      	b.n	800261e <HAL_PCD_EP_ClrStall+0xa4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	4618      	mov	r0, r3
 8002610:	f002 ffdf 	bl	80055d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b08a      	sub	sp, #40	; 0x28
 800262a:	af02      	add	r7, sp, #8
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3338      	adds	r3, #56	; 0x38
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	429a      	cmp	r2, r3
 8002658:	d901      	bls.n	800265e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06c      	b.n	8002738 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	429a      	cmp	r2, r3
 8002672:	d902      	bls.n	800267a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3303      	adds	r3, #3
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002682:	e02b      	b.n	80026dc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	d902      	bls.n	80026a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3303      	adds	r3, #3
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68d9      	ldr	r1, [r3, #12]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4603      	mov	r3, r0
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f002 fe83 	bl	80053ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	441a      	add	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d809      	bhi.n	8002706 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d203      	bcs.n	8002706 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1be      	bne.n	8002684 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	429a      	cmp	r2, r3
 8002710:	d811      	bhi.n	8002736 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	2201      	movs	r2, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	43db      	mvns	r3, r3
 800272c:	6939      	ldr	r1, [r7, #16]
 800272e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002732:	4013      	ands	r3, r2
 8002734:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	333c      	adds	r3, #60	; 0x3c
 8002758:	3304      	adds	r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	f040 80a0 	bne.w	80028b8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a72      	ldr	r2, [pc, #456]	; (8002950 <PCD_EP_OutXfrComplete_int+0x210>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f240 80dd 	bls.w	8002946 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 80d7 	beq.w	8002946 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027aa:	6093      	str	r3, [r2, #8]
 80027ac:	e0cb      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c4:	461a      	mov	r2, r3
 80027c6:	2320      	movs	r3, #32
 80027c8:	6093      	str	r3, [r2, #8]
 80027ca:	e0bc      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 80b7 	bne.w	8002946 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <PCD_EP_OutXfrComplete_int+0x210>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d90f      	bls.n	8002800 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f6:	461a      	mov	r2, r3
 80027f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027fc:	6093      	str	r3, [r2, #8]
 80027fe:	e0a2      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002812:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	440b      	add	r3, r1
 800281c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002826:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4403      	add	r3, r0
 8002836:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800283a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4403      	add	r3, r0
 800285e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4419      	add	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4403      	add	r3, r0
 8002874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002878:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d114      	bne.n	80028aa <PCD_EP_OutXfrComplete_int+0x16a>
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d108      	bne.n	80028aa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028a2:	461a      	mov	r2, r3
 80028a4:	2101      	movs	r1, #1
 80028a6:	f003 f827 	bl	80058f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f004 ffb3 	bl	800781c <HAL_PCD_DataOutStageCallback>
 80028b6:	e046      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a26      	ldr	r2, [pc, #152]	; (8002954 <PCD_EP_OutXfrComplete_int+0x214>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d124      	bne.n	800290a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028dc:	6093      	str	r3, [r2, #8]
 80028de:	e032      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	015a      	lsls	r2, r3, #5
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f6:	461a      	mov	r2, r3
 80028f8:	2320      	movs	r3, #32
 80028fa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	4619      	mov	r1, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f004 ff8a 	bl	800781c <HAL_PCD_DataOutStageCallback>
 8002908:	e01d      	b.n	8002946 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d114      	bne.n	800293a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d108      	bne.n	800293a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002932:	461a      	mov	r2, r3
 8002934:	2100      	movs	r1, #0
 8002936:	f002 ffdf 	bl	80058f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4619      	mov	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f004 ff6b 	bl	800781c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	4f54300a 	.word	0x4f54300a
 8002954:	4f54310a 	.word	0x4f54310a

08002958 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	333c      	adds	r3, #60	; 0x3c
 8002970:	3304      	adds	r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d90e      	bls.n	80029ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	461a      	mov	r2, r3
 80029a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f004 ff23 	bl	80077f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d90c      	bls.n	80029d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d108      	bne.n	80029d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029cc:	461a      	mov	r2, r3
 80029ce:	2101      	movs	r1, #1
 80029d0:	f002 ff92 	bl	80058f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	4f54300a 	.word	0x4f54300a

080029e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
 80029f0:	4613      	mov	r3, r2
 80029f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a02:	883b      	ldrh	r3, [r7, #0]
 8002a04:	0419      	lsls	r1, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a10:	e028      	b.n	8002a64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e00d      	b.n	8002a42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3340      	adds	r3, #64	; 0x40
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d3ec      	bcc.n	8002a26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a4c:	883b      	ldrh	r3, [r7, #0]
 8002a4e:	0418      	lsls	r0, r3, #16
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4302      	orrs	r2, r0
 8002a5c:	3340      	adds	r3, #64	; 0x40
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e264      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d075      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002aca:	4ba3      	ldr	r3, [pc, #652]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad6:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d112      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae2:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aee:	d10b      	bne.n	8002b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	4b99      	ldr	r3, [pc, #612]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d157      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e23f      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x74>
 8002b12:	4b91      	ldr	r3, [pc, #580]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a90      	ldr	r2, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e01d      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x98>
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a8a      	ldr	r2, [pc, #552]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a87      	ldr	r2, [pc, #540]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_RCC_OscConfig+0xb0>
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	4b81      	ldr	r3, [pc, #516]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a80      	ldr	r2, [pc, #512]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fd ffac 	bl	8000ac0 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6c:	f7fd ffa8 	bl	8000ac0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e204      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fd ff98 	bl	8000ac0 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fd ff94 	bl	8000ac0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1f0      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d063      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d11c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d116      	bne.n	8002c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e1c4      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4952      	ldr	r1, [pc, #328]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	e03a      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_OscConfig+0x2b0>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fd ff4d 	bl	8000ac0 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2a:	f7fd ff49 	bl	8000ac0 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e1a5      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3c:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4940      	ldr	r1, [pc, #256]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_OscConfig+0x2b0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fd ff2c 	bl	8000ac0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fd ff28 	bl	8000ac0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e184      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d030      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d016      	beq.n	8002ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9e:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCC_OscConfig+0x2b4>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fd ff0c 	bl	8000ac0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fd ff08 	bl	8000ac0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e164      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x200>
 8002cca:	e015      	b.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x2b4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fd fef5 	bl	8000ac0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cda:	f7fd fef1 	bl	8000ac0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e14d      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80a0 	beq.w	8002e46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d121      	bne.n	8002d86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_RCC_OscConfig+0x2b8>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd feb7 	bl	8000ac0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e011      	b.n	8002d7a <HAL_RCC_OscConfig+0x2ce>
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
 8002d60:	42470e80 	.word	0x42470e80
 8002d64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d68:	f7fd feaa 	bl	8000ac0 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e106      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7a:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCC_OscConfig+0x4e4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
 8002d8e:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a80      	ldr	r2, [pc, #512]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	e01c      	b.n	8002dd6 <HAL_RCC_OscConfig+0x32a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b05      	cmp	r3, #5
 8002da2:	d10c      	bne.n	8002dbe <HAL_RCC_OscConfig+0x312>
 8002da4:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a7a      	ldr	r2, [pc, #488]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	4a77      	ldr	r2, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	e00b      	b.n	8002dd6 <HAL_RCC_OscConfig+0x32a>
 8002dbe:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a74      	ldr	r2, [pc, #464]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	4b72      	ldr	r3, [pc, #456]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a71      	ldr	r2, [pc, #452]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fd fe6f 	bl	8000ac0 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fd fe6b 	bl	8000ac0 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0c5      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ee      	beq.n	8002de6 <HAL_RCC_OscConfig+0x33a>
 8002e08:	e014      	b.n	8002e34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fd fe59 	bl	8000ac0 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e12:	f7fd fe55 	bl	8000ac0 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0af      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	4b5a      	ldr	r3, [pc, #360]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d105      	bne.n	8002e46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3a:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4a55      	ldr	r2, [pc, #340]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 809b 	beq.w	8002f86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e50:	4b50      	ldr	r3, [pc, #320]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d05c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d141      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b4c      	ldr	r3, [pc, #304]	; (8002f98 <HAL_RCC_OscConfig+0x4ec>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fe29 	bl	8000ac0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fd fe25 	bl	8000ac0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e081      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	019b      	lsls	r3, r3, #6
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	4937      	ldr	r1, [pc, #220]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <HAL_RCC_OscConfig+0x4ec>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fdfe 	bl	8000ac0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fd fdfa 	bl	8000ac0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e056      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x41c>
 8002ee6:	e04e      	b.n	8002f86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_RCC_OscConfig+0x4ec>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fd fde7 	bl	8000ac0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef6:	f7fd fde3 	bl	8000ac0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03f      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f08:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f0      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x44a>
 8002f14:	e037      	b.n	8002f86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e032      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCC_OscConfig+0x4e8>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d028      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d121      	bne.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d11a      	bne.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d111      	bne.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40007000 	.word	0x40007000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	42470060 	.word	0x42470060

08002f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cc      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d90c      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b65      	ldr	r3, [pc, #404]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc6:	4b63      	ldr	r3, [pc, #396]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff0:	4b59      	ldr	r3, [pc, #356]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a58      	ldr	r2, [pc, #352]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a52      	ldr	r2, [pc, #328]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003014:	4b50      	ldr	r3, [pc, #320]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	494d      	ldr	r1, [pc, #308]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d044      	beq.n	80030bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d119      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003056:	2b03      	cmp	r3, #3
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e067      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4934      	ldr	r1, [pc, #208]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7fd fd18 	bl	8000ac0 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fd fd14 	bl	8000ac0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e04f      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2b      	ldr	r3, [pc, #172]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d20c      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e032      	b.n	800314a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f0:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4916      	ldr	r1, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003122:	f000 f821 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003126:	4602      	mov	r2, r0
 8003128:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	490a      	ldr	r1, [pc, #40]	; (800315c <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	4a09      	ldr	r2, [pc, #36]	; (8003160 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fc78 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023c00 	.word	0x40023c00
 8003158:	40023800 	.word	0x40023800
 800315c:	08007e30 	.word	0x08007e30
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	2300      	movs	r3, #0
 800317a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003180:	4b67      	ldr	r3, [pc, #412]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
 8003188:	2b08      	cmp	r3, #8
 800318a:	d00d      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x40>
 800318c:	2b08      	cmp	r3, #8
 800318e:	f200 80bd 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x34>
 8003196:	2b04      	cmp	r3, #4
 8003198:	d003      	beq.n	80031a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800319a:	e0b7      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800319e:	60bb      	str	r3, [r7, #8]
       break;
 80031a0:	e0b7      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031a4:	60bb      	str	r3, [r7, #8]
      break;
 80031a6:	e0b4      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a8:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d04d      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b58      	ldr	r3, [pc, #352]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	461a      	mov	r2, r3
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	ea02 0800 	and.w	r8, r2, r0
 80031d6:	ea03 0901 	and.w	r9, r3, r1
 80031da:	4640      	mov	r0, r8
 80031dc:	4649      	mov	r1, r9
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	014b      	lsls	r3, r1, #5
 80031e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031ec:	0142      	lsls	r2, r0, #5
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	ebb0 0008 	subs.w	r0, r0, r8
 80031f6:	eb61 0109 	sbc.w	r1, r1, r9
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	018b      	lsls	r3, r1, #6
 8003204:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003208:	0182      	lsls	r2, r0, #6
 800320a:	1a12      	subs	r2, r2, r0
 800320c:	eb63 0301 	sbc.w	r3, r3, r1
 8003210:	f04f 0000 	mov.w	r0, #0
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	00d9      	lsls	r1, r3, #3
 800321a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800321e:	00d0      	lsls	r0, r2, #3
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	eb12 0208 	adds.w	r2, r2, r8
 8003228:	eb43 0309 	adc.w	r3, r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0259      	lsls	r1, r3, #9
 8003236:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800323a:	0250      	lsls	r0, r2, #9
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	461a      	mov	r2, r3
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f7fc ffbc 	bl	80001c8 <__aeabi_uldivmod>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4613      	mov	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e04a      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	461a      	mov	r2, r3
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f240 10ff 	movw	r0, #511	; 0x1ff
 800326a:	f04f 0100 	mov.w	r1, #0
 800326e:	ea02 0400 	and.w	r4, r2, r0
 8003272:	ea03 0501 	and.w	r5, r3, r1
 8003276:	4620      	mov	r0, r4
 8003278:	4629      	mov	r1, r5
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	014b      	lsls	r3, r1, #5
 8003284:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003288:	0142      	lsls	r2, r0, #5
 800328a:	4610      	mov	r0, r2
 800328c:	4619      	mov	r1, r3
 800328e:	1b00      	subs	r0, r0, r4
 8003290:	eb61 0105 	sbc.w	r1, r1, r5
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	018b      	lsls	r3, r1, #6
 800329e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a2:	0182      	lsls	r2, r0, #6
 80032a4:	1a12      	subs	r2, r2, r0
 80032a6:	eb63 0301 	sbc.w	r3, r3, r1
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	00d9      	lsls	r1, r3, #3
 80032b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032b8:	00d0      	lsls	r0, r2, #3
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	1912      	adds	r2, r2, r4
 80032c0:	eb45 0303 	adc.w	r3, r5, r3
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	0299      	lsls	r1, r3, #10
 80032ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032d2:	0290      	lsls	r0, r2, #10
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	f7fc ff70 	bl	80001c8 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	60bb      	str	r3, [r7, #8]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800330e:	60bb      	str	r3, [r7, #8]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	68bb      	ldr	r3, [r7, #8]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4903      	ldr	r1, [pc, #12]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40023800 	.word	0x40023800
 8003368:	08007e40 	.word	0x08007e40

0800336c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003370:	f7ff ffdc 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0b5b      	lsrs	r3, r3, #13
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	08007e40 	.word	0x08007e40

08003394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e03f      	b.n	8003426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fa14 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fddb 	bl	8003f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695a      	ldr	r2, [r3, #20]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800340c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b08a      	sub	sp, #40	; 0x28
 8003432:	af02      	add	r7, sp, #8
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	603b      	str	r3, [r7, #0]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	d17c      	bne.n	8003548 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_UART_Transmit+0x2c>
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e075      	b.n	800354a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_UART_Transmit+0x3e>
 8003468:	2302      	movs	r3, #2
 800346a:	e06e      	b.n	800354a <HAL_UART_Transmit+0x11c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2221      	movs	r2, #33	; 0x21
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003482:	f7fd fb1d 	bl	8000ac0 <HAL_GetTick>
 8003486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349c:	d108      	bne.n	80034b0 <HAL_UART_Transmit+0x82>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	e003      	b.n	80034b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034c0:	e02a      	b.n	8003518 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fb1f 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e036      	b.n	800354a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	3302      	adds	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e007      	b.n	800350a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	3301      	adds	r3, #1
 8003508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1cf      	bne.n	80034c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 faef 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e006      	b.n	800354a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	d11d      	bne.n	80035a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_UART_Receive_IT+0x26>
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e016      	b.n	80035aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_UART_Receive_IT+0x38>
 8003586:	2302      	movs	r3, #2
 8003588:	e00f      	b.n	80035aa <HAL_UART_Receive_IT+0x58>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	461a      	mov	r2, r3
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb24 	bl	8003bec <UART_Start_Receive_IT>
 80035a4:	4603      	mov	r3, r0
 80035a6:	e000      	b.n	80035aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b0ba      	sub	sp, #232	; 0xe8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_UART_IRQHandler+0x66>
 8003606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fc03 	bl	8003e1e <UART_Receive_IT>
      return;
 8003618:	e256      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800361a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80de 	beq.w	80037e0 <HAL_UART_IRQHandler+0x22c>
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	d106      	bne.n	800363e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80d1 	beq.w	80037e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_UART_IRQHandler+0xae>
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
 800366e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
 8003692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f043 0204 	orr.w	r2, r3, #4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d011      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
 80036b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d005      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f043 0208 	orr.w	r2, r3, #8
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 81ed 	beq.w	8003abe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_UART_IRQHandler+0x14e>
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb8e 	bl	8003e1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <HAL_UART_IRQHandler+0x17a>
 8003726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d04f      	beq.n	80037ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa96 	bl	8003c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d141      	bne.n	80037c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800376e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800377a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1d9      	bne.n	8003742 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4a7d      	ldr	r2, [pc, #500]	; (8003990 <HAL_UART_IRQHandler+0x3dc>)
 800379c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fbec 	bl	8000f80 <HAL_DMA_Abort_IT>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e00e      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f990 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e00a      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f98c 	bl	8003ae4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e006      	b.n	80037dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f988 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037da:	e170      	b.n	8003abe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	bf00      	nop
    return;
 80037de:	e16e      	b.n	8003abe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 814a 	bne.w	8003a7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8143 	beq.w	8003a7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 813c 	beq.w	8003a7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003806:	2300      	movs	r3, #0
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60bb      	str	r3, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	f040 80b4 	bne.w	8003994 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003838:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 8140 	beq.w	8003ac2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800384a:	429a      	cmp	r2, r3
 800384c:	f080 8139 	bcs.w	8003ac2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003856:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003862:	f000 8088 	beq.w	8003976 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	330c      	adds	r3, #12
 800386c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800387c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800389e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e1      	bne.n	80038b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003912:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003914:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003918:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003958:	65ba      	str	r2, [r7, #88]	; 0x58
 800395a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800395e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fa95 	bl	8000ea0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397e:	b29b      	uxth	r3, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b29b      	uxth	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8b6 	bl	8003af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800398c:	e099      	b.n	8003ac2 <HAL_UART_IRQHandler+0x50e>
 800398e:	bf00      	nop
 8003990:	08003d27 	.word	0x08003d27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 808b 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80039b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8086 	beq.w	8003ac6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039de:	647a      	str	r2, [r7, #68]	; 0x44
 80039e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e3      	bne.n	80039ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3314      	adds	r3, #20
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	623b      	str	r3, [r7, #32]
   return(result);
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a16:	633a      	str	r2, [r7, #48]	; 0x30
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a5c:	61fa      	str	r2, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	617b      	str	r3, [r7, #20]
   return(result);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e3      	bne.n	8003a38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f83e 	bl	8003af8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a7c:	e023      	b.n	8003ac6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_UART_IRQHandler+0x4ea>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f959 	bl	8003d4e <UART_Transmit_IT>
    return;
 8003a9c:	e014      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x514>
 8003aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f999 	bl	8003dee <UART_EndTransmit_IT>
    return;
 8003abc:	e004      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
    return;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_UART_IRQHandler+0x514>
      return;
 8003ac6:	bf00      	nop
  }
}
 8003ac8:	37e8      	adds	r7, #232	; 0xe8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop

08003ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b090      	sub	sp, #64	; 0x40
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	e050      	b.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d04c      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b30:	f7fc ffc6 	bl	8000ac0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d241      	bcs.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b60:	637a      	str	r2, [r7, #52]	; 0x34
 8003b62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	613b      	str	r3, [r7, #16]
   return(result);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b94:	623a      	str	r2, [r7, #32]
 8003b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	69f9      	ldr	r1, [r7, #28]
 8003b9a:	6a3a      	ldr	r2, [r7, #32]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e00f      	b.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d09f      	beq.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3740      	adds	r7, #64	; 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2222      	movs	r2, #34	; 0x22
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0220 	orr.w	r2, r2, #32
 8003c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b095      	sub	sp, #84	; 0x54
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c88:	643a      	str	r2, [r7, #64]	; 0x40
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d119      	bne.n	8003d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf8:	61ba      	str	r2, [r7, #24]
 8003cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	613b      	str	r3, [r7, #16]
   return(result);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e5      	bne.n	8003cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d1a:	bf00      	nop
 8003d1c:	3754      	adds	r7, #84	; 0x54
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fecf 	bl	8003ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b21      	cmp	r3, #33	; 0x21
 8003d60:	d13e      	bne.n	8003de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d114      	bne.n	8003d96 <UART_Transmit_IT+0x48>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d110      	bne.n	8003d96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]
 8003d94:	e008      	b.n	8003da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6211      	str	r1, [r2, #32]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4619      	mov	r1, r3
 8003db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10f      	bne.n	8003ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fe5e 	bl	8003ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b08c      	sub	sp, #48	; 0x30
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b22      	cmp	r3, #34	; 0x22
 8003e30:	f040 80ab 	bne.w	8003f8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d117      	bne.n	8003e6e <UART_Receive_IT+0x50>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d113      	bne.n	8003e6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	1c9a      	adds	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6c:	e026      	b.n	8003ebc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d007      	beq.n	8003e92 <UART_Receive_IT+0x74>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <UART_Receive_IT+0x82>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e008      	b.n	8003eb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d15a      	bne.n	8003f86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0220 	bic.w	r2, r2, #32
 8003ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d135      	bne.n	8003f7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	613b      	str	r3, [r7, #16]
   return(result);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f023 0310 	bic.w	r3, r3, #16
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f36:	623a      	str	r2, [r7, #32]
 8003f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69f9      	ldr	r1, [r7, #28]
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d10a      	bne.n	8003f6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff fdbf 	bl	8003af8 <HAL_UARTEx_RxEventCallback>
 8003f7a:	e002      	b.n	8003f82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7fc fab3 	bl	80004e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e002      	b.n	8003f8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
  }
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	b09f      	sub	sp, #124	; 0x7c
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	68d9      	ldr	r1, [r3, #12]
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	ea40 0301 	orr.w	r3, r0, r1
 8003fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fd8:	f021 010c 	bic.w	r1, r1, #12
 8003fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff2:	6999      	ldr	r1, [r3, #24]
 8003ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	ea40 0301 	orr.w	r3, r0, r1
 8003ffc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4bc5      	ldr	r3, [pc, #788]	; (8004318 <UART_SetConfig+0x384>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d004      	beq.n	8004012 <UART_SetConfig+0x7e>
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4bc3      	ldr	r3, [pc, #780]	; (800431c <UART_SetConfig+0x388>)
 800400e:	429a      	cmp	r2, r3
 8004010:	d103      	bne.n	800401a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004012:	f7ff f9ab 	bl	800336c <HAL_RCC_GetPCLK2Freq>
 8004016:	6778      	str	r0, [r7, #116]	; 0x74
 8004018:	e002      	b.n	8004020 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7ff f993 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 800401e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004028:	f040 80b6 	bne.w	8004198 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	461c      	mov	r4, r3
 8004030:	f04f 0500 	mov.w	r5, #0
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	1891      	adds	r1, r2, r2
 800403a:	6439      	str	r1, [r7, #64]	; 0x40
 800403c:	415b      	adcs	r3, r3
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004044:	1912      	adds	r2, r2, r4
 8004046:	eb45 0303 	adc.w	r3, r5, r3
 800404a:	f04f 0000 	mov.w	r0, #0
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	00d9      	lsls	r1, r3, #3
 8004054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004058:	00d0      	lsls	r0, r2, #3
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	1911      	adds	r1, r2, r4
 8004060:	6639      	str	r1, [r7, #96]	; 0x60
 8004062:	416b      	adcs	r3, r5
 8004064:	667b      	str	r3, [r7, #100]	; 0x64
 8004066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	1891      	adds	r1, r2, r2
 8004072:	63b9      	str	r1, [r7, #56]	; 0x38
 8004074:	415b      	adcs	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800407c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004080:	f7fc f8a2 	bl	80001c8 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4ba5      	ldr	r3, [pc, #660]	; (8004320 <UART_SetConfig+0x38c>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011e      	lsls	r6, r3, #4
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	461c      	mov	r4, r3
 8004096:	f04f 0500 	mov.w	r5, #0
 800409a:	4622      	mov	r2, r4
 800409c:	462b      	mov	r3, r5
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6339      	str	r1, [r7, #48]	; 0x30
 80040a2:	415b      	adcs	r3, r3
 80040a4:	637b      	str	r3, [r7, #52]	; 0x34
 80040a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040aa:	1912      	adds	r2, r2, r4
 80040ac:	eb45 0303 	adc.w	r3, r5, r3
 80040b0:	f04f 0000 	mov.w	r0, #0
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	00d9      	lsls	r1, r3, #3
 80040ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040be:	00d0      	lsls	r0, r2, #3
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	1911      	adds	r1, r2, r4
 80040c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80040c8:	416b      	adcs	r3, r5
 80040ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	1891      	adds	r1, r2, r2
 80040d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80040da:	415b      	adcs	r3, r3
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80040e6:	f7fc f86f 	bl	80001c8 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4b8c      	ldr	r3, [pc, #560]	; (8004320 <UART_SetConfig+0x38c>)
 80040f0:	fba3 1302 	umull	r1, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	2164      	movs	r1, #100	; 0x64
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	3332      	adds	r3, #50	; 0x32
 8004102:	4a87      	ldr	r2, [pc, #540]	; (8004320 <UART_SetConfig+0x38c>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004110:	441e      	add	r6, r3
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	4618      	mov	r0, r3
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	1894      	adds	r4, r2, r2
 8004120:	623c      	str	r4, [r7, #32]
 8004122:	415b      	adcs	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412a:	1812      	adds	r2, r2, r0
 800412c:	eb41 0303 	adc.w	r3, r1, r3
 8004130:	f04f 0400 	mov.w	r4, #0
 8004134:	f04f 0500 	mov.w	r5, #0
 8004138:	00dd      	lsls	r5, r3, #3
 800413a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800413e:	00d4      	lsls	r4, r2, #3
 8004140:	4622      	mov	r2, r4
 8004142:	462b      	mov	r3, r5
 8004144:	1814      	adds	r4, r2, r0
 8004146:	653c      	str	r4, [r7, #80]	; 0x50
 8004148:	414b      	adcs	r3, r1
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
 800414c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	1891      	adds	r1, r2, r2
 8004158:	61b9      	str	r1, [r7, #24]
 800415a:	415b      	adcs	r3, r3
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004162:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004166:	f7fc f82f 	bl	80001c8 <__aeabi_uldivmod>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4b6c      	ldr	r3, [pc, #432]	; (8004320 <UART_SetConfig+0x38c>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a67      	ldr	r2, [pc, #412]	; (8004320 <UART_SetConfig+0x38c>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	f003 0207 	and.w	r2, r3, #7
 800418e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4432      	add	r2, r6
 8004194:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004196:	e0b9      	b.n	800430c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419a:	461c      	mov	r4, r3
 800419c:	f04f 0500 	mov.w	r5, #0
 80041a0:	4622      	mov	r2, r4
 80041a2:	462b      	mov	r3, r5
 80041a4:	1891      	adds	r1, r2, r2
 80041a6:	6139      	str	r1, [r7, #16]
 80041a8:	415b      	adcs	r3, r3
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041b0:	1912      	adds	r2, r2, r4
 80041b2:	eb45 0303 	adc.w	r3, r5, r3
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	00d9      	lsls	r1, r3, #3
 80041c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041c4:	00d0      	lsls	r0, r2, #3
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	eb12 0804 	adds.w	r8, r2, r4
 80041ce:	eb43 0905 	adc.w	r9, r3, r5
 80041d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ea:	0082      	lsls	r2, r0, #2
 80041ec:	4640      	mov	r0, r8
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fb ffea 	bl	80001c8 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <UART_SetConfig+0x38c>)
 80041fa:	fba3 2302 	umull	r2, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	011e      	lsls	r6, r3, #4
 8004202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004204:	4618      	mov	r0, r3
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	1894      	adds	r4, r2, r2
 8004210:	60bc      	str	r4, [r7, #8]
 8004212:	415b      	adcs	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800421a:	1812      	adds	r2, r2, r0
 800421c:	eb41 0303 	adc.w	r3, r1, r3
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f04f 0500 	mov.w	r5, #0
 8004228:	00dd      	lsls	r5, r3, #3
 800422a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800422e:	00d4      	lsls	r4, r2, #3
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1814      	adds	r4, r2, r0
 8004236:	64bc      	str	r4, [r7, #72]	; 0x48
 8004238:	414b      	adcs	r3, r1
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4618      	mov	r0, r3
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004254:	0082      	lsls	r2, r0, #2
 8004256:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800425a:	f7fb ffb5 	bl	80001c8 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <UART_SetConfig+0x38c>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a2a      	ldr	r2, [pc, #168]	; (8004320 <UART_SetConfig+0x38c>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004282:	441e      	add	r6, r3
 8004284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004286:	4618      	mov	r0, r3
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	1894      	adds	r4, r2, r2
 8004292:	603c      	str	r4, [r7, #0]
 8004294:	415b      	adcs	r3, r3
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800429c:	1812      	adds	r2, r2, r0
 800429e:	eb41 0303 	adc.w	r3, r1, r3
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	f04f 0500 	mov.w	r5, #0
 80042aa:	00dd      	lsls	r5, r3, #3
 80042ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042b0:	00d4      	lsls	r4, r2, #3
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	eb12 0a00 	adds.w	sl, r2, r0
 80042ba:	eb43 0b01 	adc.w	fp, r3, r1
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f04f 0100 	mov.w	r1, #0
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042d6:	0082      	lsls	r2, r0, #2
 80042d8:	4650      	mov	r0, sl
 80042da:	4659      	mov	r1, fp
 80042dc:	f7fb ff74 	bl	80001c8 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <UART_SetConfig+0x38c>)
 80042e6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2164      	movs	r1, #100	; 0x64
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	3332      	adds	r3, #50	; 0x32
 80042f8:	4a09      	ldr	r2, [pc, #36]	; (8004320 <UART_SetConfig+0x38c>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	f003 020f 	and.w	r2, r3, #15
 8004304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4432      	add	r2, r6
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	377c      	adds	r7, #124	; 0x7c
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40011000 	.word	0x40011000
 800431c:	40011400 	.word	0x40011400
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004324:	b084      	sub	sp, #16
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	f107 001c 	add.w	r0, r7, #28
 8004332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d122      	bne.n	8004382 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 fb1c 	bl	80059b4 <USB_CoreReset>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e01a      	b.n	80043b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 fb10 	bl	80059b4 <USB_CoreReset>
 8004394:	4603      	mov	r3, r0
 8004396:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38
 80043aa:	e005      	b.n	80043b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d10b      	bne.n	80043d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f043 0206 	orr.w	r2, r3, #6
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f043 0220 	orr.w	r2, r3, #32
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e2:	b004      	add	sp, #16
 80043e4:	4770      	bx	lr
	...

080043e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d165      	bne.n	80044c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a41      	ldr	r2, [pc, #260]	; (8004504 <USB_SetTurnaroundTime+0x11c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d906      	bls.n	8004412 <USB_SetTurnaroundTime+0x2a>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a40      	ldr	r2, [pc, #256]	; (8004508 <USB_SetTurnaroundTime+0x120>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d202      	bcs.n	8004412 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800440c:	230f      	movs	r3, #15
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e062      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <USB_SetTurnaroundTime+0x120>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d306      	bcc.n	8004428 <USB_SetTurnaroundTime+0x40>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a3b      	ldr	r2, [pc, #236]	; (800450c <USB_SetTurnaroundTime+0x124>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d202      	bcs.n	8004428 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004422:	230e      	movs	r3, #14
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e057      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a38      	ldr	r2, [pc, #224]	; (800450c <USB_SetTurnaroundTime+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d306      	bcc.n	800443e <USB_SetTurnaroundTime+0x56>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a37      	ldr	r2, [pc, #220]	; (8004510 <USB_SetTurnaroundTime+0x128>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d202      	bcs.n	800443e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004438:	230d      	movs	r3, #13
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e04c      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a33      	ldr	r2, [pc, #204]	; (8004510 <USB_SetTurnaroundTime+0x128>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d306      	bcc.n	8004454 <USB_SetTurnaroundTime+0x6c>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4a32      	ldr	r2, [pc, #200]	; (8004514 <USB_SetTurnaroundTime+0x12c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d802      	bhi.n	8004454 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800444e:	230c      	movs	r3, #12
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e041      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a2f      	ldr	r2, [pc, #188]	; (8004514 <USB_SetTurnaroundTime+0x12c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d906      	bls.n	800446a <USB_SetTurnaroundTime+0x82>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a2e      	ldr	r2, [pc, #184]	; (8004518 <USB_SetTurnaroundTime+0x130>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d802      	bhi.n	800446a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004464:	230b      	movs	r3, #11
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e036      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <USB_SetTurnaroundTime+0x130>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d906      	bls.n	8004480 <USB_SetTurnaroundTime+0x98>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <USB_SetTurnaroundTime+0x134>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d802      	bhi.n	8004480 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800447a:	230a      	movs	r3, #10
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e02b      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a26      	ldr	r2, [pc, #152]	; (800451c <USB_SetTurnaroundTime+0x134>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d906      	bls.n	8004496 <USB_SetTurnaroundTime+0xae>
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4a25      	ldr	r2, [pc, #148]	; (8004520 <USB_SetTurnaroundTime+0x138>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d202      	bcs.n	8004496 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004490:	2309      	movs	r3, #9
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e020      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <USB_SetTurnaroundTime+0x138>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d306      	bcc.n	80044ac <USB_SetTurnaroundTime+0xc4>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <USB_SetTurnaroundTime+0x13c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d802      	bhi.n	80044ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044a6:	2308      	movs	r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e015      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <USB_SetTurnaroundTime+0x13c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d906      	bls.n	80044c2 <USB_SetTurnaroundTime+0xda>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4a1c      	ldr	r2, [pc, #112]	; (8004528 <USB_SetTurnaroundTime+0x140>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d202      	bcs.n	80044c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044bc:	2307      	movs	r3, #7
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	e00a      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044c2:	2306      	movs	r3, #6
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e007      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044ce:	2309      	movs	r3, #9
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e001      	b.n	80044d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044d4:	2309      	movs	r3, #9
 80044d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	029b      	lsls	r3, r3, #10
 80044ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	00d8acbf 	.word	0x00d8acbf
 8004508:	00e4e1c0 	.word	0x00e4e1c0
 800450c:	00f42400 	.word	0x00f42400
 8004510:	01067380 	.word	0x01067380
 8004514:	011a499f 	.word	0x011a499f
 8004518:	01312cff 	.word	0x01312cff
 800451c:	014ca43f 	.word	0x014ca43f
 8004520:	016e3600 	.word	0x016e3600
 8004524:	01a6ab1f 	.word	0x01a6ab1f
 8004528:	01e84800 	.word	0x01e84800

0800452c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800459e:	2001      	movs	r0, #1
 80045a0:	f7fc fa9a 	bl	8000ad8 <HAL_Delay>
      ms++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f001 f972 	bl	8005894 <USB_GetMode>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d01e      	beq.n	80045f4 <USB_SetCurrentMode+0x84>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b31      	cmp	r3, #49	; 0x31
 80045ba:	d9f0      	bls.n	800459e <USB_SetCurrentMode+0x2e>
 80045bc:	e01a      	b.n	80045f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d115      	bne.n	80045f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fc fa81 	bl	8000ad8 <HAL_Delay>
      ms++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f959 	bl	8005894 <USB_GetMode>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <USB_SetCurrentMode+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b31      	cmp	r3, #49	; 0x31
 80045ec:	d9f0      	bls.n	80045d0 <USB_SetCurrentMode+0x60>
 80045ee:	e001      	b.n	80045f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e005      	b.n	8004600 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b32      	cmp	r3, #50	; 0x32
 80045f8:	d101      	bne.n	80045fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004608:	b084      	sub	sp, #16
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e009      	b.n	800463c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	3340      	adds	r3, #64	; 0x40
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3301      	adds	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	2b0e      	cmp	r3, #14
 8004640:	d9f2      	bls.n	8004628 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11c      	bne.n	8004682 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	639a      	str	r2, [r3, #56]	; 0x38
 8004680:	e00b      	b.n	800469a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ac:	4619      	mov	r1, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	461a      	mov	r2, r3
 80046b6:	680b      	ldr	r3, [r1, #0]
 80046b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d10c      	bne.n	80046da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046c6:	2100      	movs	r1, #0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f945 	bl	8004958 <USB_SetDevSpeed>
 80046ce:	e008      	b.n	80046e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046d0:	2101      	movs	r1, #1
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f940 	bl	8004958 <USB_SetDevSpeed>
 80046d8:	e003      	b.n	80046e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046da:	2103      	movs	r1, #3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f93b 	bl	8004958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046e2:	2110      	movs	r1, #16
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8f3 	bl	80048d0 <USB_FlushTxFifo>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f90f 	bl	8004918 <USB_FlushRxFifo>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470a:	461a      	mov	r2, r3
 800470c:	2300      	movs	r3, #0
 800470e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	461a      	mov	r2, r3
 8004718:	2300      	movs	r3, #0
 800471a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004722:	461a      	mov	r2, r3
 8004724:	2300      	movs	r3, #0
 8004726:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	e043      	b.n	80047b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004744:	d118      	bne.n	8004778 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	e013      	b.n	800478a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e008      	b.n	800478a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2300      	movs	r3, #0
 8004788:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	461a      	mov	r2, r3
 80047aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3301      	adds	r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b7      	bcc.n	800472e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e043      	b.n	800484c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047da:	d118      	bne.n	800480e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	461a      	mov	r2, r3
 80047f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e013      	b.n	8004820 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	e008      	b.n	8004820 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	461a      	mov	r2, r3
 800481c:	2300      	movs	r3, #0
 800481e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	461a      	mov	r2, r3
 800482e:	2300      	movs	r3, #0
 8004830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483e:	461a      	mov	r2, r3
 8004840:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3301      	adds	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	429a      	cmp	r2, r3
 8004852:	d3b7      	bcc.n	80047c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004866:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 0210 	orr.w	r2, r3, #16
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <USB_DevInit+0x2c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f043 0208 	orr.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d107      	bne.n	80048bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c8:	b004      	add	sp, #16
 80048ca:	4770      	bx	lr
 80048cc:	803c3800 	.word	0x803c3800

080048d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	019b      	lsls	r3, r3, #6
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <USB_FlushTxFifo+0x44>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e006      	b.n	8004908 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d0f1      	beq.n	80048ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	00030d40 	.word	0x00030d40

08004918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2210      	movs	r2, #16
 8004928:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3301      	adds	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <USB_FlushRxFifo+0x3c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e006      	b.n	8004948 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b10      	cmp	r3, #16
 8004944:	d0f1      	beq.n	800492a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	00030d40 	.word	0x00030d40

08004958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0306 	and.w	r3, r3, #6
 80049a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]
 80049ae:	e00a      	b.n	80049c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d002      	beq.n	80049bc <USB_GetDevSpeed+0x32>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b06      	cmp	r3, #6
 80049ba:	d102      	bne.n	80049c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
 80049c0:	e001      	b.n	80049c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049c2:	230f      	movs	r3, #15
 80049c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d13a      	bne.n	8004a66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f303 	lsl.w	r3, r1, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	68f9      	ldr	r1, [r7, #12]
 8004a0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d155      	bne.n	8004ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	78db      	ldrb	r3, [r3, #3]
 8004a42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	059b      	lsls	r3, r3, #22
 8004a4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e036      	b.n	8004ad4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	68f9      	ldr	r1, [r7, #12]
 8004a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11a      	bne.n	8004ad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	78db      	ldrb	r3, [r3, #3]
 8004ab8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d161      	bne.n	8004bc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b16:	d11f      	bne.n	8004b58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	2101      	movs	r1, #1
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b78:	4013      	ands	r3, r2
 8004b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	0159      	lsls	r1, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	440b      	add	r3, r1
 8004bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <USB_DeactivateEndpoint+0x1b0>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	600b      	str	r3, [r1, #0]
 8004bc2:	e060      	b.n	8004c86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bda:	d11f      	bne.n	8004c1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	43db      	mvns	r3, r3
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4013      	ands	r3, r2
 8004c62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	440b      	add	r3, r1
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <USB_DeactivateEndpoint+0x1b4>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	ec337800 	.word	0xec337800
 8004c98:	eff37800 	.word	0xeff37800

08004c9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f040 815c 	bne.w	8004f76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d132      	bne.n	8004d2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ce4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	0cdb      	lsrs	r3, r3, #19
 8004d26:	04db      	lsls	r3, r3, #19
 8004d28:	6113      	str	r3, [r2, #16]
 8004d2a:	e074      	b.n	8004e16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	0cdb      	lsrs	r3, r3, #19
 8004d48:	04db      	lsls	r3, r3, #19
 8004d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6959      	ldr	r1, [r3, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	440b      	add	r3, r1
 8004d88:	1e59      	subs	r1, r3, #1
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d94:	4b9d      	ldr	r3, [pc, #628]	; (800500c <USB_EPStartXfer+0x370>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	0148      	lsls	r0, r1, #5
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	4401      	add	r1, r0
 8004da0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	69b9      	ldr	r1, [r7, #24]
 8004dc0:	0148      	lsls	r0, r1, #5
 8004dc2:	69f9      	ldr	r1, [r7, #28]
 8004dc4:	4401      	add	r1, r0
 8004dc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d11f      	bne.n	8004e16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	0151      	lsls	r1, r2, #5
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	440a      	add	r2, r1
 8004dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004df4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d14b      	bne.n	8004eb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d009      	beq.n	8004e38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	461a      	mov	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	78db      	ldrb	r3, [r3, #3]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d128      	bne.n	8004e92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d110      	bne.n	8004e72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e00f      	b.n	8004e92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	0151      	lsls	r1, r2, #5
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	440a      	add	r2, r1
 8004e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	0151      	lsls	r1, r2, #5
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	440a      	add	r2, r1
 8004ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e12f      	b.n	8005114 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	69fa      	ldr	r2, [r7, #28]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ece:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	78db      	ldrb	r3, [r3, #3]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d015      	beq.n	8004f08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8117 	beq.w	8005114 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8004efc:	69f9      	ldr	r1, [r7, #28]
 8004efe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f02:	4313      	orrs	r3, r2
 8004f04:	634b      	str	r3, [r1, #52]	; 0x34
 8004f06:	e105      	b.n	8005114 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d110      	bne.n	8004f3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	0151      	lsls	r1, r2, #5
 8004f2a:	69fa      	ldr	r2, [r7, #28]
 8004f2c:	440a      	add	r2, r1
 8004f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	e00f      	b.n	8004f5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	68d9      	ldr	r1, [r3, #12]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	b298      	uxth	r0, r3
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa2b 	bl	80053ca <USB_WritePacket>
 8004f74:	e0ce      	b.n	8005114 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f90:	0cdb      	lsrs	r3, r3, #19
 8004f92:	04db      	lsls	r3, r3, #19
 8004f94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	0151      	lsls	r1, r2, #5
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	440a      	add	r2, r1
 8004fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d126      	bne.n	8005010 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	0148      	lsls	r0, r1, #5
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	4401      	add	r1, r0
 8004fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005006:	6113      	str	r3, [r2, #16]
 8005008:	e036      	b.n	8005078 <USB_EPStartXfer+0x3dc>
 800500a:	bf00      	nop
 800500c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4413      	add	r3, r2
 800501a:	1e5a      	subs	r2, r3, #1
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	04d9      	lsls	r1, r3, #19
 8005038:	4b39      	ldr	r3, [pc, #228]	; (8005120 <USB_EPStartXfer+0x484>)
 800503a:	400b      	ands	r3, r1
 800503c:	69b9      	ldr	r1, [r7, #24]
 800503e:	0148      	lsls	r0, r1, #5
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	4401      	add	r1, r0
 8005044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005048:	4313      	orrs	r3, r2
 800504a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	8af9      	ldrh	r1, [r7, #22]
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005068:	69b9      	ldr	r1, [r7, #24]
 800506a:	0148      	lsls	r0, r1, #5
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	4401      	add	r1, r0
 8005070:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005074:	4313      	orrs	r3, r2
 8005076:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d10d      	bne.n	800509a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	460a      	mov	r2, r1
 8005098:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	78db      	ldrb	r3, [r3, #3]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d128      	bne.n	80050f4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d110      	bne.n	80050d4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e00f      	b.n	80050f4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005112:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	1ff80000 	.word	0x1ff80000

08005124 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	785b      	ldrb	r3, [r3, #1]
 8005140:	2b01      	cmp	r3, #1
 8005142:	f040 80cd 	bne.w	80052e0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d132      	bne.n	80051b4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800516c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005170:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ac:	0cdb      	lsrs	r3, r3, #19
 80051ae:	04db      	lsls	r3, r3, #19
 80051b0:	6113      	str	r3, [r2, #16]
 80051b2:	e04e      	b.n	8005252 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ce:	0cdb      	lsrs	r3, r3, #19
 80051d0:	04db      	lsls	r3, r3, #19
 80051d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005242:	6939      	ldr	r1, [r7, #16]
 8005244:	0148      	lsls	r0, r1, #5
 8005246:	6979      	ldr	r1, [r7, #20]
 8005248:	4401      	add	r1, r0
 800524a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800524e:	4313      	orrs	r3, r2
 8005250:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d11e      	bne.n	8005296 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d009      	beq.n	8005274 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526c:	461a      	mov	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e092      	b.n	80053bc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052b4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d07e      	beq.n	80053bc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	2101      	movs	r1, #1
 80052d0:	fa01 f303 	lsl.w	r3, r1, r3
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052da:	4313      	orrs	r3, r2
 80052dc:	634b      	str	r3, [r1, #52]	; 0x34
 80052de:	e06d      	b.n	80053bc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fa:	0cdb      	lsrs	r3, r3, #19
 80052fc:	04db      	lsls	r3, r3, #19
 80052fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	0151      	lsls	r1, r2, #5
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	440a      	add	r2, r1
 8005316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800531e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005322:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005352:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536a:	6939      	ldr	r1, [r7, #16]
 800536c:	0148      	lsls	r0, r1, #5
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	4401      	add	r1, r0
 8005372:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005376:	4313      	orrs	r3, r2
 8005378:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d10d      	bne.n	800539c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d009      	beq.n	800539c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	68d9      	ldr	r1, [r3, #12]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005398:	460a      	mov	r2, r1
 800539a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b089      	sub	sp, #36	; 0x24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	4611      	mov	r1, r2
 80053d6:	461a      	mov	r2, r3
 80053d8:	460b      	mov	r3, r1
 80053da:	71fb      	strb	r3, [r7, #7]
 80053dc:	4613      	mov	r3, r2
 80053de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80053e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d123      	bne.n	8005438 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053f0:	88bb      	ldrh	r3, [r7, #4]
 80053f2:	3303      	adds	r3, #3
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	e018      	b.n	8005430 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	031a      	lsls	r2, r3, #12
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	4413      	add	r3, r2
 8005406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540a:	461a      	mov	r2, r3
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3301      	adds	r3, #1
 8005416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3301      	adds	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	3301      	adds	r3, #1
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d3e2      	bcc.n	80053fe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005446:	b480      	push	{r7}
 8005448:	b08b      	sub	sp, #44	; 0x2c
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	089b      	lsrs	r3, r3, #2
 8005460:	b29b      	uxth	r3, r3
 8005462:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800546c:	2300      	movs	r3, #0
 800546e:	623b      	str	r3, [r7, #32]
 8005470:	e014      	b.n	800549c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	601a      	str	r2, [r3, #0]
    pDest++;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	3301      	adds	r3, #1
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	3301      	adds	r3, #1
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	3301      	adds	r3, #1
 8005494:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	3301      	adds	r3, #1
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	6a3a      	ldr	r2, [r7, #32]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3e6      	bcc.n	8005472 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80054a4:	8bfb      	ldrh	r3, [r7, #30]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01e      	beq.n	80054e8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b4:	461a      	mov	r2, r3
 80054b6:	f107 0310 	add.w	r3, r7, #16
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	701a      	strb	r2, [r3, #0]
      i++;
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	3301      	adds	r3, #1
 80054d4:	623b      	str	r3, [r7, #32]
      pDest++;
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	3301      	adds	r3, #1
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80054dc:	8bfb      	ldrh	r3, [r7, #30]
 80054de:	3b01      	subs	r3, #1
 80054e0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80054e2:	8bfb      	ldrh	r3, [r7, #30]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ea      	bne.n	80054be <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	372c      	adds	r7, #44	; 0x2c
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	785b      	ldrb	r3, [r3, #1]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d12c      	bne.n	800556c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db12      	blt.n	800554a <USB_EPSetStall+0x54>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00f      	beq.n	800554a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005544:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005548:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	e02b      	b.n	80055c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	db12      	blt.n	80055a4 <USB_EPSetStall+0xae>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00f      	beq.n	80055a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d128      	bne.n	8005640 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800560c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	78db      	ldrb	r3, [r3, #3]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d003      	beq.n	800561e <USB_EPClearStall+0x4c>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	78db      	ldrb	r3, [r3, #3]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d138      	bne.n	8005690 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	440a      	add	r2, r1
 8005634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e027      	b.n	8005690 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	0151      	lsls	r1, r2, #5
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	440a      	add	r2, r1
 8005656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800565e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	78db      	ldrb	r3, [r3, #3]
 8005664:	2b03      	cmp	r3, #3
 8005666:	d003      	beq.n	8005670 <USB_EPClearStall+0x9e>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	78db      	ldrb	r3, [r3, #3]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d10f      	bne.n	8005690 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005704:	f023 0303 	bic.w	r3, r3, #3
 8005708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800575a:	f043 0302 	orr.w	r3, r3, #2
 800575e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	0c1b      	lsrs	r3, r3, #16
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4013      	ands	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	b29b      	uxth	r3, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800582a:	68bb      	ldr	r3, [r7, #8]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
 8005868:	01db      	lsls	r3, r3, #7
 800586a:	b2db      	uxtb	r3, r3
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4013      	ands	r3, r2
 8005884:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005886:	68bb      	ldr	r3, [r7, #8]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0301 	and.w	r3, r3, #1
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80058ce:	f023 0307 	bic.w	r3, r3, #7
 80058d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	460b      	mov	r3, r1
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	333c      	adds	r3, #60	; 0x3c
 800590e:	3304      	adds	r3, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4a26      	ldr	r2, [pc, #152]	; (80059b0 <USB_EP0_OutStart+0xb8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d90a      	bls.n	8005932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800592c:	d101      	bne.n	8005932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e037      	b.n	80059a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	2300      	movs	r3, #0
 800593c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f043 0318 	orr.w	r3, r3, #24
 8005964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d10f      	bne.n	80059a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	461a      	mov	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800599e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	4f54300a 	.word	0x4f54300a

080059b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <USB_CoreReset+0x60>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d901      	bls.n	80059d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e01a      	b.n	8005a06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	daf3      	bge.n	80059c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f043 0201 	orr.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <USB_CoreReset+0x60>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d0f1      	beq.n	80059e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	00030d40 	.word	0x00030d40

08005a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005a24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a28:	f002 f962 	bl	8007cf0 <USBD_static_malloc>
 8005a2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e066      	b.n	8005b0e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7c1b      	ldrb	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d119      	bne.n	8005a84 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a54:	2202      	movs	r2, #2
 8005a56:	2181      	movs	r1, #129	; 0x81
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f002 f826 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a68:	2202      	movs	r2, #2
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 f81c 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a82:	e016      	b.n	8005ab2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	2202      	movs	r2, #2
 8005a88:	2181      	movs	r1, #129	; 0x81
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 f80d 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	2202      	movs	r2, #2
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f002 f804 	bl	8007aaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2210      	movs	r2, #16
 8005aae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ab2:	2308      	movs	r3, #8
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	2182      	movs	r1, #130	; 0x82
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 fff6 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7c1b      	ldrb	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d109      	bne.n	8005afc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af2:	2101      	movs	r1, #1
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f002 f8c7 	bl	8007c88 <USBD_LL_PrepareReceive>
 8005afa:	e007      	b.n	8005b0c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	2101      	movs	r1, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f002 f8be 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005b22:	2181      	movs	r1, #129	; 0x81
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 ffe6 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005b30:	2101      	movs	r1, #1
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 ffdf 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005b40:	2182      	movs	r1, #130	; 0x82
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 ffd7 	bl	8007af6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b72:	4618      	mov	r0, r3
 8005b74:	f002 f8ca 	bl	8007d0c <USBD_static_free>
    pdev->pClassData = NULL;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0af      	b.n	8005d14 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d03f      	beq.n	8005c40 <USBD_CDC_Setup+0xb4>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	f040 809f 	bne.w	8005d04 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02e      	beq.n	8005c2c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da16      	bge.n	8005c06 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005be4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	88d2      	ldrh	r2, [r2, #6]
 8005bea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	88db      	ldrh	r3, [r3, #6]
 8005bf0:	2b07      	cmp	r3, #7
 8005bf2:	bf28      	it	cs
 8005bf4:	2307      	movcs	r3, #7
 8005bf6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	89fa      	ldrh	r2, [r7, #14]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fb19 	bl	8007236 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005c04:	e085      	b.n	8005d12 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	785a      	ldrb	r2, [r3, #1]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	88db      	ldrh	r3, [r3, #6]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005c1c:	6939      	ldr	r1, [r7, #16]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	88db      	ldrh	r3, [r3, #6]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fb32 	bl	800728e <USBD_CtlPrepareRx>
      break;
 8005c2a:	e072      	b.n	8005d12 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	7850      	ldrb	r0, [r2, #1]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	4798      	blx	r3
      break;
 8005c3e:	e068      	b.n	8005d12 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b0b      	cmp	r3, #11
 8005c46:	d852      	bhi.n	8005cee <USBD_CDC_Setup+0x162>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <USBD_CDC_Setup+0xc4>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c81 	.word	0x08005c81
 8005c54:	08005cfd 	.word	0x08005cfd
 8005c58:	08005cef 	.word	0x08005cef
 8005c5c:	08005cef 	.word	0x08005cef
 8005c60:	08005cef 	.word	0x08005cef
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005cef 	.word	0x08005cef
 8005c6c:	08005cef 	.word	0x08005cef
 8005c70:	08005cef 	.word	0x08005cef
 8005c74:	08005cef 	.word	0x08005cef
 8005c78:	08005cab 	.word	0x08005cab
 8005c7c:	08005cd5 	.word	0x08005cd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d107      	bne.n	8005c9c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c8c:	f107 030a 	add.w	r3, r7, #10
 8005c90:	2202      	movs	r2, #2
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 face 	bl	8007236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c9a:	e032      	b.n	8005d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 fa58 	bl	8007154 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca8:	e02b      	b.n	8005d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d107      	bne.n	8005cc6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cb6:	f107 030d 	add.w	r3, r7, #13
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fab9 	bl	8007236 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cc4:	e01d      	b.n	8005d02 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 fa43 	bl	8007154 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cd2:	e016      	b.n	8005d02 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d00f      	beq.n	8005d00 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fa36 	bl	8007154 <USBD_CtlError>
            ret = USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cec:	e008      	b.n	8005d00 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fa2f 	bl	8007154 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cfa:	e002      	b.n	8005d02 <USBD_CDC_Setup+0x176>
          break;
 8005cfc:	bf00      	nop
 8005cfe:	e008      	b.n	8005d12 <USBD_CDC_Setup+0x186>
          break;
 8005d00:	bf00      	nop
      }
      break;
 8005d02:	e006      	b.n	8005d12 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fa24 	bl	8007154 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04f      	b.n	8005dde <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3318      	adds	r3, #24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d029      	beq.n	8005db0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4613      	mov	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	3318      	adds	r3, #24
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	78f9      	ldrb	r1, [r7, #3]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	460b      	mov	r3, r1
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a5b      	subs	r3, r3, r1
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4403      	add	r3, r0
 8005d7c:	3344      	adds	r3, #68	; 0x44
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d84:	fb03 f301 	mul.w	r3, r3, r1
 8005d88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d110      	bne.n	8005db0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	3318      	adds	r3, #24
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005da2:	78f9      	ldrb	r1, [r7, #3]
 8005da4:	2300      	movs	r3, #0
 8005da6:	2200      	movs	r2, #0
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 ff4c 	bl	8007c46 <USBD_LL_Transmit>
 8005dae:	e015      	b.n	8005ddc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e015      	b.n	8005e34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 ff5c 	bl	8007cca <USBD_LL_GetRxDataSize>
 8005e12:	4602      	mov	r2, r0
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e01b      	b.n	8005e8e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d015      	beq.n	8005e8c <USBD_CDC_EP0_RxReady+0x50>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e66:	2bff      	cmp	r3, #255	; 0xff
 8005e68:	d010      	beq.n	8005e8c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e78:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e80:	b292      	uxth	r2, r2
 8005e82:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2243      	movs	r2, #67	; 0x43
 8005ea4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005ea6:	4b03      	ldr	r3, [pc, #12]	; (8005eb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20000094 	.word	0x20000094

08005eb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2243      	movs	r2, #67	; 0x43
 8005ec4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005ec6:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000050 	.word	0x20000050

08005ed8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2243      	movs	r2, #67	; 0x43
 8005ee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005ee6:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200000d8 	.word	0x200000d8

08005ef8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	220a      	movs	r2, #10
 8005f04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f06:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	2000000c 	.word	0x2000000c

08005f18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e004      	b.n	8005f36 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f54:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e008      	b.n	8005f72 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f8e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e004      	b.n	8005fa4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fbe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e01a      	b.n	8006008 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d114      	bne.n	8006006 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ffa:	2181      	movs	r1, #129	; 0x81
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fe22 	bl	8007c46 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	e016      	b.n	800605c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	7c1b      	ldrb	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800603c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006040:	2101      	movs	r1, #1
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fe20 	bl	8007c88 <USBD_LL_PrepareReceive>
 8006048:	e007      	b.n	800605a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	2101      	movs	r1, #1
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe17 	bl	8007c88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006078:	2303      	movs	r3, #3
 800607a:	e01f      	b.n	80060bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	79fa      	ldrb	r2, [r7, #7]
 80060ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f001 fc93 	bl	80079dc <USBD_LL_Init>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80060d8:	2303      	movs	r3, #3
 80060da:	e016      	b.n	800610a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	f107 020e 	add.w	r2, r7, #14
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fcaa 	bl	8007a74 <USBD_LL_Start>
 8006120:	4603      	mov	r3, r0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	78fa      	ldrb	r2, [r7, #3]
 8006164:	4611      	mov	r1, r2
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800616e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	4611      	mov	r1, r2
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
  }

  return USBD_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 ff90 	bl	80070e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80061ce:	461a      	mov	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d01a      	beq.n	800621a <USBD_LL_SetupStage+0x72>
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d822      	bhi.n	800622e <USBD_LL_SetupStage+0x86>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <USBD_LL_SetupStage+0x4a>
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d00a      	beq.n	8006206 <USBD_LL_SetupStage+0x5e>
 80061f0:	e01d      	b.n	800622e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa62 	bl	80066c4 <USBD_StdDevReq>
 8006200:	4603      	mov	r3, r0
 8006202:	73fb      	strb	r3, [r7, #15]
      break;
 8006204:	e020      	b.n	8006248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fac6 	bl	80067a0 <USBD_StdItfReq>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
      break;
 8006218:	e016      	b.n	8006248 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 fb05 	bl	8006832 <USBD_StdEPReq>
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e00c      	b.n	8006248 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fc79 	bl	8007b34 <USBD_LL_StallEP>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
      break;
 8006246:	bf00      	nop
  }

  return ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b086      	sub	sp, #24
 8006256:	af00      	add	r7, sp, #0
 8006258:	60f8      	str	r0, [r7, #12]
 800625a:	460b      	mov	r3, r1
 800625c:	607a      	str	r2, [r7, #4]
 800625e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006260:	7afb      	ldrb	r3, [r7, #11]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d138      	bne.n	80062d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800626c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006274:	2b03      	cmp	r3, #3
 8006276:	d14a      	bne.n	800630e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	429a      	cmp	r2, r3
 8006282:	d913      	bls.n	80062ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4293      	cmp	r3, r2
 800629c:	bf28      	it	cs
 800629e:	4613      	movcs	r3, r2
 80062a0:	461a      	mov	r2, r3
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f001 f80f 	bl	80072c8 <USBD_CtlContinueRx>
 80062aa:	e030      	b.n	800630e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d10b      	bne.n	80062d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f001 f80a 	bl	80072ea <USBD_CtlSendStatus>
 80062d6:	e01a      	b.n	800630e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d114      	bne.n	800630e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00e      	beq.n	800630e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	7afa      	ldrb	r2, [r7, #11]
 80062fa:	4611      	mov	r1, r2
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	4798      	blx	r3
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	e000      	b.n	8006310 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	460b      	mov	r3, r1
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d16b      	bne.n	8006404 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3314      	adds	r3, #20
 8006330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006338:	2b02      	cmp	r3, #2
 800633a:	d156      	bne.n	80063ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	429a      	cmp	r2, r3
 8006346:	d914      	bls.n	8006372 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	461a      	mov	r2, r3
 800635c:	6879      	ldr	r1, [r7, #4]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 ff84 	bl	800726c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006364:	2300      	movs	r3, #0
 8006366:	2200      	movs	r2, #0
 8006368:	2100      	movs	r1, #0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f001 fc8c 	bl	8007c88 <USBD_LL_PrepareReceive>
 8006370:	e03b      	b.n	80063ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	d11c      	bne.n	80063b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006386:	429a      	cmp	r2, r3
 8006388:	d316      	bcc.n	80063b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006394:	429a      	cmp	r2, r3
 8006396:	d20f      	bcs.n	80063b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006398:	2200      	movs	r2, #0
 800639a:	2100      	movs	r1, #0
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 ff65 	bl	800726c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063aa:	2300      	movs	r3, #0
 80063ac:	2200      	movs	r2, #0
 80063ae:	2100      	movs	r1, #0
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f001 fc69 	bl	8007c88 <USBD_LL_PrepareReceive>
 80063b6:	e018      	b.n	80063ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10b      	bne.n	80063dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063dc:	2180      	movs	r1, #128	; 0x80
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f001 fba8 	bl	8007b34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 ff93 	bl	8007310 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d122      	bne.n	800643a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f7ff fe98 	bl	800612a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006402:	e01a      	b.n	800643a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b03      	cmp	r3, #3
 800640e:	d114      	bne.n	800643a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	7afa      	ldrb	r2, [r7, #11]
 8006426:	4611      	mov	r1, r2
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	4798      	blx	r3
 800642c:	4603      	mov	r3, r0
 800642e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	e000      	b.n	800643c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e02f      	b.n	80064d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00f      	beq.n	80064a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6852      	ldr	r2, [r2, #4]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	4611      	mov	r1, r2
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	2200      	movs	r2, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fafe 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2240      	movs	r2, #64	; 0x40
 80064ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80064be:	2340      	movs	r3, #64	; 0x40
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	; 0x80
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 faf0 	bl	8007aaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2240      	movs	r2, #64	; 0x40
 80064d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	78fa      	ldrb	r2, [r7, #3]
 80064f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800650e:	b2da      	uxtb	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b04      	cmp	r3, #4
 800653e:	d106      	bne.n	800654e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006546:	b2da      	uxtb	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800656e:	2303      	movs	r3, #3
 8006570:	e012      	b.n	8006598 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d10b      	bne.n	8006596 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e014      	b.n	80065e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d10d      	bne.n	80065e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4611      	mov	r1, r2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006602:	2303      	movs	r3, #3
 8006604:	e014      	b.n	8006630 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b03      	cmp	r3, #3
 8006610:	d10d      	bne.n	800662e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	4611      	mov	r1, r2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d009      	beq.n	800667c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6852      	ldr	r2, [r2, #4]
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	4611      	mov	r1, r2
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
  }

  return USBD_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006686:	b480      	push	{r7}
 8006688:	b087      	sub	sp, #28
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3301      	adds	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066a4:	8a3b      	ldrh	r3, [r7, #16]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	b21a      	sxth	r2, r3
 80066aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	b21b      	sxth	r3, r3
 80066b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066b4:	89fb      	ldrh	r3, [r7, #14]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d005      	beq.n	80066ea <USBD_StdDevReq+0x26>
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d853      	bhi.n	800678a <USBD_StdDevReq+0xc6>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <USBD_StdDevReq+0x3a>
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d14f      	bne.n	800678a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
      break;
 80066fc:	e04a      	b.n	8006794 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b09      	cmp	r3, #9
 8006704:	d83b      	bhi.n	800677e <USBD_StdDevReq+0xba>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <USBD_StdDevReq+0x48>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	08006761 	.word	0x08006761
 8006710:	08006775 	.word	0x08006775
 8006714:	0800677f 	.word	0x0800677f
 8006718:	0800676b 	.word	0x0800676b
 800671c:	0800677f 	.word	0x0800677f
 8006720:	0800673f 	.word	0x0800673f
 8006724:	08006735 	.word	0x08006735
 8006728:	0800677f 	.word	0x0800677f
 800672c:	08006757 	.word	0x08006757
 8006730:	08006749 	.word	0x08006749
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f9de 	bl	8006af8 <USBD_GetDescriptor>
          break;
 800673c:	e024      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fb43 	bl	8006dcc <USBD_SetAddress>
          break;
 8006746:	e01f      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fb82 	bl	8006e54 <USBD_SetConfig>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
          break;
 8006754:	e018      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc21 	bl	8006fa0 <USBD_GetConfig>
          break;
 800675e:	e013      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc52 	bl	800700c <USBD_GetStatus>
          break;
 8006768:	e00e      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fc81 	bl	8007074 <USBD_SetFeature>
          break;
 8006772:	e009      	b.n	8006788 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006774:	6839      	ldr	r1, [r7, #0]
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc90 	bl	800709c <USBD_ClrFeature>
          break;
 800677c:	e004      	b.n	8006788 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fce7 	bl	8007154 <USBD_CtlError>
          break;
 8006786:	bf00      	nop
      }
      break;
 8006788:	e004      	b.n	8006794 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fce1 	bl	8007154 <USBD_CtlError>
      break;
 8006792:	bf00      	nop
  }

  return ret;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop

080067a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d005      	beq.n	80067c6 <USBD_StdItfReq+0x26>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d82f      	bhi.n	800681e <USBD_StdItfReq+0x7e>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <USBD_StdItfReq+0x26>
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d12b      	bne.n	800681e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d81d      	bhi.n	8006810 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	889b      	ldrh	r3, [r3, #4]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d813      	bhi.n	8006806 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	4798      	blx	r3
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	88db      	ldrh	r3, [r3, #6]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d110      	bne.n	800681a <USBD_StdItfReq+0x7a>
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10d      	bne.n	800681a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fd73 	bl	80072ea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006804:	e009      	b.n	800681a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fca3 	bl	8007154 <USBD_CtlError>
          break;
 800680e:	e004      	b.n	800681a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc9e 	bl	8007154 <USBD_CtlError>
          break;
 8006818:	e000      	b.n	800681c <USBD_StdItfReq+0x7c>
          break;
 800681a:	bf00      	nop
      }
      break;
 800681c:	e004      	b.n	8006828 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc97 	bl	8007154 <USBD_CtlError>
      break;
 8006826:	bf00      	nop
  }

  return ret;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	889b      	ldrh	r3, [r3, #4]
 8006844:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d007      	beq.n	8006862 <USBD_StdEPReq+0x30>
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	f200 8145 	bhi.w	8006ae2 <USBD_StdEPReq+0x2b0>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <USBD_StdEPReq+0x44>
 800685c:	2b20      	cmp	r3, #32
 800685e:	f040 8140 	bne.w	8006ae2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	6839      	ldr	r1, [r7, #0]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	4798      	blx	r3
 8006870:	4603      	mov	r3, r0
 8006872:	73fb      	strb	r3, [r7, #15]
      break;
 8006874:	e13a      	b.n	8006aec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d007      	beq.n	800688e <USBD_StdEPReq+0x5c>
 800687e:	2b03      	cmp	r3, #3
 8006880:	f300 8129 	bgt.w	8006ad6 <USBD_StdEPReq+0x2a4>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d07f      	beq.n	8006988 <USBD_StdEPReq+0x156>
 8006888:	2b01      	cmp	r3, #1
 800688a:	d03c      	beq.n	8006906 <USBD_StdEPReq+0xd4>
 800688c:	e123      	b.n	8006ad6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d002      	beq.n	80068a0 <USBD_StdEPReq+0x6e>
 800689a:	2b03      	cmp	r3, #3
 800689c:	d016      	beq.n	80068cc <USBD_StdEPReq+0x9a>
 800689e:	e02c      	b.n	80068fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068a0:	7bbb      	ldrb	r3, [r7, #14]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <USBD_StdEPReq+0x90>
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d00a      	beq.n	80068c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f93f 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068b6:	2180      	movs	r1, #128	; 0x80
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 f93b 	bl	8007b34 <USBD_LL_StallEP>
 80068be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068c0:	e020      	b.n	8006904 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fc45 	bl	8007154 <USBD_CtlError>
              break;
 80068ca:	e01b      	b.n	8006904 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10e      	bne.n	80068f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <USBD_StdEPReq+0xc0>
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b80      	cmp	r3, #128	; 0x80
 80068de:	d008      	beq.n	80068f2 <USBD_StdEPReq+0xc0>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	88db      	ldrh	r3, [r3, #6]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d104      	bne.n	80068f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 f921 	bl	8007b34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fcf9 	bl	80072ea <USBD_CtlSendStatus>

              break;
 80068f8:	e004      	b.n	8006904 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc29 	bl	8007154 <USBD_CtlError>
              break;
 8006902:	bf00      	nop
          }
          break;
 8006904:	e0ec      	b.n	8006ae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d002      	beq.n	8006918 <USBD_StdEPReq+0xe6>
 8006912:	2b03      	cmp	r3, #3
 8006914:	d016      	beq.n	8006944 <USBD_StdEPReq+0x112>
 8006916:	e030      	b.n	800697a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006918:	7bbb      	ldrb	r3, [r7, #14]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <USBD_StdEPReq+0x108>
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b80      	cmp	r3, #128	; 0x80
 8006922:	d00a      	beq.n	800693a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 f903 	bl	8007b34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800692e:	2180      	movs	r1, #128	; 0x80
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 f8ff 	bl	8007b34 <USBD_LL_StallEP>
 8006936:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006938:	e025      	b.n	8006986 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fc09 	bl	8007154 <USBD_CtlError>
              break;
 8006942:	e020      	b.n	8006986 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	885b      	ldrh	r3, [r3, #2]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11b      	bne.n	8006984 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f001 f909 	bl	8007b72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fcc2 	bl	80072ea <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006978:	e004      	b.n	8006984 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fbe9 	bl	8007154 <USBD_CtlError>
              break;
 8006982:	e000      	b.n	8006986 <USBD_StdEPReq+0x154>
              break;
 8006984:	bf00      	nop
          }
          break;
 8006986:	e0ab      	b.n	8006ae0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b02      	cmp	r3, #2
 8006992:	d002      	beq.n	800699a <USBD_StdEPReq+0x168>
 8006994:	2b03      	cmp	r3, #3
 8006996:	d032      	beq.n	80069fe <USBD_StdEPReq+0x1cc>
 8006998:	e097      	b.n	8006aca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <USBD_StdEPReq+0x17e>
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d004      	beq.n	80069b0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fbd3 	bl	8007154 <USBD_CtlError>
                break;
 80069ae:	e091      	b.n	8006ad4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da0b      	bge.n	80069d0 <USBD_StdEPReq+0x19e>
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	3310      	adds	r3, #16
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	e00b      	b.n	80069e8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	3304      	adds	r3, #4
 80069e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2202      	movs	r2, #2
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc1d 	bl	8007236 <USBD_CtlSendData>
              break;
 80069fc:	e06a      	b.n	8006ad4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da11      	bge.n	8006a2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d117      	bne.n	8006a50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a20:	6839      	ldr	r1, [r7, #0]
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fb96 	bl	8007154 <USBD_CtlError>
                  break;
 8006a28:	e054      	b.n	8006ad4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb83 	bl	8007154 <USBD_CtlError>
                  break;
 8006a4e:	e041      	b.n	8006ad4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da0b      	bge.n	8006a70 <USBD_StdEPReq+0x23e>
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	3310      	adds	r3, #16
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	e00b      	b.n	8006a88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	4413      	add	r3, r2
 8006a86:	3304      	adds	r3, #4
 8006a88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <USBD_StdEPReq+0x264>
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b80      	cmp	r3, #128	; 0x80
 8006a94:	d103      	bne.n	8006a9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e00e      	b.n	8006abc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f001 f884 	bl	8007bb0 <USBD_LL_IsStallEP>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e002      	b.n	8006abc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fbb7 	bl	8007236 <USBD_CtlSendData>
              break;
 8006ac8:	e004      	b.n	8006ad4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb41 	bl	8007154 <USBD_CtlError>
              break;
 8006ad2:	bf00      	nop
          }
          break;
 8006ad4:	e004      	b.n	8006ae0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fb3b 	bl	8007154 <USBD_CtlError>
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e004      	b.n	8006aec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fb35 	bl	8007154 <USBD_CtlError>
      break;
 8006aea:	bf00      	nop
  }

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	885b      	ldrh	r3, [r3, #2]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	f200 8128 	bhi.w	8006d6e <USBD_GetDescriptor+0x276>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <USBD_GetDescriptor+0x2c>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006d6f 	.word	0x08006d6f
 8006b34:	08006d6f 	.word	0x08006d6f
 8006b38:	08006d0f 	.word	0x08006d0f
 8006b3c:	08006d3b 	.word	0x08006d3b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7c12      	ldrb	r2, [r2, #16]
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
      break;
 8006b56:	e112      	b.n	8006d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7c1b      	ldrb	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10d      	bne.n	8006b7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f107 0208 	add.w	r2, r7, #8
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3301      	adds	r3, #1
 8006b76:	2202      	movs	r2, #2
 8006b78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b7a:	e100      	b.n	8006d7e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	f107 0208 	add.w	r2, r7, #8
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
 8006b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	2202      	movs	r2, #2
 8006b94:	701a      	strb	r2, [r3, #0]
      break;
 8006b96:	e0f2      	b.n	8006d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	885b      	ldrh	r3, [r3, #2]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	f200 80ac 	bhi.w	8006cfc <USBD_GetDescriptor+0x204>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <USBD_GetDescriptor+0xb4>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bc5 	.word	0x08006bc5
 8006bb0:	08006bf9 	.word	0x08006bf9
 8006bb4:	08006c2d 	.word	0x08006c2d
 8006bb8:	08006c61 	.word	0x08006c61
 8006bbc:	08006c95 	.word	0x08006c95
 8006bc0:	08006cc9 	.word	0x08006cc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	7c12      	ldrb	r2, [r2, #16]
 8006bdc:	f107 0108 	add.w	r1, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006be6:	e091      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fab2 	bl	8007154 <USBD_CtlError>
            err++;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bf6:	e089      	b.n	8006d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	7c12      	ldrb	r2, [r2, #16]
 8006c10:	f107 0108 	add.w	r1, r7, #8
 8006c14:	4610      	mov	r0, r2
 8006c16:	4798      	blx	r3
 8006c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c1a:	e077      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fa98 	bl	8007154 <USBD_CtlError>
            err++;
 8006c24:	7afb      	ldrb	r3, [r7, #11]
 8006c26:	3301      	adds	r3, #1
 8006c28:	72fb      	strb	r3, [r7, #11]
          break;
 8006c2a:	e06f      	b.n	8006d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	7c12      	ldrb	r2, [r2, #16]
 8006c44:	f107 0108 	add.w	r1, r7, #8
 8006c48:	4610      	mov	r0, r2
 8006c4a:	4798      	blx	r3
 8006c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c4e:	e05d      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa7e 	bl	8007154 <USBD_CtlError>
            err++;
 8006c58:	7afb      	ldrb	r3, [r7, #11]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c5e:	e055      	b.n	8006d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00b      	beq.n	8006c84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	7c12      	ldrb	r2, [r2, #16]
 8006c78:	f107 0108 	add.w	r1, r7, #8
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4798      	blx	r3
 8006c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c82:	e043      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fa64 	bl	8007154 <USBD_CtlError>
            err++;
 8006c8c:	7afb      	ldrb	r3, [r7, #11]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	72fb      	strb	r3, [r7, #11]
          break;
 8006c92:	e03b      	b.n	8006d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	7c12      	ldrb	r2, [r2, #16]
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
 8006cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cb6:	e029      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa4a 	bl	8007154 <USBD_CtlError>
            err++;
 8006cc0:	7afb      	ldrb	r3, [r7, #11]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cc6:	e021      	b.n	8006d0c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00b      	beq.n	8006cec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	7c12      	ldrb	r2, [r2, #16]
 8006ce0:	f107 0108 	add.w	r1, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cea:	e00f      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa30 	bl	8007154 <USBD_CtlError>
            err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cfa:	e007      	b.n	8006d0c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa28 	bl	8007154 <USBD_CtlError>
          err++;
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	3301      	adds	r3, #1
 8006d08:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006d0a:	bf00      	nop
      }
      break;
 8006d0c:	e037      	b.n	8006d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7c1b      	ldrb	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	f107 0208 	add.w	r2, r7, #8
 8006d22:	4610      	mov	r0, r2
 8006d24:	4798      	blx	r3
 8006d26:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d28:	e029      	b.n	8006d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fa11 	bl	8007154 <USBD_CtlError>
        err++;
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	3301      	adds	r3, #1
 8006d36:	72fb      	strb	r3, [r7, #11]
      break;
 8006d38:	e021      	b.n	8006d7e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	7c1b      	ldrb	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10d      	bne.n	8006d5e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	f107 0208 	add.w	r2, r7, #8
 8006d4e:	4610      	mov	r0, r2
 8006d50:	4798      	blx	r3
 8006d52:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	2207      	movs	r2, #7
 8006d5a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d5c:	e00f      	b.n	8006d7e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9f7 	bl	8007154 <USBD_CtlError>
        err++;
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d6c:	e007      	b.n	8006d7e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9ef 	bl	8007154 <USBD_CtlError>
      err++;
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d7c:	bf00      	nop
  }

  if (err != 0U)
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d11e      	bne.n	8006dc2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	88db      	ldrh	r3, [r3, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d016      	beq.n	8006dba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d8c:	893b      	ldrh	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00e      	beq.n	8006db0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88da      	ldrh	r2, [r3, #6]
 8006d96:	893b      	ldrh	r3, [r7, #8]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	bf28      	it	cs
 8006d9c:	4613      	movcs	r3, r2
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006da2:	893b      	ldrh	r3, [r7, #8]
 8006da4:	461a      	mov	r2, r3
 8006da6:	68f9      	ldr	r1, [r7, #12]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa44 	bl	8007236 <USBD_CtlSendData>
 8006dae:	e009      	b.n	8006dc4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f9ce 	bl	8007154 <USBD_CtlError>
 8006db8:	e004      	b.n	8006dc4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa95 	bl	80072ea <USBD_CtlSendStatus>
 8006dc0:	e000      	b.n	8006dc4 <USBD_GetDescriptor+0x2cc>
    return;
 8006dc2:	bf00      	nop
  }
}
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop

08006dcc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	889b      	ldrh	r3, [r3, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d131      	bne.n	8006e42 <USBD_SetAddress+0x76>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	88db      	ldrh	r3, [r3, #6]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d12d      	bne.n	8006e42 <USBD_SetAddress+0x76>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	885b      	ldrh	r3, [r3, #2]
 8006dea:	2b7f      	cmp	r3, #127	; 0x7f
 8006dec:	d829      	bhi.n	8006e42 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d104      	bne.n	8006e10 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f9a3 	bl	8007154 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0e:	e01d      	b.n	8006e4c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7bfa      	ldrb	r2, [r7, #15]
 8006e14:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fef3 	bl	8007c08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa61 	bl	80072ea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e36:	e009      	b.n	8006e4c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e40:	e004      	b.n	8006e4c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f985 	bl	8007154 <USBD_CtlError>
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	4b4c      	ldr	r3, [pc, #304]	; (8006f9c <USBD_SetConfig+0x148>)
 8006e6a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e6c:	4b4b      	ldr	r3, [pc, #300]	; (8006f9c <USBD_SetConfig+0x148>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d905      	bls.n	8006e80 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f96c 	bl	8007154 <USBD_CtlError>
    return USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e088      	b.n	8006f92 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d002      	beq.n	8006e92 <USBD_SetConfig+0x3e>
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d025      	beq.n	8006edc <USBD_SetConfig+0x88>
 8006e90:	e071      	b.n	8006f76 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e92:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <USBD_SetConfig+0x148>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01c      	beq.n	8006ed4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e9a:	4b40      	ldr	r3, [pc, #256]	; (8006f9c <USBD_SetConfig+0x148>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ea4:	4b3d      	ldr	r3, [pc, #244]	; (8006f9c <USBD_SetConfig+0x148>)
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff f948 	bl	8006140 <USBD_SetClassConfig>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f949 	bl	8007154 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ec2:	e065      	b.n	8006f90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa10 	bl	80072ea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2203      	movs	r2, #3
 8006ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ed2:	e05d      	b.n	8006f90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fa08 	bl	80072ea <USBD_CtlSendStatus>
      break;
 8006eda:	e059      	b.n	8006f90 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006edc:	4b2f      	ldr	r3, [pc, #188]	; (8006f9c <USBD_SetConfig+0x148>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d112      	bne.n	8006f0a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006eec:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <USBD_SetConfig+0x148>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ef6:	4b29      	ldr	r3, [pc, #164]	; (8006f9c <USBD_SetConfig+0x148>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff f93b 	bl	8006178 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f9f1 	bl	80072ea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f08:	e042      	b.n	8006f90 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006f0a:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <USBD_SetConfig+0x148>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d02a      	beq.n	8006f6e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff f929 	bl	8006178 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f26:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <USBD_SetConfig+0x148>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f30:	4b1a      	ldr	r3, [pc, #104]	; (8006f9c <USBD_SetConfig+0x148>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff f902 	bl	8006140 <USBD_SetClassConfig>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00f      	beq.n	8006f66 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006f46:	6839      	ldr	r1, [r7, #0]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f903 	bl	8007154 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f90e 	bl	8006178 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f64:	e014      	b.n	8006f90 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9bf 	bl	80072ea <USBD_CtlSendStatus>
      break;
 8006f6c:	e010      	b.n	8006f90 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f9bb 	bl	80072ea <USBD_CtlSendStatus>
      break;
 8006f74:	e00c      	b.n	8006f90 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f8eb 	bl	8007154 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <USBD_SetConfig+0x148>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff f8f7 	bl	8006178 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8e:	bf00      	nop
  }

  return ret;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000019c 	.word	0x2000019c

08006fa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	88db      	ldrh	r3, [r3, #6]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d004      	beq.n	8006fbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8cd 	bl	8007154 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fba:	e023      	b.n	8007004 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	dc02      	bgt.n	8006fce <USBD_GetConfig+0x2e>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dc03      	bgt.n	8006fd4 <USBD_GetConfig+0x34>
 8006fcc:	e015      	b.n	8006ffa <USBD_GetConfig+0x5a>
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d00b      	beq.n	8006fea <USBD_GetConfig+0x4a>
 8006fd2:	e012      	b.n	8006ffa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f927 	bl	8007236 <USBD_CtlSendData>
        break;
 8006fe8:	e00c      	b.n	8007004 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f91f 	bl	8007236 <USBD_CtlSendData>
        break;
 8006ff8:	e004      	b.n	8007004 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f8a9 	bl	8007154 <USBD_CtlError>
        break;
 8007002:	bf00      	nop
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800701c:	b2db      	uxtb	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	2b02      	cmp	r3, #2
 8007022:	d81e      	bhi.n	8007062 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	88db      	ldrh	r3, [r3, #6]
 8007028:	2b02      	cmp	r3, #2
 800702a:	d004      	beq.n	8007036 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f890 	bl	8007154 <USBD_CtlError>
        break;
 8007034:	e01a      	b.n	800706c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f043 0202 	orr.w	r2, r3, #2
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	330c      	adds	r3, #12
 8007056:	2202      	movs	r2, #2
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f8eb 	bl	8007236 <USBD_CtlSendData>
      break;
 8007060:	e004      	b.n	800706c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f875 	bl	8007154 <USBD_CtlError>
      break;
 800706a:	bf00      	nop
  }
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	885b      	ldrh	r3, [r3, #2]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d106      	bne.n	8007094 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f92b 	bl	80072ea <USBD_CtlSendStatus>
  }
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d80b      	bhi.n	80070cc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10c      	bne.n	80070d6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f910 	bl	80072ea <USBD_CtlSendStatus>
      }
      break;
 80070ca:	e004      	b.n	80070d6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f840 	bl	8007154 <USBD_CtlError>
      break;
 80070d4:	e000      	b.n	80070d8 <USBD_ClrFeature+0x3c>
      break;
 80070d6:	bf00      	nop
  }
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff fabb 	bl	8006686 <SWAPBYTE>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff faae 	bl	8006686 <SWAPBYTE>
 800712a:	4603      	mov	r3, r0
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3301      	adds	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff faa1 	bl	8006686 <SWAPBYTE>
 8007144:	4603      	mov	r3, r0
 8007146:	461a      	mov	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	80da      	strh	r2, [r3, #6]
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fce7 	bl	8007b34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007166:	2100      	movs	r1, #0
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fce3 	bl	8007b34 <USBD_LL_StallEP>
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d036      	beq.n	80071fa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007190:	6938      	ldr	r0, [r7, #16]
 8007192:	f000 f836 	bl	8007202 <USBD_GetLen>
 8007196:	4603      	mov	r3, r0
 8007198:	3301      	adds	r3, #1
 800719a:	b29b      	uxth	r3, r3
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	4413      	add	r3, r2
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	701a      	strb	r2, [r3, #0]
  idx++;
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	3301      	adds	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	4413      	add	r3, r2
 80071bc:	2203      	movs	r2, #3
 80071be:	701a      	strb	r2, [r3, #0]
  idx++;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	3301      	adds	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071c6:	e013      	b.n	80071f0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	4413      	add	r3, r2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	7812      	ldrb	r2, [r2, #0]
 80071d2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	3301      	adds	r3, #1
 80071d8:	613b      	str	r3, [r7, #16]
    idx++;
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	3301      	adds	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
    idx++;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e7      	bne.n	80071c8 <USBD_GetString+0x52>
 80071f8:	e000      	b.n	80071fc <USBD_GetString+0x86>
    return;
 80071fa:	bf00      	nop
  }
}
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007202:	b480      	push	{r7}
 8007204:	b085      	sub	sp, #20
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007212:	e005      	b.n	8007220 <USBD_GetLen+0x1e>
  {
    len++;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	3301      	adds	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	3301      	adds	r3, #1
 800721e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f5      	bne.n	8007214 <USBD_GetLen+0x12>
  }

  return len;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	2100      	movs	r1, #0
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 fcf2 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	2100      	movs	r1, #0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fce1 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2203      	movs	r2, #3
 800729e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	2100      	movs	r1, #0
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fce5 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	2100      	movs	r1, #0
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 fcd4 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2204      	movs	r2, #4
 80072f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072fa:	2300      	movs	r3, #0
 80072fc:	2200      	movs	r2, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fca0 	bl	8007c46 <USBD_LL_Transmit>

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2205      	movs	r2, #5
 800731c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007320:	2300      	movs	r3, #0
 8007322:	2200      	movs	r2, #0
 8007324:	2100      	movs	r1, #0
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fcae 	bl	8007c88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800733c:	2200      	movs	r2, #0
 800733e:	4912      	ldr	r1, [pc, #72]	; (8007388 <MX_USB_DEVICE_Init+0x50>)
 8007340:	4812      	ldr	r0, [pc, #72]	; (800738c <MX_USB_DEVICE_Init+0x54>)
 8007342:	f7fe fe8f 	bl	8006064 <USBD_Init>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800734c:	f7f9 fa1e 	bl	800078c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007350:	490f      	ldr	r1, [pc, #60]	; (8007390 <MX_USB_DEVICE_Init+0x58>)
 8007352:	480e      	ldr	r0, [pc, #56]	; (800738c <MX_USB_DEVICE_Init+0x54>)
 8007354:	f7fe feb6 	bl	80060c4 <USBD_RegisterClass>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800735e:	f7f9 fa15 	bl	800078c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007362:	490c      	ldr	r1, [pc, #48]	; (8007394 <MX_USB_DEVICE_Init+0x5c>)
 8007364:	4809      	ldr	r0, [pc, #36]	; (800738c <MX_USB_DEVICE_Init+0x54>)
 8007366:	f7fe fdd7 	bl	8005f18 <USBD_CDC_RegisterInterface>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007370:	f7f9 fa0c 	bl	800078c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007374:	4805      	ldr	r0, [pc, #20]	; (800738c <MX_USB_DEVICE_Init+0x54>)
 8007376:	f7fe fecc 	bl	8006112 <USBD_Start>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007380:	f7f9 fa04 	bl	800078c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000130 	.word	0x20000130
 800738c:	2000046c 	.word	0x2000046c
 8007390:	20000018 	.word	0x20000018
 8007394:	2000011c 	.word	0x2000011c

08007398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800739c:	2200      	movs	r2, #0
 800739e:	4905      	ldr	r1, [pc, #20]	; (80073b4 <CDC_Init_FS+0x1c>)
 80073a0:	4805      	ldr	r0, [pc, #20]	; (80073b8 <CDC_Init_FS+0x20>)
 80073a2:	f7fe fdce 	bl	8005f42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80073a6:	4905      	ldr	r1, [pc, #20]	; (80073bc <CDC_Init_FS+0x24>)
 80073a8:	4803      	ldr	r0, [pc, #12]	; (80073b8 <CDC_Init_FS+0x20>)
 80073aa:	f7fe fde8 	bl	8005f7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80073ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000f3c 	.word	0x20000f3c
 80073b8:	2000046c 	.word	0x2000046c
 80073bc:	2000073c 	.word	0x2000073c

080073c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073c0:	b480      	push	{r7}
 80073c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	4613      	mov	r3, r2
 80073de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b23      	cmp	r3, #35	; 0x23
 80073e4:	d84a      	bhi.n	800747c <CDC_Control_FS+0xac>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <CDC_Control_FS+0x1c>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	0800747d 	.word	0x0800747d
 80073f0:	0800747d 	.word	0x0800747d
 80073f4:	0800747d 	.word	0x0800747d
 80073f8:	0800747d 	.word	0x0800747d
 80073fc:	0800747d 	.word	0x0800747d
 8007400:	0800747d 	.word	0x0800747d
 8007404:	0800747d 	.word	0x0800747d
 8007408:	0800747d 	.word	0x0800747d
 800740c:	0800747d 	.word	0x0800747d
 8007410:	0800747d 	.word	0x0800747d
 8007414:	0800747d 	.word	0x0800747d
 8007418:	0800747d 	.word	0x0800747d
 800741c:	0800747d 	.word	0x0800747d
 8007420:	0800747d 	.word	0x0800747d
 8007424:	0800747d 	.word	0x0800747d
 8007428:	0800747d 	.word	0x0800747d
 800742c:	0800747d 	.word	0x0800747d
 8007430:	0800747d 	.word	0x0800747d
 8007434:	0800747d 	.word	0x0800747d
 8007438:	0800747d 	.word	0x0800747d
 800743c:	0800747d 	.word	0x0800747d
 8007440:	0800747d 	.word	0x0800747d
 8007444:	0800747d 	.word	0x0800747d
 8007448:	0800747d 	.word	0x0800747d
 800744c:	0800747d 	.word	0x0800747d
 8007450:	0800747d 	.word	0x0800747d
 8007454:	0800747d 	.word	0x0800747d
 8007458:	0800747d 	.word	0x0800747d
 800745c:	0800747d 	.word	0x0800747d
 8007460:	0800747d 	.word	0x0800747d
 8007464:	0800747d 	.word	0x0800747d
 8007468:	0800747d 	.word	0x0800747d
 800746c:	0800747d 	.word	0x0800747d
 8007470:	0800747d 	.word	0x0800747d
 8007474:	0800747d 	.word	0x0800747d
 8007478:	0800747d 	.word	0x0800747d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800747c:	bf00      	nop
  }

  return (USBD_OK);
 800747e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4808      	ldr	r0, [pc, #32]	; (80074bc <CDC_Receive_FS+0x30>)
 800749a:	f7fe fd70 	bl	8005f7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800749e:	4807      	ldr	r0, [pc, #28]	; (80074bc <CDC_Receive_FS+0x30>)
 80074a0:	f7fe fdb6 	bl	8006010 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,*Len);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7f9 f808 	bl	80004c0 <CDC_ReceiveCallBack>
  return (USBD_OK);
 80074b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000046c 	.word	0x2000046c

080074c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074d0:	4b0d      	ldr	r3, [pc, #52]	; (8007508 <CDC_Transmit_FS+0x48>)
 80074d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e00b      	b.n	80074fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074e6:	887b      	ldrh	r3, [r7, #2]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4806      	ldr	r0, [pc, #24]	; (8007508 <CDC_Transmit_FS+0x48>)
 80074ee:	f7fe fd28 	bl	8005f42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <CDC_Transmit_FS+0x48>)
 80074f4:	f7fe fd5c 	bl	8005fb0 <USBD_CDC_TransmitPacket>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	2000046c 	.word	0x2000046c

0800750c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800751e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2212      	movs	r2, #18
 8007540:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007542:	4b03      	ldr	r3, [pc, #12]	; (8007550 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	2000014c 	.word	0x2000014c

08007554 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	6039      	str	r1, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2204      	movs	r2, #4
 8007564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007566:	4b03      	ldr	r3, [pc, #12]	; (8007574 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	20000160 	.word	0x20000160

08007578 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	6039      	str	r1, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	4907      	ldr	r1, [pc, #28]	; (80075ac <USBD_FS_ProductStrDescriptor+0x34>)
 800758e:	4808      	ldr	r0, [pc, #32]	; (80075b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007590:	f7ff fdf1 	bl	8007176 <USBD_GetString>
 8007594:	e004      	b.n	80075a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4904      	ldr	r1, [pc, #16]	; (80075ac <USBD_FS_ProductStrDescriptor+0x34>)
 800759a:	4805      	ldr	r0, [pc, #20]	; (80075b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800759c:	f7ff fdeb 	bl	8007176 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	2000173c 	.word	0x2000173c
 80075b0:	08007de8 	.word	0x08007de8

080075b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	4904      	ldr	r1, [pc, #16]	; (80075d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075c4:	4804      	ldr	r0, [pc, #16]	; (80075d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075c6:	f7ff fdd6 	bl	8007176 <USBD_GetString>
  return USBD_StrDesc;
 80075ca:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	2000173c 	.word	0x2000173c
 80075d8:	08007e00 	.word	0x08007e00

080075dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	221a      	movs	r2, #26
 80075ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075ee:	f000 f843 	bl	8007678 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075f2:	4b02      	ldr	r3, [pc, #8]	; (80075fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000164 	.word	0x20000164

08007600 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	6039      	str	r1, [r7, #0]
 800760a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d105      	bne.n	800761e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4907      	ldr	r1, [pc, #28]	; (8007634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007616:	4808      	ldr	r0, [pc, #32]	; (8007638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007618:	f7ff fdad 	bl	8007176 <USBD_GetString>
 800761c:	e004      	b.n	8007628 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4904      	ldr	r1, [pc, #16]	; (8007634 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007622:	4805      	ldr	r0, [pc, #20]	; (8007638 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007624:	f7ff fda7 	bl	8007176 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	2000173c 	.word	0x2000173c
 8007638:	08007e14 	.word	0x08007e14

0800763c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	6039      	str	r1, [r7, #0]
 8007646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007648:	79fb      	ldrb	r3, [r7, #7]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d105      	bne.n	800765a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	4907      	ldr	r1, [pc, #28]	; (8007670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007652:	4808      	ldr	r0, [pc, #32]	; (8007674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007654:	f7ff fd8f 	bl	8007176 <USBD_GetString>
 8007658:	e004      	b.n	8007664 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	4904      	ldr	r1, [pc, #16]	; (8007670 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800765e:	4805      	ldr	r0, [pc, #20]	; (8007674 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007660:	f7ff fd89 	bl	8007176 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007664:	4b02      	ldr	r3, [pc, #8]	; (8007670 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	2000173c 	.word	0x2000173c
 8007674:	08007e20 	.word	0x08007e20

08007678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800767e:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <Get_SerialNum+0x44>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007684:	4b0e      	ldr	r3, [pc, #56]	; (80076c0 <Get_SerialNum+0x48>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800768a:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <Get_SerialNum+0x4c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4413      	add	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800769e:	2208      	movs	r2, #8
 80076a0:	4909      	ldr	r1, [pc, #36]	; (80076c8 <Get_SerialNum+0x50>)
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f814 	bl	80076d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076a8:	2204      	movs	r2, #4
 80076aa:	4908      	ldr	r1, [pc, #32]	; (80076cc <Get_SerialNum+0x54>)
 80076ac:	68b8      	ldr	r0, [r7, #8]
 80076ae:	f000 f80f 	bl	80076d0 <IntToUnicode>
  }
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	1fff7a10 	.word	0x1fff7a10
 80076c0:	1fff7a14 	.word	0x1fff7a14
 80076c4:	1fff7a18 	.word	0x1fff7a18
 80076c8:	20000166 	.word	0x20000166
 80076cc:	20000176 	.word	0x20000176

080076d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]
 80076e6:	e027      	b.n	8007738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	0f1b      	lsrs	r3, r3, #28
 80076ec:	2b09      	cmp	r3, #9
 80076ee:	d80b      	bhi.n	8007708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	0f1b      	lsrs	r3, r3, #28
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	4619      	mov	r1, r3
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	440b      	add	r3, r1
 8007700:	3230      	adds	r2, #48	; 0x30
 8007702:	b2d2      	uxtb	r2, r2
 8007704:	701a      	strb	r2, [r3, #0]
 8007706:	e00a      	b.n	800771e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	0f1b      	lsrs	r3, r3, #28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	7dfb      	ldrb	r3, [r7, #23]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4619      	mov	r1, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	440b      	add	r3, r1
 8007718:	3237      	adds	r2, #55	; 0x37
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	3301      	adds	r3, #1
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4413      	add	r3, r2
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	3301      	adds	r3, #1
 8007736:	75fb      	strb	r3, [r7, #23]
 8007738:	7dfa      	ldrb	r2, [r7, #23]
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3d3      	bcc.n	80076e8 <IntToUnicode+0x18>
  }
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	371c      	adds	r7, #28
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
	...

08007750 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007758:	f107 0314 	add.w	r3, r7, #20
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	605a      	str	r2, [r3, #4]
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007770:	d13a      	bne.n	80077e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	4b1e      	ldr	r3, [pc, #120]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	4a1d      	ldr	r2, [pc, #116]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	6313      	str	r3, [r2, #48]	; 0x30
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800778e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007794:	2302      	movs	r3, #2
 8007796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007798:	2300      	movs	r3, #0
 800779a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779c:	2303      	movs	r3, #3
 800779e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80077a0:	230a      	movs	r3, #10
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077a4:	f107 0314 	add.w	r3, r7, #20
 80077a8:	4619      	mov	r1, r3
 80077aa:	4812      	ldr	r0, [pc, #72]	; (80077f4 <HAL_PCD_MspInit+0xa4>)
 80077ac:	f7f9 fe46 	bl	800143c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077b0:	4b0f      	ldr	r3, [pc, #60]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	4a0e      	ldr	r2, [pc, #56]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 80077b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ba:	6353      	str	r3, [r2, #52]	; 0x34
 80077bc:	2300      	movs	r3, #0
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 80077c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c4:	4a0a      	ldr	r2, [pc, #40]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 80077c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ca:	6453      	str	r3, [r2, #68]	; 0x44
 80077cc:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <HAL_PCD_MspInit+0xa0>)
 80077ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077d4:	60fb      	str	r3, [r7, #12]
 80077d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	2043      	movs	r0, #67	; 0x43
 80077de:	f7f9 fa7a 	bl	8000cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077e2:	2043      	movs	r0, #67	; 0x43
 80077e4:	f7f9 fa93 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077e8:	bf00      	nop
 80077ea:	3728      	adds	r7, #40	; 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40023800 	.word	0x40023800
 80077f4:	40020000 	.word	0x40020000

080077f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f7fe fcca 	bl	80061a8 <USBD_LL_SetupStage>
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800782e:	78fa      	ldrb	r2, [r7, #3]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	4613      	mov	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	4619      	mov	r1, r3
 8007846:	f7fe fd04 	bl	8006252 <USBD_LL_DataOutStage>
}
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	1a9b      	subs	r3, r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3348      	adds	r3, #72	; 0x48
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	4619      	mov	r1, r3
 800787a:	f7fe fd4d 	bl	8006318 <USBD_LL_DataInStage>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fe61 	bl	800655c <USBD_LL_SOF>
}
 800789a:	bf00      	nop
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078aa:	2301      	movs	r3, #1
 80078ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
 80078ba:	e008      	b.n	80078ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d102      	bne.n	80078ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
 80078c8:	e001      	b.n	80078ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078ca:	f7f8 ff5f 	bl	800078c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078d4:	7bfa      	ldrb	r2, [r7, #15]
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe fe01 	bl	80064e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fe fdad 	bl	8006444 <USBD_LL_Reset>
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fdfc 	bl	8006500 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6812      	ldr	r2, [r2, #0]
 8007916:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d005      	beq.n	8007934 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <HAL_PCD_SuspendCallback+0x48>)
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	4a03      	ldr	r2, [pc, #12]	; (800793c <HAL_PCD_SuspendCallback+0x48>)
 800792e:	f043 0306 	orr.w	r3, r3, #6
 8007932:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	e000ed00 	.word	0xe000ed00

08007940 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fdec 	bl	800652c <USBD_LL_Resume>
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800796e:	78fa      	ldrb	r2, [r7, #3]
 8007970:	4611      	mov	r1, r2
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fe3a 	bl	80065ec <USBD_LL_IsoOUTIncomplete>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fe02 	bl	80065a0 <USBD_LL_IsoINIncomplete>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fe40 	bl	8006638 <USBD_LL_DevConnected>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fe3d 	bl	800664e <USBD_LL_DevDisconnected>
}
 80079d4:	bf00      	nop
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d13c      	bne.n	8007a66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079ec:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <USBD_LL_Init+0x94>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <USBD_LL_Init+0x94>)
 80079f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <USBD_LL_Init+0x94>)
 80079fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007a04:	4b1a      	ldr	r3, [pc, #104]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a06:	2204      	movs	r2, #4
 8007a08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007a0a:	4b19      	ldr	r3, [pc, #100]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a10:	4b17      	ldr	r3, [pc, #92]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a16:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a18:	2202      	movs	r2, #2
 8007a1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a1c:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a22:	4b13      	ldr	r3, [pc, #76]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a34:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a3a:	480d      	ldr	r0, [pc, #52]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a3c:	f7f9 feb3 	bl	80017a6 <HAL_PCD_Init>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a46:	f7f8 fea1 	bl	800078c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a4a:	2180      	movs	r1, #128	; 0x80
 8007a4c:	4808      	ldr	r0, [pc, #32]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a4e:	f7fb f810 	bl	8002a72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a52:	2240      	movs	r2, #64	; 0x40
 8007a54:	2100      	movs	r1, #0
 8007a56:	4806      	ldr	r0, [pc, #24]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a58:	f7fa ffc4 	bl	80029e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a5c:	2280      	movs	r2, #128	; 0x80
 8007a5e:	2101      	movs	r1, #1
 8007a60:	4803      	ldr	r0, [pc, #12]	; (8007a70 <USBD_LL_Init+0x94>)
 8007a62:	f7fa ffbf 	bl	80029e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	2000193c 	.word	0x2000193c

08007a74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f9 ffa8 	bl	80019e0 <HAL_PCD_Start>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 f942 	bl	8007d20 <USBD_Get_USB_Status>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	70fb      	strb	r3, [r7, #3]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70bb      	strb	r3, [r7, #2]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ad2:	78bb      	ldrb	r3, [r7, #2]
 8007ad4:	883a      	ldrh	r2, [r7, #0]
 8007ad6:	78f9      	ldrb	r1, [r7, #3]
 8007ad8:	f7fa fb8c 	bl	80021f4 <HAL_PCD_EP_Open>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 f91c 	bl	8007d20 <USBD_Get_USB_Status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fa fbd5 	bl	80022c4 <HAL_PCD_EP_Close>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f8fd 	bl	8007d20 <USBD_Get_USB_Status>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fa fcad 	bl	80024b2 <HAL_PCD_EP_SetStall>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f8de 	bl	8007d20 <USBD_Get_USB_Status>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fa fcf2 	bl	800257a <HAL_PCD_EP_ClrStall>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 f8bf 	bl	8007d20 <USBD_Get_USB_Status>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da0b      	bge.n	8007be4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bd2:	68f9      	ldr	r1, [r7, #12]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	333e      	adds	r3, #62	; 0x3e
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	e00b      	b.n	8007bfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bea:	68f9      	ldr	r1, [r7, #12]
 8007bec:	4613      	mov	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fa fabf 	bl	80021aa <HAL_PCD_SetAddress>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 f874 	bl	8007d20 <USBD_Get_USB_Status>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
 8007c52:	460b      	mov	r3, r1
 8007c54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c64:	7af9      	ldrb	r1, [r7, #11]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	f7fa fbd8 	bl	800241e <HAL_PCD_EP_Transmit>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 f853 	bl	8007d20 <USBD_Get_USB_Status>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	460b      	mov	r3, r1
 8007c96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ca6:	7af9      	ldrb	r1, [r7, #11]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	f7fa fb54 	bl	8002358 <HAL_PCD_EP_Receive>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f832 	bl	8007d20 <USBD_Get_USB_Status>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cc0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cdc:	78fa      	ldrb	r2, [r7, #3]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fa fb84 	bl	80023ee <HAL_PCD_EP_GetRxCount>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <USBD_static_malloc+0x18>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	200001a0 	.word	0x200001a0

08007d0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d817      	bhi.n	8007d64 <USBD_Get_USB_Status+0x44>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <USBD_Get_USB_Status+0x1c>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d53 	.word	0x08007d53
 8007d44:	08007d59 	.word	0x08007d59
 8007d48:	08007d5f 	.word	0x08007d5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d50:	e00b      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d52:	2303      	movs	r3, #3
 8007d54:	73fb      	strb	r3, [r7, #15]
    break;
 8007d56:	e008      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d5c:	e005      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	73fb      	strb	r3, [r7, #15]
    break;
 8007d62:	e002      	b.n	8007d6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d64:	2303      	movs	r3, #3
 8007d66:	73fb      	strb	r3, [r7, #15]
    break;
 8007d68:	bf00      	nop
  }
  return usb_status;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <__libc_init_array>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	4d0d      	ldr	r5, [pc, #52]	; (8007db0 <__libc_init_array+0x38>)
 8007d7c:	4c0d      	ldr	r4, [pc, #52]	; (8007db4 <__libc_init_array+0x3c>)
 8007d7e:	1b64      	subs	r4, r4, r5
 8007d80:	10a4      	asrs	r4, r4, #2
 8007d82:	2600      	movs	r6, #0
 8007d84:	42a6      	cmp	r6, r4
 8007d86:	d109      	bne.n	8007d9c <__libc_init_array+0x24>
 8007d88:	4d0b      	ldr	r5, [pc, #44]	; (8007db8 <__libc_init_array+0x40>)
 8007d8a:	4c0c      	ldr	r4, [pc, #48]	; (8007dbc <__libc_init_array+0x44>)
 8007d8c:	f000 f820 	bl	8007dd0 <_init>
 8007d90:	1b64      	subs	r4, r4, r5
 8007d92:	10a4      	asrs	r4, r4, #2
 8007d94:	2600      	movs	r6, #0
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	d105      	bne.n	8007da6 <__libc_init_array+0x2e>
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da0:	4798      	blx	r3
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7ee      	b.n	8007d84 <__libc_init_array+0xc>
 8007da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007daa:	4798      	blx	r3
 8007dac:	3601      	adds	r6, #1
 8007dae:	e7f2      	b.n	8007d96 <__libc_init_array+0x1e>
 8007db0:	08007e58 	.word	0x08007e58
 8007db4:	08007e58 	.word	0x08007e58
 8007db8:	08007e58 	.word	0x08007e58
 8007dbc:	08007e5c 	.word	0x08007e5c

08007dc0 <memset>:
 8007dc0:	4402      	add	r2, r0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d100      	bne.n	8007dca <memset+0xa>
 8007dc8:	4770      	bx	lr
 8007dca:	f803 1b01 	strb.w	r1, [r3], #1
 8007dce:	e7f9      	b.n	8007dc4 <memset+0x4>

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
